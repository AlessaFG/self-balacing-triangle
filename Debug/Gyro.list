
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080090c0  080090c0  0000a0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  0000b210  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  0000a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  0000b210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  0000a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080094e8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000210  080096f8  0000b210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  080096f8  0000b598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107cb  00000000  00000000  0000b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  0001ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9f  00000000  00000000  0001ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231b9  00000000  00000000  0001f89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e0  00000000  00000000  00042a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5a7e  00000000  00000000  00055e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b8b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005734  00000000  00000000  0012b8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00131030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080090a8 	.word	0x080090a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080090a8 	.word	0x080090a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <KalmanFilter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float KalmanFilter(float newAngle, float newRate, float dt) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	@ 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fc6:	ed87 1a01 	vstr	s2, [r7, #4]
    // Predizione
    rate = newRate - bias;
 8000fca:	4b79      	ldr	r3, [pc, #484]	@ (80011b0 <KalmanFilter+0x1f8>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	4b76      	ldr	r3, [pc, #472]	@ (80011b4 <KalmanFilter+0x1fc>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
    angle += dt * rate;
 8000fde:	4b75      	ldr	r3, [pc, #468]	@ (80011b4 <KalmanFilter+0x1fc>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fec:	4b72      	ldr	r3, [pc, #456]	@ (80011b8 <KalmanFilter+0x200>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	4b70      	ldr	r3, [pc, #448]	@ (80011b8 <KalmanFilter+0x200>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]

    P[0][0] += dt * (dt * P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8000ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80011bc <KalmanFilter+0x204>)
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	4b6e      	ldr	r3, [pc, #440]	@ (80011bc <KalmanFilter+0x204>)
 8001004:	edd3 6a03 	vldr	s13, [r3, #12]
 8001008:	edd7 7a01 	vldr	s15, [r7, #4]
 800100c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001010:	4b6a      	ldr	r3, [pc, #424]	@ (80011bc <KalmanFilter+0x204>)
 8001012:	edd3 7a01 	vldr	s15, [r3, #4]
 8001016:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800101a:	4b68      	ldr	r3, [pc, #416]	@ (80011bc <KalmanFilter+0x204>)
 800101c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001020:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001024:	4b66      	ldr	r3, [pc, #408]	@ (80011c0 <KalmanFilter+0x208>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	4b60      	ldr	r3, [pc, #384]	@ (80011bc <KalmanFilter+0x204>)
 800103c:	edc3 7a00 	vstr	s15, [r3]
    P[0][1] -= dt * P[1][1];
 8001040:	4b5e      	ldr	r3, [pc, #376]	@ (80011bc <KalmanFilter+0x204>)
 8001042:	ed93 7a01 	vldr	s14, [r3, #4]
 8001046:	4b5d      	ldr	r3, [pc, #372]	@ (80011bc <KalmanFilter+0x204>)
 8001048:	edd3 6a03 	vldr	s13, [r3, #12]
 800104c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	4b58      	ldr	r3, [pc, #352]	@ (80011bc <KalmanFilter+0x204>)
 800105a:	edc3 7a01 	vstr	s15, [r3, #4]
    P[1][0] -= dt * P[1][1];
 800105e:	4b57      	ldr	r3, [pc, #348]	@ (80011bc <KalmanFilter+0x204>)
 8001060:	ed93 7a02 	vldr	s14, [r3, #8]
 8001064:	4b55      	ldr	r3, [pc, #340]	@ (80011bc <KalmanFilter+0x204>)
 8001066:	edd3 6a03 	vldr	s13, [r3, #12]
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001076:	4b51      	ldr	r3, [pc, #324]	@ (80011bc <KalmanFilter+0x204>)
 8001078:	edc3 7a02 	vstr	s15, [r3, #8]
    P[1][1] += Q_bias * dt;
 800107c:	4b4f      	ldr	r3, [pc, #316]	@ (80011bc <KalmanFilter+0x204>)
 800107e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001082:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <KalmanFilter+0x20c>)
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <KalmanFilter+0x204>)
 8001096:	edc3 7a03 	vstr	s15, [r3, #12]

    // Aggiornamento
    float y = newAngle - angle;  // Residuo (errore)
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <KalmanFilter+0x200>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = P[0][0] + R_measure; // Innovazione
 80010ac:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <KalmanFilter+0x204>)
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <KalmanFilter+0x210>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	edc7 7a08 	vstr	s15, [r7, #32]
    float K[2];  // Guadagni di Kalman
    K[0] = P[0][0] / S;
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <KalmanFilter+0x204>)
 80010c2:	edd3 6a00 	vldr	s13, [r3]
 80010c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80010ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ce:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = P[1][0] / S;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	@ (80011bc <KalmanFilter+0x204>)
 80010d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80010d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	edc7 7a05 	vstr	s15, [r7, #20]

    angle += K[0] * y;
 80010e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80010e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <KalmanFilter+0x200>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <KalmanFilter+0x200>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
    bias += K[1] * y;
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <KalmanFilter+0x1f8>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <KalmanFilter+0x1f8>)
 8001118:	edc3 7a00 	vstr	s15, [r3]

    // Aggiorna covarianza
    float P00_temp = P[0][0];
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <KalmanFilter+0x204>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61fb      	str	r3, [r7, #28]
    float P01_temp = P[0][1];
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <KalmanFilter+0x204>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
    P[0][0] -= K[0] * P00_temp;
 8001128:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <KalmanFilter+0x204>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001132:	edd7 7a07 	vldr	s15, [r7, #28]
 8001136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <KalmanFilter+0x204>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
    P[0][1] -= K[0] * P01_temp;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <KalmanFilter+0x204>)
 8001146:	ed93 7a01 	vldr	s14, [r3, #4]
 800114a:	edd7 6a04 	vldr	s13, [r7, #16]
 800114e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <KalmanFilter+0x204>)
 800115c:	edc3 7a01 	vstr	s15, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <KalmanFilter+0x204>)
 8001162:	ed93 7a02 	vldr	s14, [r3, #8]
 8001166:	edd7 6a05 	vldr	s13, [r7, #20]
 800116a:	edd7 7a07 	vldr	s15, [r7, #28]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <KalmanFilter+0x204>)
 8001178:	edc3 7a02 	vstr	s15, [r3, #8]
    P[1][1] -= K[1] * P01_temp;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <KalmanFilter+0x204>)
 800117e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001182:	edd7 6a05 	vldr	s13, [r7, #20]
 8001186:	edd7 7a06 	vldr	s15, [r7, #24]
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <KalmanFilter+0x204>)
 8001194:	edc3 7a03 	vstr	s15, [r3, #12]

    return angle;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <KalmanFilter+0x200>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
}
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	372c      	adds	r7, #44	@ 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200003ec 	.word	0x200003ec
 80011b4:	200003f0 	.word	0x200003f0
 80011b8:	200003e8 	.word	0x200003e8
 80011bc:	200003f4 	.word	0x200003f4
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000008 	.word	0x20000008

080011cc <MPU6050_Init>:
void MPU6050_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
    uint8_t check;
    check = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
    uint8_t Data;



    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, WHO_AM_I_REG, 1, &check, 1, HAL_MAX_DELAY);
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	2275      	movs	r2, #117	@ 0x75
 80011e8:	21d0      	movs	r1, #208	@ 0xd0
 80011ea:	4823      	ldr	r0, [pc, #140]	@ (8001278 <MPU6050_Init+0xac>)
 80011ec:	f001 fe6a 	bl	8002ec4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b68      	cmp	r3, #104	@ 0x68
 80011f4:	d13b      	bne.n	800126e <MPU6050_Init+0xa2>
    {
        Data = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	226b      	movs	r2, #107	@ 0x6b
 800120c:	21d0      	movs	r1, #208	@ 0xd0
 800120e:	481a      	ldr	r0, [pc, #104]	@ (8001278 <MPU6050_Init+0xac>)
 8001210:	f001 fd5e 	bl	8002cd0 <HAL_I2C_Mem_Write>

        Data = 0x07;
 8001214:	2307      	movs	r3, #7
 8001216:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dbb      	adds	r3, r7, #6
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2219      	movs	r2, #25
 800122a:	21d0      	movs	r1, #208	@ 0xd0
 800122c:	4812      	ldr	r0, [pc, #72]	@ (8001278 <MPU6050_Init+0xac>)
 800122e:	f001 fd4f 	bl	8002cd0 <HAL_I2C_Mem_Write>

        Data = 0x00;
 8001232:	2300      	movs	r3, #0
 8001234:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	221c      	movs	r2, #28
 8001248:	21d0      	movs	r1, #208	@ 0xd0
 800124a:	480b      	ldr	r0, [pc, #44]	@ (8001278 <MPU6050_Init+0xac>)
 800124c:	f001 fd40 	bl	8002cd0 <HAL_I2C_Mem_Write>

        Data = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	1dbb      	adds	r3, r7, #6
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	221b      	movs	r2, #27
 8001266:	21d0      	movs	r1, #208	@ 0xd0
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <MPU6050_Init+0xac>)
 800126a:	f001 fd31 	bl	8002cd0 <HAL_I2C_Mem_Write>
    }
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000022c 	.word	0x2000022c
 800127c:	00000000 	.word	0x00000000

08001280 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af04      	add	r7, sp, #16

	    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, ACCEL_XOUT_H_REG, 1, Rec_Data1, 6, HAL_MAX_DELAY);
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2306      	movs	r3, #6
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	223b      	movs	r2, #59	@ 0x3b
 8001298:	21d0      	movs	r1, #208	@ 0xd0
 800129a:	483a      	ldr	r0, [pc, #232]	@ (8001384 <MPU6050_Read_Accel+0x104>)
 800129c:	f001 fe12 	bl	8002ec4 <HAL_I2C_Mem_Read>
	    Ax = (int16_t)(Rec_Data1[0] << 8 | Rec_Data1 [1])/16384.0;;
 80012a0:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f956 	bl	8000564 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <MPU6050_Read_Accel+0x108>)
 80012be:	f7ff fae5 	bl	800088c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fcad 	bl	8000c28 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a2e      	ldr	r2, [pc, #184]	@ (800138c <MPU6050_Read_Accel+0x10c>)
 80012d2:	6013      	str	r3, [r2, #0]
	    Ay = (int16_t)(Rec_Data1[2] << 8 | Rec_Data1 [3])/16384.0;;
 80012d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f93c 	bl	8000564 <__aeabi_i2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <MPU6050_Read_Accel+0x108>)
 80012f2:	f7ff facb 	bl	800088c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc93 	bl	8000c28 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <MPU6050_Read_Accel+0x110>)
 8001306:	6013      	str	r3, [r2, #0]
	    Az = (int16_t)(Rec_Data1[4] << 8 | Rec_Data1 [5])/16384.0;;
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f922 	bl	8000564 <__aeabi_i2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MPU6050_Read_Accel+0x108>)
 8001326:	f7ff fab1 	bl	800088c <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc79 	bl	8000c28 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <MPU6050_Read_Accel+0x114>)
 800133a:	6013      	str	r3, [r2, #0]
	   	Gy = (int16_t)(Rec_Data1[10] << 8 | Rec_Data1 [11])/131.0;;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 800133e:	7a9b      	ldrb	r3, [r3, #10]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MPU6050_Read_Accel+0x100>)
 8001346:	7adb      	ldrb	r3, [r3, #11]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f908 	bl	8000564 <__aeabi_i2d>
 8001354:	a308      	add	r3, pc, #32	@ (adr r3, 8001378 <MPU6050_Read_Accel+0xf8>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fa97 	bl	800088c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc5f 	bl	8000c28 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <MPU6050_Read_Accel+0x118>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	00000000 	.word	0x00000000
 800137c:	40606000 	.word	0x40606000
 8001380:	20000404 	.word	0x20000404
 8001384:	2000022c 	.word	0x2000022c
 8001388:	40d00000 	.word	0x40d00000
 800138c:	20000410 	.word	0x20000410
 8001390:	20000414 	.word	0x20000414
 8001394:	20000418 	.word	0x20000418
 8001398:	2000041c 	.word	0x2000041c
 800139c:	00000000 	.word	0x00000000

080013a0 <CalcolaPitch>:


double CalcolaPitch(double Ax, double Ay, double Az, double Gy) {
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b092      	sub	sp, #72	@ 0x48
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	ed87 0b06 	vstr	d0, [r7, #24]
 80013aa:	ed87 1b04 	vstr	d1, [r7, #16]
 80013ae:	ed87 2b02 	vstr	d2, [r7, #8]
 80013b2:	ed87 3b00 	vstr	d3, [r7]
    double A_x = Ax - OaX;
 80013b6:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <CalcolaPitch+0x138>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8e4 	bl	8000588 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c8:	f7fe ff7e 	bl	80002c8 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double A_y = Ay - OaY;
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <CalcolaPitch+0x13c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8d5 	bl	8000588 <__aeabi_f2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e6:	f7fe ff6f 	bl	80002c8 <__aeabi_dsub>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double A_z = Az - OaZ;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <CalcolaPitch+0x140>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8c6 	bl	8000588 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001404:	f7fe ff60 	bl	80002c8 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Angolo calcolato dall'accelerometro
    double pitch_accel = atan2(A_x, sqrt(A_y * A_y + A_z * A_z)) * (180.0 / M_PI);
 8001410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001414:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001418:	f7ff f90e 	bl	8000638 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001428:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800142c:	f7ff f904 	bl	8000638 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4620      	mov	r0, r4
 8001436:	4629      	mov	r1, r5
 8001438:	f7fe ff48 	bl	80002cc <__adddf3>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f007 fabe 	bl	80089cc <sqrt>
 8001450:	eeb0 7a40 	vmov.f32	s14, s0
 8001454:	eef0 7a60 	vmov.f32	s15, s1
 8001458:	eeb0 1a47 	vmov.f32	s2, s14
 800145c:	eef0 1a67 	vmov.f32	s3, s15
 8001460:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001464:	f007 fab0 	bl	80089c8 <atan2>
 8001468:	ec51 0b10 	vmov	r0, r1, d0
 800146c:	a318      	add	r3, pc, #96	@ (adr r3, 80014d0 <CalcolaPitch+0x130>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f8e1 	bl	8000638 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Tempo di campionamento
    float dt = 0.0025; // Assumi 2.5 ms di campionamento (Timer7 interrupt)
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <CalcolaPitch+0x144>)
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24

    // Stima dell'angolo con il filtro di Kalman
    Pitch = KalmanFilter(pitch_accel, Gy, dt);
 8001482:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001486:	f7ff fbcf 	bl	8000c28 <__aeabi_d2f>
 800148a:	4604      	mov	r4, r0
 800148c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001490:	f7ff fbca 	bl	8000c28 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 800149a:	ee00 3a90 	vmov	s1, r3
 800149e:	ee00 4a10 	vmov	s0, r4
 80014a2:	f7ff fd89 	bl	8000fb8 <KalmanFilter>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <CalcolaPitch+0x148>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]

    return Pitch;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <CalcolaPitch+0x148>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f867 	bl	8000588 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b17 	vmov	d7, r2, r3
}
 80014c2:	eeb0 0a47 	vmov.f32	s0, s14
 80014c6:	eef0 0a67 	vmov.f32	s1, s15
 80014ca:	3748      	adds	r7, #72	@ 0x48
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdb0      	pop	{r4, r5, r7, pc}
 80014d0:	1a63c1f8 	.word	0x1a63c1f8
 80014d4:	404ca5dc 	.word	0x404ca5dc
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000014 	.word	0x20000014
 80014e4:	3b23d70a 	.word	0x3b23d70a
 80014e8:	20000420 	.word	0x20000420
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4aa4      	ldr	r2, [pc, #656]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x1a>
		MPU6050_Read_Accel();
 8001504:	f7ff febc 	bl	8001280 <MPU6050_Read_Accel>
	        }
	        // Imposta il ciclo di lavoro PWM
	        duty_cycle = (uint16_t)((100.0 - fabs(pid_output)) / 100.0 * 4200);
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
	    }
	}
 8001508:	e12e      	b.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x278>
	else if (htim->Instance == TIM7){
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4aa1      	ldr	r2, [pc, #644]	@ (8001794 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d136      	bne.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x92>
		Pitch = CalcolaPitch(Ax, Ay, Az, Gy)+1.5;
 8001514:	4ba0      	ldr	r3, [pc, #640]	@ (8001798 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f835 	bl	8000588 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	4b9e      	ldr	r3, [pc, #632]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f82e 	bl	8000588 <__aeabi_f2d>
 800152c:	4680      	mov	r8, r0
 800152e:	4689      	mov	r9, r1
 8001530:	4b9b      	ldr	r3, [pc, #620]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f827 	bl	8000588 <__aeabi_f2d>
 800153a:	4682      	mov	sl, r0
 800153c:	468b      	mov	fp, r1
 800153e:	4b99      	ldr	r3, [pc, #612]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f820 	bl	8000588 <__aeabi_f2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	ec43 2b13 	vmov	d3, r2, r3
 8001550:	ec4b ab12 	vmov	d2, sl, fp
 8001554:	ec49 8b11 	vmov	d1, r8, r9
 8001558:	ec45 4b10 	vmov	d0, r4, r5
 800155c:	f7ff ff20 	bl	80013a0 <CalcolaPitch>
 8001560:	ec51 0b10 	vmov	r0, r1, d0
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b8f      	ldr	r3, [pc, #572]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800156a:	f7fe feaf 	bl	80002cc <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb57 	bl	8000c28 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a8b      	ldr	r2, [pc, #556]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800157e:	6013      	str	r3, [r2, #0]
	}
 8001580:	e0f2      	b.n	8001768 <HAL_TIM_PeriodElapsedCallback+0x278>
	else if (htim->Instance == TIM6) // Controlla che sia Timer6
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a8a      	ldr	r2, [pc, #552]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	f040 80ed 	bne.w	8001768 <HAL_TIM_PeriodElapsedCallback+0x278>
	        error = 0.15 - Pitch;  // Setpoint = 0.15
 800158e:	4b87      	ldr	r3, [pc, #540]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fff8 	bl	8000588 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	a176      	add	r1, pc, #472	@ (adr r1, 8001778 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	f7fe fe91 	bl	80002c8 <__aeabi_dsub>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fb3b 	bl	8000c28 <__aeabi_d2f>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a7f      	ldr	r2, [pc, #508]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80015b6:	6013      	str	r3, [r2, #0]
	        proportional = Kp * error;
 80015b8:	4b7f      	ldr	r3, [pc, #508]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015ca:	edc3 7a00 	vstr	s15, [r3]
	        if (fabs(error) < 0.05) {  // Se l'errore è molto piccolo, disabilita l'integrazione
 80015ce:	4b79      	ldr	r3, [pc, #484]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eef0 7ae7 	vabs.f32	s15, s15
 80015d8:	ee17 0a90 	vmov	r0, s15
 80015dc:	f7fe ffd4 	bl	8000588 <__aeabi_f2d>
 80015e0:	a367      	add	r3, pc, #412	@ (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff fa99 	bl	8000b1c <__aeabi_dcmplt>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x10a>
	            integral = 0;
 80015f0:	4b73      	ldr	r3, [pc, #460]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e014      	b.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x134>
	            integral += Ki * error *dt_pid ; // Aggiorna solo se l'errore è abbastanza grande
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	4b6c      	ldr	r3, [pc, #432]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160a:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001614:	4b6a      	ldr	r3, [pc, #424]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	4b68      	ldr	r3, [pc, #416]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001620:	edc3 7a00 	vstr	s15, [r3]
	        if (integral > 40.0) integral = 40.0;
 8001624:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017cc <HAL_TIM_PeriodElapsedCallback+0x2dc>
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd02      	ble.n	800163e <HAL_TIM_PeriodElapsedCallback+0x14e>
 8001638:	4b61      	ldr	r3, [pc, #388]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800163a:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800163c:	601a      	str	r2, [r3, #0]
	        if (integral < -40.0) integral = -40.0;
 800163e:	4b60      	ldr	r3, [pc, #384]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80017d4 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8001648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d502      	bpl.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001652:	4b5b      	ldr	r3, [pc, #364]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001654:	4a60      	ldr	r2, [pc, #384]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001656:	601a      	str	r2, [r3, #0]
	        derivative = Kd * (error - prev_error) / dt_pid;
 8001658:	4b56      	ldr	r3, [pc, #344]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	4b5f      	ldr	r3, [pc, #380]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001668:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001672:	4b55      	ldr	r3, [pc, #340]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	4b59      	ldr	r3, [pc, #356]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
	        pid_output = proportional + integral + derivative;
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001692:	4b54      	ldr	r3, [pc, #336]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
	        prev_error = error;
 80016a2:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a4d      	ldr	r2, [pc, #308]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80016a8:	6013      	str	r3, [r2, #0]
	        if (pid_output < 0) {
 80016aa:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d505      	bpl.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x1d6>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Aziona il motore
 80016ba:	2201      	movs	r2, #1
 80016bc:	2120      	movs	r1, #32
 80016be:	484b      	ldr	r0, [pc, #300]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016c0:	f001 f984 	bl	80029cc <HAL_GPIO_WritePin>
 80016c4:	e004      	b.n	80016d0 <HAL_TIM_PeriodElapsedCallback+0x1e0>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Disattiva il motore
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	4848      	ldr	r0, [pc, #288]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016cc:	f001 f97e 	bl	80029cc <HAL_GPIO_WritePin>
	        if (pid_output > 100) {
 80016d0:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80017f0 <HAL_TIM_PeriodElapsedCallback+0x300>
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dd03      	ble.n	80016ec <HAL_TIM_PeriodElapsedCallback+0x1fc>
	            pid_output = 100;
 80016e4:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016e6:	4a43      	ldr	r2, [pc, #268]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e00c      	b.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x216>
	        } else if (pid_output < -100) {
 80016ec:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80017f8 <HAL_TIM_PeriodElapsedCallback+0x308>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d502      	bpl.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x216>
	            pid_output = -100;
 8001700:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001702:	4a3e      	ldr	r2, [pc, #248]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001704:	601a      	str	r2, [r3, #0]
	        duty_cycle = (uint16_t)((100.0 - fabs(pid_output)) / 100.0 * 4200);
 8001706:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eef0 7ae7 	vabs.f32	s15, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe ff38 	bl	8000588 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	4937      	ldr	r1, [pc, #220]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001722:	f7fe fdd1 	bl	80002c8 <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001734:	f7ff f8aa 	bl	800088c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	a311      	add	r3, pc, #68	@ (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff77 	bl	8000638 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2uiz>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800175c:	801a      	strh	r2, [r3, #0]
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	33333333 	.word	0x33333333
 800177c:	3fc33333 	.word	0x3fc33333
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fa99999 	.word	0x3fa99999
 8001788:	00000000 	.word	0x00000000
 800178c:	40b06800 	.word	0x40b06800
 8001790:	40014400 	.word	0x40014400
 8001794:	40001400 	.word	0x40001400
 8001798:	20000410 	.word	0x20000410
 800179c:	20000414 	.word	0x20000414
 80017a0:	20000418 	.word	0x20000418
 80017a4:	2000041c 	.word	0x2000041c
 80017a8:	3ff80000 	.word	0x3ff80000
 80017ac:	20000420 	.word	0x20000420
 80017b0:	40001000 	.word	0x40001000
 80017b4:	20000424 	.word	0x20000424
 80017b8:	20000018 	.word	0x20000018
 80017bc:	20000434 	.word	0x20000434
 80017c0:	2000042c 	.word	0x2000042c
 80017c4:	2000001c 	.word	0x2000001c
 80017c8:	20000024 	.word	0x20000024
 80017cc:	42200000 	.word	0x42200000
 80017d0:	42200000 	.word	0x42200000
 80017d4:	c2200000 	.word	0xc2200000
 80017d8:	c2200000 	.word	0xc2200000
 80017dc:	20000428 	.word	0x20000428
 80017e0:	20000020 	.word	0x20000020
 80017e4:	20000430 	.word	0x20000430
 80017e8:	20000438 	.word	0x20000438
 80017ec:	40020000 	.word	0x40020000
 80017f0:	42c80000 	.word	0x42c80000
 80017f4:	42c80000 	.word	0x42c80000
 80017f8:	c2c80000 	.word	0xc2c80000
 80017fc:	c2c80000 	.word	0xc2c80000
 8001800:	40590000 	.word	0x40590000
 8001804:	2000043c 	.word	0x2000043c
 8001808:	20000280 	.word	0x20000280

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b0a0      	sub	sp, #128	@ 0x80
 8001810:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	MPU6050_Init();
 8001812:	f7ff fcdb 	bl	80011cc <MPU6050_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001816:	f000 fd9d 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181a:	f000 f83d 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181e:	f000 f9e9 	bl	8001bf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001822:	f000 f9bd 	bl	8001ba0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001826:	f000 f8a5 	bl	8001974 <MX_I2C1_Init>
  MX_TIM6_Init();
 800182a:	f000 f929 	bl	8001a80 <MX_TIM6_Init>
  MX_TIM2_Init();
 800182e:	f000 f8cf 	bl	80019d0 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001832:	f000 f95b 	bl	8001aec <MX_TIM7_Init>
  MX_TIM10_Init();
 8001836:	f000 f98f 	bl	8001b58 <MX_TIM10_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   sprintf(msg, "Pitch: %f, Pid Output: %f\n", Pitch, pid_output);
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <main+0x7c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fea2 	bl	8000588 <__aeabi_f2d>
 8001844:	4604      	mov	r4, r0
 8001846:	460d      	mov	r5, r1
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <main+0x80>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4638      	mov	r0, r7
 8001858:	e9cd 2300 	strd	r2, r3, [sp]
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	490b      	ldr	r1, [pc, #44]	@ (8001890 <main+0x84>)
 8001862:	f004 ff85 	bl	8006770 <siprintf>
	   	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001866:	463b      	mov	r3, r7
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fd21 	bl	80002b0 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	4639      	mov	r1, r7
 8001874:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001878:	4806      	ldr	r0, [pc, #24]	@ (8001894 <main+0x88>)
 800187a:	f003 fea3 	bl	80055c4 <HAL_UART_Transmit>
	   	    HAL_Delay(10);
 800187e:	200a      	movs	r0, #10
 8001880:	f000 fdda 	bl	8002438 <HAL_Delay>
	   sprintf(msg, "Pitch: %f, Pid Output: %f\n", Pitch, pid_output);
 8001884:	bf00      	nop
 8001886:	e7d8      	b.n	800183a <main+0x2e>
 8001888:	20000420 	.word	0x20000420
 800188c:	20000438 	.word	0x20000438
 8001890:	080090c0 	.word	0x080090c0
 8001894:	200003a0 	.word	0x200003a0

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	@ 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2234      	movs	r2, #52	@ 0x34
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 ffc5 	bl	8006836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <SystemClock_Config+0xd4>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	4a29      	ldr	r2, [pc, #164]	@ (800196c <SystemClock_Config+0xd4>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <SystemClock_Config+0xd4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <SystemClock_Config+0xd8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018e4:	4a22      	ldr	r2, [pc, #136]	@ (8001970 <SystemClock_Config+0xd8>)
 80018e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <SystemClock_Config+0xd8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001900:	2310      	movs	r3, #16
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001904:	2302      	movs	r3, #2
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800190c:	2310      	movs	r3, #16
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001910:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001914:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001916:	2304      	movs	r3, #4
 8001918:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800191e:	2302      	movs	r3, #2
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fbfc 	bl	8004124 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001932:	f000 f9d5 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2302      	movs	r3, #2
 800193c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f89c 	bl	8003a90 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800195e:	f000 f9bf 	bl	8001ce0 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	@ 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_I2C1_Init+0x50>)
 800197a:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <MX_I2C1_Init+0x54>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_I2C1_Init+0x50>)
 8001980:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <MX_I2C1_Init+0x58>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_I2C1_Init+0x50>)
 8001992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001996:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_I2C1_Init+0x50>)
 80019b2:	f001 f849 	bl	8002a48 <HAL_I2C_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019bc:	f000 f990 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000022c 	.word	0x2000022c
 80019c8:	40005400 	.word	0x40005400
 80019cc:	000186a0 	.word	0x000186a0

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_TIM2_Init+0xac>)
 80019f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <MX_TIM2_Init+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a08:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a1a:	4818      	ldr	r0, [pc, #96]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a1c:	f002 ff0f 	bl	800483e <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a26:	f000 f95b 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	4619      	mov	r1, r3
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a3a:	f003 fce3 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a44:	f000 f94c 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	@ 0x60
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a60:	f003 f964 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a6a:	f000 f939 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a6e:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <MX_TIM2_Init+0xac>)
 8001a70:	f000 fa30 	bl	8001ed4 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000280 	.word	0x20000280

08001a80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	463b      	mov	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001a90:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <MX_TIM6_Init+0x68>)
 8001a92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001a96:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001a9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001aa4:	2231      	movs	r2, #49	@ 0x31
 8001aa6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001ab0:	f002 fdd6 	bl	8004660 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001aba:	f000 f911 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <MX_TIM6_Init+0x64>)
 8001acc:	f003 fc9a 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f000 f903 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002c8 	.word	0x200002c8
 8001ae8:	40001000 	.word	0x40001000

08001aec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001afc:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <MX_TIM7_Init+0x68>)
 8001afe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b02:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b06:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 24;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b10:	2218      	movs	r2, #24
 8001b12:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b1a:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b1c:	f002 fda0 	bl	8004660 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001b26:	f000 f8db 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <MX_TIM7_Init+0x64>)
 8001b38:	f003 fc64 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b42:	f000 f8cd 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000310 	.word	0x20000310
 8001b54:	40001400 	.word	0x40001400

08001b58 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <MX_TIM10_Init+0x44>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b64:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b68:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 19;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b72:	2213      	movs	r2, #19
 8001b74:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_TIM10_Init+0x40>)
 8001b84:	f002 fd6c 	bl	8004660 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001b8e:	f000 f8a7 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000358 	.word	0x20000358
 8001b9c:	40014400 	.word	0x40014400

08001ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_USART2_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bd8:	f003 fca4 	bl	8005524 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f000 f87d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200003a0 	.word	0x200003a0
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a30      	ldr	r2, [pc, #192]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a22      	ldr	r2, [pc, #136]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_GPIO_Init+0xe0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <MX_GPIO_Init+0xe4>)
 8001c80:	f000 fea4 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <MX_GPIO_Init+0xe8>)
 8001c9c:	f000 fd02 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <MX_GPIO_Init+0xe4>)
 8001cb8:	f000 fcf4 	bl	80026a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2028      	movs	r0, #40	@ 0x28
 8001cc2:	f000 fcb8 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc6:	2028      	movs	r0, #40	@ 0x28
 8001cc8:	f000 fcd1 	bl	800266e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <Error_Handler+0x8>

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f000 fc78 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <HAL_I2C_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12c      	bne.n	8001db8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d7a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <HAL_I2C_MspInit+0x8c>)
 8001d98:	f000 fc84 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ddc:	d10d      	bne.n	8001dfa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d116      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2036      	movs	r0, #54	@ 0x36
 8001e40:	f000 fbf9 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e44:	2036      	movs	r0, #54	@ 0x36
 8001e46:	f000 fc12 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e4a:	e036      	b.n	8001eba <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_TIM_Base_MspInit+0xc0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d116      	bne.n	8001e84 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e60:	f043 0320 	orr.w	r3, r3, #32
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2037      	movs	r0, #55	@ 0x37
 8001e78:	f000 fbdd 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e7c:	2037      	movs	r0, #55	@ 0x37
 8001e7e:	f000 fbf6 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 8001e82:	e01a      	b.n	8001eba <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xc4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d115      	bne.n	8001eba <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2019      	movs	r0, #25
 8001eb0:	f000 fbc1 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eb4:	2019      	movs	r0, #25
 8001eb6:	f000 fbda 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40001000 	.word	0x40001000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40001400 	.word	0x40001400
 8001ed0:	40014400 	.word	0x40014400

08001ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef4:	d11d      	bne.n	8001f32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_TIM_MspPostInit+0x68>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_TIM_MspPostInit+0x68>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <HAL_TIM_MspPostInit+0x68>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f12:	2301      	movs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <HAL_TIM_MspPostInit+0x6c>)
 8001f2e:	f000 fbb9 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_UART_MspInit+0x84>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12b      	bne.n	8001fbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a17      	ldr	r2, [pc, #92]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_UART_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <HAL_UART_MspInit+0x8c>)
 8001fba:	f000 fb73 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <StartTimers>:
extern TIM_HandleTypeDef htim10;
extern TIM_HandleTypeDef htim2;
extern float Ax,Ay,Az,Gx,Gy,Gz, Pitch;
extern uint16_t duty_cycle;
/* USER CODE BEGIN EV */
void StartTimers(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 8001fd8:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <StartTimers+0x24>)
 8001fda:	f002 fb91 	bl	8004700 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8001fde:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <StartTimers+0x28>)
 8001fe0:	f002 fb8e 	bl	8004700 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 8001fe4:	4806      	ldr	r0, [pc, #24]	@ (8002000 <StartTimers+0x2c>)
 8001fe6:	f002 fb8b 	bl	8004700 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001fea:	2100      	movs	r1, #0
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <StartTimers+0x30>)
 8001fee:	f002 fc75 	bl	80048dc <HAL_TIM_PWM_Start>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200002c8 	.word	0x200002c8
 8001ffc:	20000310 	.word	0x20000310
 8002000:	20000358 	.word	0x20000358
 8002004:	20000280 	.word	0x20000280

08002008 <StopTimers>:
void StopTimers(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim6);
 800200c:	4812      	ldr	r0, [pc, #72]	@ (8002058 <StopTimers+0x50>)
 800200e:	f002 fbe7 	bl	80047e0 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim7);
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <StopTimers+0x54>)
 8002014:	f002 fbe4 	bl	80047e0 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim10);
 8002018:	4811      	ldr	r0, [pc, #68]	@ (8002060 <StopTimers+0x58>)
 800201a:	f002 fbe1 	bl	80047e0 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800201e:	2100      	movs	r1, #0
 8002020:	4810      	ldr	r0, [pc, #64]	@ (8002064 <StopTimers+0x5c>)
 8002022:	f002 fd23 	bl	8004a6c <HAL_TIM_PWM_Stop>
    Pitch = 0.0f;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <StopTimers+0x60>)
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    Ax = 0.0f;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <StopTimers+0x64>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    Ay = 0.0f;
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <StopTimers+0x68>)
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    Az = 0.0f;
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <StopTimers+0x6c>)
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    Gy = 0.0f;
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <StopTimers+0x70>)
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    duty_cycle = 0;
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <StopTimers+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200002c8 	.word	0x200002c8
 800205c:	20000310 	.word	0x20000310
 8002060:	20000358 	.word	0x20000358
 8002064:	20000280 	.word	0x20000280
 8002068:	20000420 	.word	0x20000420
 800206c:	20000410 	.word	0x20000410
 8002070:	20000414 	.word	0x20000414
 8002074:	20000418 	.word	0x20000418
 8002078:	2000041c 	.word	0x2000041c
 800207c:	2000043c 	.word	0x2000043c

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <NMI_Handler+0x4>

08002088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <MemManage_Handler+0x4>

08002098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d6:	f000 f98f 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020e6:	f002 fd31 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000358 	.word	0x20000358

080020f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static int flag = 0;

		if (flag ==0){
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <EXTI15_10_IRQHandler+0x30>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <EXTI15_10_IRQHandler+0x18>
			StartTimers();
 8002100:	f7ff ff68 	bl	8001fd4 <StartTimers>
			flag = 1;
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <EXTI15_10_IRQHandler+0x30>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e004      	b.n	8002116 <EXTI15_10_IRQHandler+0x22>
		}else {
			StopTimers();
 800210c:	f7ff ff7c 	bl	8002008 <StopTimers>
			flag = 0;
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <EXTI15_10_IRQHandler+0x30>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002116:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800211a:	f000 fc71 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000440 	.word	0x20000440

08002128 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <TIM6_DAC_IRQHandler+0x10>)
 800212e:	f002 fd0d 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200002c8 	.word	0x200002c8

0800213c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM7_IRQHandler+0x10>)
 8002142:	f002 fd03 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000310 	.word	0x20000310

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216a:	f004 fbb7 	bl	80068dc <__errno>
 800216e:	4603      	mov	r3, r0
 8002170:	2216      	movs	r2, #22
 8002172:	601a      	str	r2, [r3, #0]
  return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffe7 	bl	8002160 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002192:	bf00      	nop
 8002194:	e7fd      	b.n	8002192 <_exit+0x12>

08002196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e00a      	b.n	80021be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a8:	f3af 8000 	nop.w
 80021ac:	4601      	mov	r1, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	60ba      	str	r2, [r7, #8]
 80021b4:	b2ca      	uxtb	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf0      	blt.n	80021a8 <_read+0x12>
  }

  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e009      	b.n	80021f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dbf1      	blt.n	80021e2 <_write+0x12>
  }
  return len;
 80021fe:	687b      	ldr	r3, [r7, #4]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_close>:

int _close(int file)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002230:	605a      	str	r2, [r3, #4]
  return 0;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_isatty>:

int _isatty(int file)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f004 fb1c 	bl	80068dc <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20020000 	.word	0x20020000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	20000444 	.word	0x20000444
 80022d8:	20000598 	.word	0x20000598

080022dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <SystemInit+0x20>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <SystemInit+0x20>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002338 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002304:	f7ff ffea 	bl	80022dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	@ (800233c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	@ (8002340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	@ (800234c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800232e:	f004 fadb 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7ff fa6b 	bl	800180c <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002344:	080094e8 	.word	0x080094e8
  ldr r2, =_sbss
 8002348:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800234c:	20000598 	.word	0x20000598

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>
	...

08002354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <HAL_Init+0x40>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_Init+0x40>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	@ (8002394 <HAL_Init+0x40>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 f94f 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fcb0 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f967 	bl	800268a <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 f92f 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	@ (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000028 	.word	0x20000028
 80023f0:	20000030 	.word	0x20000030
 80023f4:	2000002c 	.word	0x2000002c

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000030 	.word	0x20000030
 800241c:	20000448 	.word	0x20000448

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000448 	.word	0x20000448

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002452:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000030 	.word	0x20000030

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	@ (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	@ (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	@ (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	@ 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	@ 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e165      	b.n	800298c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8154 	bne.w	8002986 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d130      	bne.n	8002758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0201 	and.w	r2, r3, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b03      	cmp	r3, #3
 8002762:	d017      	beq.n	8002794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80ae 	beq.w	8002986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b5d      	ldr	r3, [pc, #372]	@ (80029a4 <HAL_GPIO_Init+0x300>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a5c      	ldr	r2, [pc, #368]	@ (80029a4 <HAL_GPIO_Init+0x300>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <HAL_GPIO_Init+0x300>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	@ (80029ac <HAL_GPIO_Init+0x308>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x21a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <HAL_GPIO_Init+0x30c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x216>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_GPIO_Init+0x310>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x212>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	@ (80029b8 <HAL_GPIO_Init+0x314>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	@ (80029bc <HAL_GPIO_Init+0x318>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x20a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4a      	ldr	r2, [pc, #296]	@ (80029c0 <HAL_GPIO_Init+0x31c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x206>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a49      	ldr	r2, [pc, #292]	@ (80029c4 <HAL_GPIO_Init+0x320>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x202>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a26      	ldr	r2, [pc, #152]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_GPIO_Init+0x324>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae96 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f806 	bl	8002a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40013c00 	.word	0x40013c00

08002a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e12b      	b.n	8002cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff f964 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aac:	f001 f8e2 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8002ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a81      	ldr	r2, [pc, #516]	@ (8002cbc <HAL_I2C_Init+0x274>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d807      	bhi.n	8002acc <HAL_I2C_Init+0x84>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a80      	ldr	r2, [pc, #512]	@ (8002cc0 <HAL_I2C_Init+0x278>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e006      	b.n	8002ada <HAL_I2C_Init+0x92>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a7d      	ldr	r2, [pc, #500]	@ (8002cc4 <HAL_I2C_Init+0x27c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	bf94      	ite	ls
 8002ad4:	2301      	movls	r3, #1
 8002ad6:	2300      	movhi	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0e7      	b.n	8002cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a78      	ldr	r2, [pc, #480]	@ (8002cc8 <HAL_I2C_Init+0x280>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a6a      	ldr	r2, [pc, #424]	@ (8002cbc <HAL_I2C_Init+0x274>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d802      	bhi.n	8002b1c <HAL_I2C_Init+0xd4>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	e009      	b.n	8002b30 <HAL_I2C_Init+0xe8>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a69      	ldr	r2, [pc, #420]	@ (8002ccc <HAL_I2C_Init+0x284>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	3301      	adds	r3, #1
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	495c      	ldr	r1, [pc, #368]	@ (8002cbc <HAL_I2C_Init+0x274>)
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	d819      	bhi.n	8002b84 <HAL_I2C_Init+0x13c>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e59      	subs	r1, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b64:	400b      	ands	r3, r1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_I2C_Init+0x138>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1e59      	subs	r1, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7e:	e051      	b.n	8002c24 <HAL_I2C_Init+0x1dc>
 8002b80:	2304      	movs	r3, #4
 8002b82:	e04f      	b.n	8002c24 <HAL_I2C_Init+0x1dc>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <HAL_I2C_Init+0x168>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e012      	b.n	8002bd6 <HAL_I2C_Init+0x18e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	0099      	lsls	r1, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Init+0x196>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e022      	b.n	8002c24 <HAL_I2C_Init+0x1dc>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10e      	bne.n	8002c04 <HAL_I2C_Init+0x1bc>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1e58      	subs	r0, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	440b      	add	r3, r1
 8002bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c02:	e00f      	b.n	8002c24 <HAL_I2C_Init+0x1dc>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6809      	ldr	r1, [r1, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6911      	ldr	r1, [r2, #16]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	000186a0 	.word	0x000186a0
 8002cc0:	001e847f 	.word	0x001e847f
 8002cc4:	003d08ff 	.word	0x003d08ff
 8002cc8:	431bde83 	.word	0x431bde83
 8002ccc:	10624dd3 	.word	0x10624dd3

08002cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7ff fb99 	bl	8002420 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 80d9 	bne.w	8002eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2319      	movs	r3, #25
 8002d04:	2201      	movs	r2, #1
 8002d06:	496d      	ldr	r1, [pc, #436]	@ (8002ebc <HAL_I2C_Mem_Write+0x1ec>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fc8b 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0cc      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Mem_Write+0x56>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0c5      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d007      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	@ 0x21
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	@ 0x40
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d8e:	88f8      	ldrh	r0, [r7, #6]
 8002d90:	893a      	ldrh	r2, [r7, #8]
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fac2 	bl	8003328 <I2C_RequestMemoryWrite>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d052      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e081      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fd50 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x180>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d017      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1aa      	bne.n	8002dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fd43 	bl	80038e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e016      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	00100002 	.word	0x00100002
 8002ec0:	ffff0000 	.word	0xffff0000

08002ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	@ 0x30
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7ff fa9f 	bl	8002420 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	f040 8214 	bne.w	800331a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2319      	movs	r3, #25
 8002ef8:	2201      	movs	r2, #1
 8002efa:	497b      	ldr	r1, [pc, #492]	@ (80030e8 <HAL_I2C_Mem_Read+0x224>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb91 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e207      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x56>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e200      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d007      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2222      	movs	r2, #34	@ 0x22
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80030ec <HAL_I2C_Mem_Read+0x228>)
 8002f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	88f8      	ldrh	r0, [r7, #6]
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa5e 	bl	8003454 <I2C_RequestMemoryRead>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1bc      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e190      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11b      	bne.n	8003012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e170      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	e150      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003068:	e144      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306e:	2b03      	cmp	r3, #3
 8003070:	f200 80f1 	bhi.w	8003256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	2b01      	cmp	r3, #1
 800307a:	d123      	bne.n	80030c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fc79 	bl	8003978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e145      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030c2:	e117      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d14e      	bne.n	800316a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d2:	2200      	movs	r2, #0
 80030d4:	4906      	ldr	r1, [pc, #24]	@ (80030f0 <HAL_I2C_Mem_Read+0x22c>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 faa4 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e11a      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
 80030e6:	bf00      	nop
 80030e8:	00100002 	.word	0x00100002
 80030ec:	ffff0000 	.word	0xffff0000
 80030f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003168:	e0c4      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	2200      	movs	r2, #0
 8003172:	496c      	ldr	r1, [pc, #432]	@ (8003324 <HAL_I2C_Mem_Read+0x460>)
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fa55 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cb      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	2200      	movs	r2, #0
 80031ce:	4955      	ldr	r1, [pc, #340]	@ (8003324 <HAL_I2C_Mem_Read+0x460>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fa27 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e09d      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003254:	e04e      	b.n	80032f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fb8c 	bl	8003978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e058      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d124      	bne.n	80032f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f aeb6 	bne.w	800306a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	@ 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010004 	.word	0x00010004

08003328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	817b      	strh	r3, [r7, #10]
 800333a:	460b      	mov	r3, r1
 800333c:	813b      	strh	r3, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2200      	movs	r2, #0
 800335a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f960 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003378:	d103      	bne.n	8003382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e05f      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	492d      	ldr	r1, [pc, #180]	@ (8003450 <I2C_RequestMemoryWrite+0x128>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f9bb 	bl	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e04c      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa46 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02b      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e021      	b.n	8003444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa20 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e005      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	00010002 	.word	0x00010002

08003454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	817b      	strh	r3, [r7, #10]
 8003466:	460b      	mov	r3, r1
 8003468:	813b      	strh	r3, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800347c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	2200      	movs	r2, #0
 8003496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8c2 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b4:	d103      	bne.n	80034be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0aa      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	4952      	ldr	r1, [pc, #328]	@ (8003620 <I2C_RequestMemoryRead+0x1cc>)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f91d 	bl	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e097      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f9a8 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e076      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e021      	b.n	8003580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b29b      	uxth	r3, r3
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354c:	6a39      	ldr	r1, [r7, #32]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f982 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e050      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003582:	6a39      	ldr	r1, [r7, #32]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f967 	bl	8003858 <I2C_WaitOnTXEFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	2b04      	cmp	r3, #4
 8003596:	d107      	bne.n	80035a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e035      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f82b 	bl	8003624 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e2:	d103      	bne.n	80035ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e013      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035f0:	897b      	ldrh	r3, [r7, #10]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	6a3a      	ldr	r2, [r7, #32]
 8003604:	4906      	ldr	r1, [pc, #24]	@ (8003620 <I2C_RequestMemoryRead+0x1cc>)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f886 	bl	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010002 	.word	0x00010002

08003624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003634:	e048      	b.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d044      	beq.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7fe feef 	bl	8002420 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d139      	bne.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10d      	bne.n	800367a <I2C_WaitOnFlagUntilTimeout+0x56>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	43da      	mvns	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	e00c      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x70>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	429a      	cmp	r2, r3
 8003698:	d116      	bne.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e023      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10d      	bne.n	80036ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	43da      	mvns	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	e00c      	b.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d093      	beq.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003726:	e071      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003736:	d123      	bne.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003746:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e067      	b.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d041      	beq.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fe fe4a 	bl	8002420 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d136      	bne.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e00b      	b.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e021      	b.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	0c1b      	lsrs	r3, r3, #16
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10c      	bne.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	43da      	mvns	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e00b      	b.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f af6d 	bne.w	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003864:	e034      	b.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8e3 	bl	8003a32 <I2C_IsAcknowledgeFailed>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e034      	b.n	80038e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d028      	beq.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe fdcf 	bl	8002420 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d11d      	bne.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d016      	beq.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e007      	b.n	80038e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b80      	cmp	r3, #128	@ 0x80
 80038dc:	d1c3      	bne.n	8003866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f4:	e034      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f89b 	bl	8003a32 <I2C_IsAcknowledgeFailed>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e034      	b.n	8003970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d028      	beq.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fd87 	bl	8002420 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11d      	bne.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d016      	beq.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d1c3      	bne.n	80038f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003984:	e049      	b.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d119      	bne.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0210 	mvn.w	r2, #16
 800399c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e030      	b.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fe fd2a 	bl	8002420 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11d      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d016      	beq.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e007      	b.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b40      	cmp	r3, #64	@ 0x40
 8003a26:	d1ae      	bne.n	8003986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a48:	d11b      	bne.n	8003a82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fe fc4e 	bl	8002420 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fe fc4a 	bl	8002420 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f855 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fbae 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	080090dc 	.word	0x080090dc
 8003c54:	20000028 	.word	0x20000028
 8003c58:	2000002c 	.word	0x2000002c

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b03      	ldr	r3, [pc, #12]	@ (8003c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000028 	.word	0x20000028

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	@ (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	080090ec 	.word	0x080090ec

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca0:	f7ff ffdc 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	@ (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	080090ec 	.word	0x080090ec

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b0ae      	sub	sp, #184	@ 0xb8
 8003cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cea:	4bcb      	ldr	r3, [pc, #812]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	f200 8206 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x440>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08004105 	.word	0x08004105
 8003d08:	08004105 	.word	0x08004105
 8003d0c:	08004105 	.word	0x08004105
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08004105 	.word	0x08004105
 8003d18:	08004105 	.word	0x08004105
 8003d1c:	08004105 	.word	0x08004105
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08004105 	.word	0x08004105
 8003d28:	08004105 	.word	0x08004105
 8003d2c:	08004105 	.word	0x08004105
 8003d30:	08003f35 	.word	0x08003f35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4bb9      	ldr	r3, [pc, #740]	@ (800401c <HAL_RCC_GetSysClockFreq+0x358>)
 8003d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d3a:	e1e7      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3c:	4bb8      	ldr	r3, [pc, #736]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d42:	e1e3      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4bb4      	ldr	r3, [pc, #720]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d50:	4bb1      	ldr	r3, [pc, #708]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d071      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4bae      	ldr	r3, [pc, #696]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	1a51      	subs	r1, r2, r1
 8003d9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb63 0301 	sbc.w	r3, r3, r1
 8003da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003db4:	4649      	mov	r1, r9
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	018a      	lsls	r2, r1, #6
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dc8:	4649      	mov	r1, r9
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ddc:	4649      	mov	r1, r9
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4641      	mov	r1, r8
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4622      	mov	r2, r4
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	462b      	mov	r3, r5
 8003df8:	460a      	mov	r2, r1
 8003dfa:	eb42 0303 	adc.w	r3, r2, r3
 8003dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	024b      	lsls	r3, r1, #9
 8003e10:	4621      	mov	r1, r4
 8003e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e16:	4621      	mov	r1, r4
 8003e18:	024a      	lsls	r2, r1, #9
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e30:	f7fc ff4a 	bl	8000cc8 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e3e:	e067      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b75      	ldr	r3, [pc, #468]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	1a51      	subs	r1, r2, r1
 8003e7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e80:	4629      	mov	r1, r5
 8003e82:	eb63 0301 	sbc.w	r3, r3, r1
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e94:	4649      	mov	r1, r9
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	018a      	lsls	r2, r1, #6
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	469b      	mov	fp, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	eb1a 0303 	adds.w	r3, sl, r3
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	462b      	mov	r3, r5
 8003ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ef8:	2200      	movs	r2, #0
 8003efa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003efc:	677a      	str	r2, [r7, #116]	@ 0x74
 8003efe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f02:	f7fc fee1 	bl	8000cc8 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f32:	e0eb      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b38      	ldr	r3, [pc, #224]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f40:	4b35      	ldr	r3, [pc, #212]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d06b      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4b32      	ldr	r3, [pc, #200]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	2200      	movs	r2, #0
 8003f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f60:	2300      	movs	r3, #0
 8003f62:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	f04f 0000 	mov.w	r0, #0
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7a:	0150      	lsls	r0, r2, #5
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4621      	mov	r1, r4
 8003f82:	1a51      	subs	r1, r2, r1
 8003f84:	61b9      	str	r1, [r7, #24]
 8003f86:	4629      	mov	r1, r5
 8003f88:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	018b      	lsls	r3, r1, #6
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	018a      	lsls	r2, r1, #6
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ebb2 0801 	subs.w	r8, r2, r1
 8003fae:	4659      	mov	r1, fp
 8003fb0:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc8:	4690      	mov	r8, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	eb18 0303 	adds.w	r3, r8, r3
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	eb49 0303 	adc.w	r3, r9, r3
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fe8:	4629      	mov	r1, r5
 8003fea:	024b      	lsls	r3, r1, #9
 8003fec:	4621      	mov	r1, r4
 8003fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	024a      	lsls	r2, r1, #9
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffe:	2200      	movs	r2, #0
 8004000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004002:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004008:	f7fc fe5e 	bl	8000cc8 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004016:	e065      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x420>
 8004018:	40023800 	.word	0x40023800
 800401c:	00f42400 	.word	0x00f42400
 8004020:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004024:	4b3d      	ldr	r3, [pc, #244]	@ (800411c <HAL_RCC_GetSysClockFreq+0x458>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	2200      	movs	r2, #0
 800402c:	4618      	mov	r0, r3
 800402e:	4611      	mov	r1, r2
 8004030:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004034:	653b      	str	r3, [r7, #80]	@ 0x50
 8004036:	2300      	movs	r3, #0
 8004038:	657b      	str	r3, [r7, #84]	@ 0x54
 800403a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800403e:	4642      	mov	r2, r8
 8004040:	464b      	mov	r3, r9
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4641      	mov	r1, r8
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	4649      	mov	r1, r9
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	1a54      	subs	r4, r2, r1
 8004082:	4659      	mov	r1, fp
 8004084:	eb63 0501 	sbc.w	r5, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	00eb      	lsls	r3, r5, #3
 8004092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004096:	00e2      	lsls	r2, r4, #3
 8004098:	4614      	mov	r4, r2
 800409a:	461d      	mov	r5, r3
 800409c:	4643      	mov	r3, r8
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	464b      	mov	r3, r9
 80040a4:	eb45 0303 	adc.w	r3, r5, r3
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040b6:	4629      	mov	r1, r5
 80040b8:	028b      	lsls	r3, r1, #10
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c0:	4621      	mov	r1, r4
 80040c2:	028a      	lsls	r2, r1, #10
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040cc:	2200      	movs	r2, #0
 80040ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040d6:	f7fc fdf7 	bl	8000cc8 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4613      	mov	r3, r2
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040e4:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <HAL_RCC_GetSysClockFreq+0x458>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0f1b      	lsrs	r3, r3, #28
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80040f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004102:	e003      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800410a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004110:	4618      	mov	r0, r3
 8004112:	37b8      	adds	r7, #184	@ 0xb8
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400

08004124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e28d      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8083 	beq.w	800424a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004144:	4b94      	ldr	r3, [pc, #592]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b04      	cmp	r3, #4
 800414e:	d019      	beq.n	8004184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004150:	4b91      	ldr	r3, [pc, #580]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004158:	2b08      	cmp	r3, #8
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800415c:	4b8e      	ldr	r3, [pc, #568]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004168:	d00c      	beq.n	8004184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4b8b      	ldr	r3, [pc, #556]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d112      	bne.n	800419c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b88      	ldr	r3, [pc, #544]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004182:	d10b      	bne.n	800419c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	4b84      	ldr	r3, [pc, #528]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05b      	beq.n	8004248 <HAL_RCC_OscConfig+0x124>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d157      	bne.n	8004248 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e25a      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x90>
 80041a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xcc>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0xb4>
 80041be:	4b76      	ldr	r3, [pc, #472]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a75      	ldr	r2, [pc, #468]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b73      	ldr	r3, [pc, #460]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a72      	ldr	r2, [pc, #456]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xcc>
 80041d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe f912 	bl	8002420 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe f90e 	bl	8002420 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e21f      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xdc>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe f8fe 	bl	8002420 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe f8fa 	bl	8002420 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e20b      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b57      	ldr	r3, [pc, #348]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x104>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06f      	beq.n	8004336 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004256:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004262:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d105      	bne.n	800427a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426e:	4b4a      	ldr	r3, [pc, #296]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b44      	ldr	r3, [pc, #272]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b41      	ldr	r3, [pc, #260]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x186>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1d3      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4937      	ldr	r1, [pc, #220]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e03a      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCC_OscConfig+0x278>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fe f8a7 	bl	8002420 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fe f8a3 	bl	8002420 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1b4      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4925      	ldr	r1, [pc, #148]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_RCC_OscConfig+0x278>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe f886 	bl	8002420 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004318:	f7fe f882 	bl	8002420 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e193      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d036      	beq.n	80043b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fe f866 	bl	8002420 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004358:	f7fe f862 	bl	8002420 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e173      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_RCC_OscConfig+0x274>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x234>
 8004376:	e01b      	b.n	80043b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fe f84f 	bl	8002420 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	e00e      	b.n	80043a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004386:	f7fe f84b 	bl	8002420 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d907      	bls.n	80043a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e15c      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
 8004398:	40023800 	.word	0x40023800
 800439c:	42470000 	.word	0x42470000
 80043a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	4b8a      	ldr	r3, [pc, #552]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8097 	beq.w	80044ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b83      	ldr	r3, [pc, #524]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	4b7f      	ldr	r3, [pc, #508]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	4a7e      	ldr	r2, [pc, #504]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043de:	4b7c      	ldr	r3, [pc, #496]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b79      	ldr	r3, [pc, #484]	@ (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b76      	ldr	r3, [pc, #472]	@ (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	@ (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fe f80b 	bl	8002420 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fe f807 	bl	8002420 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e118      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b6c      	ldr	r3, [pc, #432]	@ (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x31e>
 8004434:	4b66      	ldr	r3, [pc, #408]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a65      	ldr	r2, [pc, #404]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x358>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x340>
 800444a:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b5e      	ldr	r3, [pc, #376]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a5d      	ldr	r2, [pc, #372]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0x358>
 8004464:	4b5a      	ldr	r3, [pc, #360]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	4a59      	ldr	r2, [pc, #356]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004470:	4b57      	ldr	r3, [pc, #348]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a56      	ldr	r2, [pc, #344]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd ffcc 	bl	8002420 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fd ffc8 	bl	8002420 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0d7      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	4b4b      	ldr	r3, [pc, #300]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCC_OscConfig+0x368>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd ffb6 	bl	8002420 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fd ffb2 	bl	8002420 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0c1      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	4b40      	ldr	r3, [pc, #256]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ee      	bne.n	80044b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	4a3a      	ldr	r2, [pc, #232]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80ad 	beq.w	8004650 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d060      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d145      	bne.n	8004596 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b33      	ldr	r3, [pc, #204]	@ (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd ff86 	bl	8002420 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004518:	f7fd ff82 	bl	8002420 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e093      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b29      	ldr	r3, [pc, #164]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	071b      	lsls	r3, r3, #28
 8004562:	491b      	ldr	r1, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fd ff57 	bl	8002420 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004576:	f7fd ff53 	bl	8002420 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e064      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x452>
 8004594:	e05c      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd ff40 	bl	8002420 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd ff3c 	bl	8002420 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04d      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
 80045c2:	e045      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e040      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40007000 	.word	0x40007000
 80045d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045dc:	4b1f      	ldr	r3, [pc, #124]	@ (800465c <HAL_RCC_OscConfig+0x538>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d030      	beq.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d129      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	429a      	cmp	r2, r3
 8004604:	d122      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004614:	4293      	cmp	r3, r2
 8004616:	d119      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	3b01      	subs	r3, #1
 8004626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d10f      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd fbc0 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fc2e 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d001      	beq.n	8004718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e04e      	b.n	80047b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	@ (80047c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004742:	d01d      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_TIM_Base_Start_IT+0xdc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d111      	bne.n	80047a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d010      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	e007      	b.n	80047b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40001800 	.word	0x40001800

080047e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <HAL_TIM_Base_Stop_IT+0x48>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_TIM_Base_Stop_IT+0x48>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e041      	b.n	80048d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fd fab1 	bl	8001dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f000 fb3f 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x24>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e022      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b04      	cmp	r3, #4
 8004904:	d109      	bne.n	800491a <HAL_TIM_PWM_Start+0x3e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e015      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d109      	bne.n	8004934 <HAL_TIM_PWM_Start+0x58>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07c      	b.n	8004a48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0x82>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800495c:	e013      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0x92>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496c:	e00b      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497c:	e003      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd12 	bl	80053b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <HAL_TIM_PWM_Start+0x174>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_PWM_Start+0xcc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <HAL_TIM_PWM_Start+0x178>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_PWM_Start+0xd0>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_TIM_PWM_Start+0xd2>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <HAL_TIM_PWM_Start+0x174>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d01d      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1f      	ldr	r2, [pc, #124]	@ (8004a58 <HAL_TIM_PWM_Start+0x17c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a5c <HAL_TIM_PWM_Start+0x180>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <HAL_TIM_PWM_Start+0x184>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_TIM_PWM_Start+0x178>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIM_PWM_Start+0x188>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_TIM_PWM_Start+0x18c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d111      	bne.n	8004a36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d010      	beq.n	8004a46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	e007      	b.n	8004a46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40001800 	.word	0x40001800

08004a6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fc9a 	bl	80053b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2e      	ldr	r2, [pc, #184]	@ (8004b44 <HAL_TIM_PWM_Stop+0xd8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_PWM_Stop+0x2c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <HAL_TIM_PWM_Stop+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_PWM_Stop+0x30>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_PWM_Stop+0x32>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d017      	beq.n	8004ad2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_TIM_PWM_Stop+0x66>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_TIM_PWM_Stop+0x66>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <HAL_TIM_PWM_Stop+0x96>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_PWM_Stop+0x96>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_PWM_Stop+0xa6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b10:	e013      	b.n	8004b3a <HAL_TIM_PWM_Stop+0xce>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_PWM_Stop+0xb6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b20:	e00b      	b.n	8004b3a <HAL_TIM_PWM_Stop+0xce>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Stop+0xc6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b30:	e003      	b.n	8004b3a <HAL_TIM_PWM_Stop+0xce>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d020      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0202 	mvn.w	r2, #2
 8004b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f994 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f986 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f997 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d020      	beq.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01b      	beq.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0204 	mvn.w	r2, #4
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f96e 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f960 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f971 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d020      	beq.n	8004c48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0208 	mvn.w	r2, #8
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f948 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f93a 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f94b 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d020      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0210 	mvn.w	r2, #16
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f922 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f914 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f925 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fc1c 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fc1a 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8f6 	bl	8004eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0220 	mvn.w	r2, #32
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fbec 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0ae      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	f200 809f 	bhi.w	8004e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004e99 	.word	0x08004e99
 8004d68:	08004e99 	.word	0x08004e99
 8004d6c:	08004e99 	.word	0x08004e99
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004e99 	.word	0x08004e99
 8004d78:	08004e99 	.word	0x08004e99
 8004d7c:	08004e99 	.word	0x08004e99
 8004d80:	08004e17 	.word	0x08004e17
 8004d84:	08004e99 	.word	0x08004e99
 8004d88:	08004e99 	.word	0x08004e99
 8004d8c:	08004e99 	.word	0x08004e99
 8004d90:	08004e57 	.word	0x08004e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f95c 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e064      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f9ac 	bl	8005138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e043      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fa01 	bl	8005224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e023      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fa55 	bl	800530c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a46      	ldr	r2, [pc, #280]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a43      	ldr	r2, [pc, #268]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a40      	ldr	r2, [pc, #256]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a35      	ldr	r2, [pc, #212]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d027      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a32      	ldr	r2, [pc, #200]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d023      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a30      	ldr	r2, [pc, #192]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <TIM_Base_SetConfig+0x140>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <TIM_Base_SetConfig+0x144>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	@ (8005048 <TIM_Base_SetConfig+0x148>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <TIM_Base_SetConfig+0x14c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005050 <TIM_Base_SetConfig+0x150>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <TIM_Base_SetConfig+0x154>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]
  }
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a20      	ldr	r2, [pc, #128]	@ (8005130 <TIM_OC1_SetConfig+0xd8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x64>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <TIM_OC1_SetConfig+0xd8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC1_SetConfig+0x8e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a14      	ldr	r2, [pc, #80]	@ (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d111      	bne.n	800510a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40010000 	.word	0x40010000
 8005134:	40010400 	.word	0x40010400

08005138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f023 0210 	bic.w	r2, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0320 	bic.w	r3, r3, #32
 8005182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a22      	ldr	r2, [pc, #136]	@ (800521c <TIM_OC2_SetConfig+0xe4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC2_SetConfig+0x68>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a21      	ldr	r2, [pc, #132]	@ (8005220 <TIM_OC2_SetConfig+0xe8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10d      	bne.n	80051bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a17      	ldr	r2, [pc, #92]	@ (800521c <TIM_OC2_SetConfig+0xe4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC2_SetConfig+0x94>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a16      	ldr	r2, [pc, #88]	@ (8005220 <TIM_OC2_SetConfig+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d113      	bne.n	80051f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40010400 	.word	0x40010400

08005224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800526c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a21      	ldr	r2, [pc, #132]	@ (8005304 <TIM_OC3_SetConfig+0xe0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_OC3_SetConfig+0x66>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a20      	ldr	r2, [pc, #128]	@ (8005308 <TIM_OC3_SetConfig+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10d      	bne.n	80052a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <TIM_OC3_SetConfig+0xe0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0x92>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a15      	ldr	r2, [pc, #84]	@ (8005308 <TIM_OC3_SetConfig+0xe4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d113      	bne.n	80052de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40010000 	.word	0x40010000
 8005308:	40010400 	.word	0x40010400

0800530c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a12      	ldr	r2, [pc, #72]	@ (80053b0 <TIM_OC4_SetConfig+0xa4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC4_SetConfig+0x68>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <TIM_OC4_SetConfig+0xa8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d109      	bne.n	8005388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40010400 	.word	0x40010400

080053b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e05a      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005468:	d01d      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1a      	ldr	r2, [pc, #104]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a17      	ldr	r2, [pc, #92]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40010400 	.word	0x40010400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40001800 	.word	0x40001800

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e042      	b.n	80055bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fcfa 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	@ 0x24
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f973 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800557c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800559c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	@ 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d175      	bne.n	80056d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Transmit+0x2c>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e06e      	b.n	80056d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2221      	movs	r2, #33	@ 0x21
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fc ff0d 	bl	8002420 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561c:	d108      	bne.n	8005630 <HAL_UART_Transmit+0x6c>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e003      	b.n	8005638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005638:	e02e      	b.n	8005698 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2180      	movs	r1, #128	@ 0x80
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f848 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e03a      	b.n	80056d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	3302      	adds	r3, #2
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e007      	b.n	800568a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1cb      	bne.n	800563a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2140      	movs	r1, #64	@ 0x40
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f814 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ea:	e03b      	b.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d037      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fc fe94 	bl	8002420 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <UART_WaitOnFlagUntilTimeout+0x30>
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e03a      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d023      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b80      	cmp	r3, #128	@ 0x80
 8005720:	d020      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	d01d      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b08      	cmp	r3, #8
 8005734:	d116      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f81d 	bl	800578c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2208      	movs	r2, #8
 8005756:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e00f      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4013      	ands	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	429a      	cmp	r2, r3
 8005780:	d0b4      	beq.n	80056ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b095      	sub	sp, #84	@ 0x54
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e5      	bne.n	80057c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	2b01      	cmp	r3, #1
 8005802:	d119      	bne.n	8005838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60bb      	str	r3, [r7, #8]
   return(result);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	647b      	str	r3, [r7, #68]	@ 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005824:	61ba      	str	r2, [r7, #24]
 8005826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6979      	ldr	r1, [r7, #20]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005846:	bf00      	nop
 8005848:	3754      	adds	r7, #84	@ 0x54
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005858:	b0c0      	sub	sp, #256	@ 0x100
 800585a:	af00      	add	r7, sp, #0
 800585c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	ea40 0301 	orr.w	r3, r0, r1
 800587c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058ac:	f021 010c 	bic.w	r1, r1, #12
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ba:	430b      	orrs	r3, r1
 80058bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	6999      	ldr	r1, [r3, #24]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	ea40 0301 	orr.w	r3, r0, r1
 80058da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005b20 <UART_SetConfig+0x2cc>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d005      	beq.n	80058f4 <UART_SetConfig+0xa0>
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <UART_SetConfig+0x2d0>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d104      	bne.n	80058fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fe f9d2 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 80058f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058fc:	e003      	b.n	8005906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fe f9b9 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005910:	f040 810c 	bne.w	8005b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800591e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	1891      	adds	r1, r2, r2
 800592c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800592e:	415b      	adcs	r3, r3
 8005930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005936:	4621      	mov	r1, r4
 8005938:	eb12 0801 	adds.w	r8, r2, r1
 800593c:	4629      	mov	r1, r5
 800593e:	eb43 0901 	adc.w	r9, r3, r1
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005956:	4690      	mov	r8, r2
 8005958:	4699      	mov	r9, r3
 800595a:	4623      	mov	r3, r4
 800595c:	eb18 0303 	adds.w	r3, r8, r3
 8005960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005964:	462b      	mov	r3, r5
 8005966:	eb49 0303 	adc.w	r3, r9, r3
 800596a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800597a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800597e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005982:	460b      	mov	r3, r1
 8005984:	18db      	adds	r3, r3, r3
 8005986:	653b      	str	r3, [r7, #80]	@ 0x50
 8005988:	4613      	mov	r3, r2
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005998:	f7fb f996 	bl	8000cc8 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b61      	ldr	r3, [pc, #388]	@ (8005b28 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011c      	lsls	r4, r3, #4
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059c4:	415b      	adcs	r3, r3
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059cc:	4641      	mov	r1, r8
 80059ce:	eb12 0a01 	adds.w	sl, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0b01 	adc.w	fp, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ec:	4692      	mov	sl, r2
 80059ee:	469b      	mov	fp, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	eb1a 0303 	adds.w	r3, sl, r3
 80059f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a2e:	f7fb f94b 	bl	8000cc8 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	@ 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a4e:	4b36      	ldr	r3, [pc, #216]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 2302 	umull	r2, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a5c:	441c      	add	r4, r3
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ada:	4613      	mov	r3, r2
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aea:	f7fb f8ed 	bl	8000cc8 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	@ 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	3332      	adds	r3, #50	@ 0x32
 8005b06:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 0207 	and.w	r2, r3, #7
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4422      	add	r2, r4
 8005b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b1c:	e106      	b.n	8005d2c <UART_SetConfig+0x4d8>
 8005b1e:	bf00      	nop
 8005b20:	40011000 	.word	0x40011000
 8005b24:	40011400 	.word	0x40011400
 8005b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	6239      	str	r1, [r7, #32]
 8005b46:	415b      	adcs	r3, r3
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	1854      	adds	r4, r2, r1
 8005b52:	4649      	mov	r1, r9
 8005b54:	eb43 0501 	adc.w	r5, r3, r1
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b74:	464b      	mov	r3, r9
 8005b76:	eb45 0303 	adc.w	r3, r5, r3
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	008a      	lsls	r2, r1, #2
 8005ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bac:	f7fb f88c 	bl	8000cc8 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b60      	ldr	r3, [pc, #384]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	61b9      	str	r1, [r7, #24]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6139      	str	r1, [r7, #16]
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c14:	464b      	mov	r3, r9
 8005c16:	460a      	mov	r2, r1
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c38:	4649      	mov	r1, r9
 8005c3a:	008b      	lsls	r3, r1, #2
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c42:	4641      	mov	r1, r8
 8005c44:	008a      	lsls	r2, r1, #2
 8005c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c4a:	f7fb f83d 	bl	8000cc8 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	4b38      	ldr	r3, [pc, #224]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c56:	fba3 2301 	umull	r2, r3, r3, r1
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2264      	movs	r2, #100	@ 0x64
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	1acb      	subs	r3, r1, r3
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	3332      	adds	r3, #50	@ 0x32
 8005c68:	4a33      	ldr	r2, [pc, #204]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c74:	441c      	add	r4, r3
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c94:	4641      	mov	r1, r8
 8005c96:	1851      	adds	r1, r2, r1
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	414b      	adcs	r3, r1
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cac:	4659      	mov	r1, fp
 8005cae:	00cb      	lsls	r3, r1, #3
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	00ca      	lsls	r2, r1, #3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	460a      	mov	r2, r1
 8005cca:	eb42 0303 	adc.w	r3, r2, r3
 8005cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ce8:	4649      	mov	r1, r9
 8005cea:	008b      	lsls	r3, r1, #2
 8005cec:	4641      	mov	r1, r8
 8005cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	008a      	lsls	r2, r1, #2
 8005cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cfa:	f7fa ffe5 	bl	8000cc8 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d04:	fba3 1302 	umull	r1, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	2164      	movs	r1, #100	@ 0x64
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	3332      	adds	r3, #50	@ 0x32
 8005d16:	4a08      	ldr	r2, [pc, #32]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4422      	add	r2, r4
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d32:	46bd      	mov	sp, r7
 8005d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d38:	51eb851f 	.word	0x51eb851f

08005d3c <__cvt>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	ec57 6b10 	vmov	r6, r7, d0
 8005d44:	2f00      	cmp	r7, #0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4619      	mov	r1, r3
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	bfbb      	ittet	lt
 8005d4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d52:	461f      	movlt	r7, r3
 8005d54:	2300      	movge	r3, #0
 8005d56:	232d      	movlt	r3, #45	@ 0x2d
 8005d58:	700b      	strb	r3, [r1, #0]
 8005d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d60:	4691      	mov	r9, r2
 8005d62:	f023 0820 	bic.w	r8, r3, #32
 8005d66:	bfbc      	itt	lt
 8005d68:	4632      	movlt	r2, r6
 8005d6a:	4616      	movlt	r6, r2
 8005d6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d70:	d005      	beq.n	8005d7e <__cvt+0x42>
 8005d72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d76:	d100      	bne.n	8005d7a <__cvt+0x3e>
 8005d78:	3401      	adds	r4, #1
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	e000      	b.n	8005d80 <__cvt+0x44>
 8005d7e:	2103      	movs	r1, #3
 8005d80:	ab03      	add	r3, sp, #12
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	ab02      	add	r3, sp, #8
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	ec47 6b10 	vmov	d0, r6, r7
 8005d8c:	4653      	mov	r3, sl
 8005d8e:	4622      	mov	r2, r4
 8005d90:	f000 fe5a 	bl	8006a48 <_dtoa_r>
 8005d94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d98:	4605      	mov	r5, r0
 8005d9a:	d119      	bne.n	8005dd0 <__cvt+0x94>
 8005d9c:	f019 0f01 	tst.w	r9, #1
 8005da0:	d00e      	beq.n	8005dc0 <__cvt+0x84>
 8005da2:	eb00 0904 	add.w	r9, r0, r4
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa feab 	bl	8000b08 <__aeabi_dcmpeq>
 8005db2:	b108      	cbz	r0, 8005db8 <__cvt+0x7c>
 8005db4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db8:	2230      	movs	r2, #48	@ 0x30
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	454b      	cmp	r3, r9
 8005dbe:	d31e      	bcc.n	8005dfe <__cvt+0xc2>
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dc4:	1b5b      	subs	r3, r3, r5
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	b004      	add	sp, #16
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dd4:	eb00 0904 	add.w	r9, r0, r4
 8005dd8:	d1e5      	bne.n	8005da6 <__cvt+0x6a>
 8005dda:	7803      	ldrb	r3, [r0, #0]
 8005ddc:	2b30      	cmp	r3, #48	@ 0x30
 8005dde:	d10a      	bne.n	8005df6 <__cvt+0xba>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8005dec:	b918      	cbnz	r0, 8005df6 <__cvt+0xba>
 8005dee:	f1c4 0401 	rsb	r4, r4, #1
 8005df2:	f8ca 4000 	str.w	r4, [sl]
 8005df6:	f8da 3000 	ldr.w	r3, [sl]
 8005dfa:	4499      	add	r9, r3
 8005dfc:	e7d3      	b.n	8005da6 <__cvt+0x6a>
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	9103      	str	r1, [sp, #12]
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e7d9      	b.n	8005dba <__cvt+0x7e>

08005e06 <__exponent>:
 8005e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bfba      	itte	lt
 8005e0c:	4249      	neglt	r1, r1
 8005e0e:	232d      	movlt	r3, #45	@ 0x2d
 8005e10:	232b      	movge	r3, #43	@ 0x2b
 8005e12:	2909      	cmp	r1, #9
 8005e14:	7002      	strb	r2, [r0, #0]
 8005e16:	7043      	strb	r3, [r0, #1]
 8005e18:	dd29      	ble.n	8005e6e <__exponent+0x68>
 8005e1a:	f10d 0307 	add.w	r3, sp, #7
 8005e1e:	461d      	mov	r5, r3
 8005e20:	270a      	movs	r7, #10
 8005e22:	461a      	mov	r2, r3
 8005e24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e28:	fb07 1416 	mls	r4, r7, r6, r1
 8005e2c:	3430      	adds	r4, #48	@ 0x30
 8005e2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e32:	460c      	mov	r4, r1
 8005e34:	2c63      	cmp	r4, #99	@ 0x63
 8005e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	dcf1      	bgt.n	8005e22 <__exponent+0x1c>
 8005e3e:	3130      	adds	r1, #48	@ 0x30
 8005e40:	1e94      	subs	r4, r2, #2
 8005e42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e46:	1c41      	adds	r1, r0, #1
 8005e48:	4623      	mov	r3, r4
 8005e4a:	42ab      	cmp	r3, r5
 8005e4c:	d30a      	bcc.n	8005e64 <__exponent+0x5e>
 8005e4e:	f10d 0309 	add.w	r3, sp, #9
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ac      	cmp	r4, r5
 8005e56:	bf88      	it	hi
 8005e58:	2300      	movhi	r3, #0
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	4403      	add	r3, r0
 8005e5e:	1a18      	subs	r0, r3, r0
 8005e60:	b003      	add	sp, #12
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e6c:	e7ed      	b.n	8005e4a <__exponent+0x44>
 8005e6e:	2330      	movs	r3, #48	@ 0x30
 8005e70:	3130      	adds	r1, #48	@ 0x30
 8005e72:	7083      	strb	r3, [r0, #2]
 8005e74:	70c1      	strb	r1, [r0, #3]
 8005e76:	1d03      	adds	r3, r0, #4
 8005e78:	e7f1      	b.n	8005e5e <__exponent+0x58>
	...

08005e7c <_printf_float>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	b08d      	sub	sp, #52	@ 0x34
 8005e82:	460c      	mov	r4, r1
 8005e84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e88:	4616      	mov	r6, r2
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	f000 fcdb 	bl	8006848 <_localeconv_r>
 8005e92:	6803      	ldr	r3, [r0, #0]
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa fa0a 	bl	80002b0 <strlen>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	9005      	str	r0, [sp, #20]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	f103 0208 	add.w	r2, r3, #8
 8005eb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005eb8:	f8c8 2000 	str.w	r2, [r8]
 8005ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8006144 <_printf_float+0x2c8>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	f7fa fe48 	bl	8000b6c <__aeabi_dcmpun>
 8005edc:	bb70      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee2:	4b98      	ldr	r3, [pc, #608]	@ (8006144 <_printf_float+0x2c8>)
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	f7fa fe22 	bl	8000b30 <__aeabi_dcmple>
 8005eec:	bb30      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa fe11 	bl	8000b1c <__aeabi_dcmplt>
 8005efa:	b110      	cbz	r0, 8005f02 <_printf_float+0x86>
 8005efc:	232d      	movs	r3, #45	@ 0x2d
 8005efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f02:	4a91      	ldr	r2, [pc, #580]	@ (8006148 <_printf_float+0x2cc>)
 8005f04:	4b91      	ldr	r3, [pc, #580]	@ (800614c <_printf_float+0x2d0>)
 8005f06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f0a:	bf94      	ite	ls
 8005f0c:	4690      	movls	r8, r2
 8005f0e:	4698      	movhi	r8, r3
 8005f10:	2303      	movs	r3, #3
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	f02b 0304 	bic.w	r3, fp, #4
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	f04f 0900 	mov.w	r9, #0
 8005f1e:	9700      	str	r7, [sp, #0]
 8005f20:	4633      	mov	r3, r6
 8005f22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f9d2 	bl	80062d0 <_printf_common>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f040 808d 	bne.w	800604c <_printf_float+0x1d0>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	b00d      	add	sp, #52	@ 0x34
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fe12 	bl	8000b6c <__aeabi_dcmpun>
 8005f48:	b140      	cbz	r0, 8005f5c <_printf_float+0xe0>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	232d      	movlt	r3, #45	@ 0x2d
 8005f52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f56:	4a7e      	ldr	r2, [pc, #504]	@ (8006150 <_printf_float+0x2d4>)
 8005f58:	4b7e      	ldr	r3, [pc, #504]	@ (8006154 <_printf_float+0x2d8>)
 8005f5a:	e7d4      	b.n	8005f06 <_printf_float+0x8a>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f62:	9206      	str	r2, [sp, #24]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	d13b      	bne.n	8005fe0 <_printf_float+0x164>
 8005f68:	2306      	movs	r3, #6
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f70:	2300      	movs	r3, #0
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	ec49 8b10 	vmov	d0, r8, r9
 8005f86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff fed6 	bl	8005d3c <__cvt>
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f94:	2b47      	cmp	r3, #71	@ 0x47
 8005f96:	4680      	mov	r8, r0
 8005f98:	d129      	bne.n	8005fee <_printf_float+0x172>
 8005f9a:	1cc8      	adds	r0, r1, #3
 8005f9c:	db02      	blt.n	8005fa4 <_printf_float+0x128>
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	dd41      	ble.n	8006028 <_printf_float+0x1ac>
 8005fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fac:	3901      	subs	r1, #1
 8005fae:	4652      	mov	r2, sl
 8005fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fb6:	f7ff ff26 	bl	8005e06 <__exponent>
 8005fba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fbc:	1813      	adds	r3, r2, r0
 8005fbe:	2a01      	cmp	r2, #1
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	dc02      	bgt.n	8005fcc <_printf_float+0x150>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	07d2      	lsls	r2, r2, #31
 8005fca:	d501      	bpl.n	8005fd0 <_printf_float+0x154>
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0a2      	beq.n	8005f1e <_printf_float+0xa2>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	e79e      	b.n	8005f1e <_printf_float+0xa2>
 8005fe0:	9a06      	ldr	r2, [sp, #24]
 8005fe2:	2a47      	cmp	r2, #71	@ 0x47
 8005fe4:	d1c2      	bne.n	8005f6c <_printf_float+0xf0>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1c0      	bne.n	8005f6c <_printf_float+0xf0>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7bd      	b.n	8005f6a <_printf_float+0xee>
 8005fee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff2:	d9db      	bls.n	8005fac <_printf_float+0x130>
 8005ff4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ff8:	d118      	bne.n	800602c <_printf_float+0x1b0>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	dd0b      	ble.n	8006018 <_printf_float+0x19c>
 8006000:	6121      	str	r1, [r4, #16]
 8006002:	b913      	cbnz	r3, 800600a <_printf_float+0x18e>
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	07d0      	lsls	r0, r2, #31
 8006008:	d502      	bpl.n	8006010 <_printf_float+0x194>
 800600a:	3301      	adds	r3, #1
 800600c:	440b      	add	r3, r1
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	e7db      	b.n	8005fd0 <_printf_float+0x154>
 8006018:	b913      	cbnz	r3, 8006020 <_printf_float+0x1a4>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	07d2      	lsls	r2, r2, #31
 800601e:	d501      	bpl.n	8006024 <_printf_float+0x1a8>
 8006020:	3302      	adds	r3, #2
 8006022:	e7f4      	b.n	800600e <_printf_float+0x192>
 8006024:	2301      	movs	r3, #1
 8006026:	e7f2      	b.n	800600e <_printf_float+0x192>
 8006028:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	4299      	cmp	r1, r3
 8006030:	db05      	blt.n	800603e <_printf_float+0x1c2>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6121      	str	r1, [r4, #16]
 8006036:	07d8      	lsls	r0, r3, #31
 8006038:	d5ea      	bpl.n	8006010 <_printf_float+0x194>
 800603a:	1c4b      	adds	r3, r1, #1
 800603c:	e7e7      	b.n	800600e <_printf_float+0x192>
 800603e:	2900      	cmp	r1, #0
 8006040:	bfd4      	ite	le
 8006042:	f1c1 0202 	rsble	r2, r1, #2
 8006046:	2201      	movgt	r2, #1
 8006048:	4413      	add	r3, r2
 800604a:	e7e0      	b.n	800600e <_printf_float+0x192>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	055a      	lsls	r2, r3, #21
 8006050:	d407      	bmi.n	8006062 <_printf_float+0x1e6>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	4642      	mov	r2, r8
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d12b      	bne.n	80060b8 <_printf_float+0x23c>
 8006060:	e767      	b.n	8005f32 <_printf_float+0xb6>
 8006062:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006066:	f240 80dd 	bls.w	8006224 <_printf_float+0x3a8>
 800606a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	f7fa fd49 	bl	8000b08 <__aeabi_dcmpeq>
 8006076:	2800      	cmp	r0, #0
 8006078:	d033      	beq.n	80060e2 <_printf_float+0x266>
 800607a:	4a37      	ldr	r2, [pc, #220]	@ (8006158 <_printf_float+0x2dc>)
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af54 	beq.w	8005f32 <_printf_float+0xb6>
 800608a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800608e:	4543      	cmp	r3, r8
 8006090:	db02      	blt.n	8006098 <_printf_float+0x21c>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d8      	lsls	r0, r3, #31
 8006096:	d50f      	bpl.n	80060b8 <_printf_float+0x23c>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af45 	beq.w	8005f32 <_printf_float+0xb6>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80060b0:	f104 0a1a 	add.w	sl, r4, #26
 80060b4:	45c8      	cmp	r8, r9
 80060b6:	dc09      	bgt.n	80060cc <_printf_float+0x250>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	f100 8103 	bmi.w	80062c6 <_printf_float+0x44a>
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c4:	4298      	cmp	r0, r3
 80060c6:	bfb8      	it	lt
 80060c8:	4618      	movlt	r0, r3
 80060ca:	e734      	b.n	8005f36 <_printf_float+0xba>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af2b 	beq.w	8005f32 <_printf_float+0xb6>
 80060dc:	f109 0901 	add.w	r9, r9, #1
 80060e0:	e7e8      	b.n	80060b4 <_printf_float+0x238>
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc39      	bgt.n	800615c <_printf_float+0x2e0>
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <_printf_float+0x2dc>)
 80060ea:	2301      	movs	r3, #1
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af1d 	beq.w	8005f32 <_printf_float+0xb6>
 80060f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006100:	d102      	bne.n	8006108 <_printf_float+0x28c>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d5d7      	bpl.n	80060b8 <_printf_float+0x23c>
 8006108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af0d 	beq.w	8005f32 <_printf_float+0xb6>
 8006118:	f04f 0a00 	mov.w	sl, #0
 800611c:	f104 0b1a 	add.w	fp, r4, #26
 8006120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006122:	425b      	negs	r3, r3
 8006124:	4553      	cmp	r3, sl
 8006126:	dc01      	bgt.n	800612c <_printf_float+0x2b0>
 8006128:	464b      	mov	r3, r9
 800612a:	e793      	b.n	8006054 <_printf_float+0x1d8>
 800612c:	2301      	movs	r3, #1
 800612e:	465a      	mov	r2, fp
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f aefb 	beq.w	8005f32 <_printf_float+0xb6>
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	e7ee      	b.n	8006120 <_printf_float+0x2a4>
 8006142:	bf00      	nop
 8006144:	7fefffff 	.word	0x7fefffff
 8006148:	080090f4 	.word	0x080090f4
 800614c:	080090f8 	.word	0x080090f8
 8006150:	080090fc 	.word	0x080090fc
 8006154:	08009100 	.word	0x08009100
 8006158:	08009104 	.word	0x08009104
 800615c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800615e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006162:	4553      	cmp	r3, sl
 8006164:	bfa8      	it	ge
 8006166:	4653      	movge	r3, sl
 8006168:	2b00      	cmp	r3, #0
 800616a:	4699      	mov	r9, r3
 800616c:	dc36      	bgt.n	80061dc <_printf_float+0x360>
 800616e:	f04f 0b00 	mov.w	fp, #0
 8006172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006176:	f104 021a 	add.w	r2, r4, #26
 800617a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617c:	9306      	str	r3, [sp, #24]
 800617e:	eba3 0309 	sub.w	r3, r3, r9
 8006182:	455b      	cmp	r3, fp
 8006184:	dc31      	bgt.n	80061ea <_printf_float+0x36e>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	459a      	cmp	sl, r3
 800618a:	dc3a      	bgt.n	8006202 <_printf_float+0x386>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07da      	lsls	r2, r3, #31
 8006190:	d437      	bmi.n	8006202 <_printf_float+0x386>
 8006192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006194:	ebaa 0903 	sub.w	r9, sl, r3
 8006198:	9b06      	ldr	r3, [sp, #24]
 800619a:	ebaa 0303 	sub.w	r3, sl, r3
 800619e:	4599      	cmp	r9, r3
 80061a0:	bfa8      	it	ge
 80061a2:	4699      	movge	r9, r3
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	dc33      	bgt.n	8006212 <_printf_float+0x396>
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b2:	f104 0b1a 	add.w	fp, r4, #26
 80061b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b8:	ebaa 0303 	sub.w	r3, sl, r3
 80061bc:	eba3 0309 	sub.w	r3, r3, r9
 80061c0:	4543      	cmp	r3, r8
 80061c2:	f77f af79 	ble.w	80060b8 <_printf_float+0x23c>
 80061c6:	2301      	movs	r3, #1
 80061c8:	465a      	mov	r2, fp
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f aeae 	beq.w	8005f32 <_printf_float+0xb6>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	e7ec      	b.n	80061b6 <_printf_float+0x33a>
 80061dc:	4642      	mov	r2, r8
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1c2      	bne.n	800616e <_printf_float+0x2f2>
 80061e8:	e6a3      	b.n	8005f32 <_printf_float+0xb6>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	f43f ae9c 	beq.w	8005f32 <_printf_float+0xb6>
 80061fa:	9a06      	ldr	r2, [sp, #24]
 80061fc:	f10b 0b01 	add.w	fp, fp, #1
 8006200:	e7bb      	b.n	800617a <_printf_float+0x2fe>
 8006202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	d1c0      	bne.n	8006192 <_printf_float+0x316>
 8006210:	e68f      	b.n	8005f32 <_printf_float+0xb6>
 8006212:	9a06      	ldr	r2, [sp, #24]
 8006214:	464b      	mov	r3, r9
 8006216:	4442      	add	r2, r8
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	d1c3      	bne.n	80061aa <_printf_float+0x32e>
 8006222:	e686      	b.n	8005f32 <_printf_float+0xb6>
 8006224:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006228:	f1ba 0f01 	cmp.w	sl, #1
 800622c:	dc01      	bgt.n	8006232 <_printf_float+0x3b6>
 800622e:	07db      	lsls	r3, r3, #31
 8006230:	d536      	bpl.n	80062a0 <_printf_float+0x424>
 8006232:	2301      	movs	r3, #1
 8006234:	4642      	mov	r2, r8
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae78 	beq.w	8005f32 <_printf_float+0xb6>
 8006242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae70 	beq.w	8005f32 <_printf_float+0xb6>
 8006252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625e:	f7fa fc53 	bl	8000b08 <__aeabi_dcmpeq>
 8006262:	b9c0      	cbnz	r0, 8006296 <_printf_float+0x41a>
 8006264:	4653      	mov	r3, sl
 8006266:	f108 0201 	add.w	r2, r8, #1
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	d10c      	bne.n	800628e <_printf_float+0x412>
 8006274:	e65d      	b.n	8005f32 <_printf_float+0xb6>
 8006276:	2301      	movs	r3, #1
 8006278:	465a      	mov	r2, fp
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f ae56 	beq.w	8005f32 <_printf_float+0xb6>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	45d0      	cmp	r8, sl
 800628c:	dbf3      	blt.n	8006276 <_printf_float+0x3fa>
 800628e:	464b      	mov	r3, r9
 8006290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006294:	e6df      	b.n	8006056 <_printf_float+0x1da>
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	f104 0b1a 	add.w	fp, r4, #26
 800629e:	e7f4      	b.n	800628a <_printf_float+0x40e>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4642      	mov	r2, r8
 80062a4:	e7e1      	b.n	800626a <_printf_float+0x3ee>
 80062a6:	2301      	movs	r3, #1
 80062a8:	464a      	mov	r2, r9
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae3e 	beq.w	8005f32 <_printf_float+0xb6>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062be:	1a5b      	subs	r3, r3, r1
 80062c0:	4543      	cmp	r3, r8
 80062c2:	dcf0      	bgt.n	80062a6 <_printf_float+0x42a>
 80062c4:	e6fc      	b.n	80060c0 <_printf_float+0x244>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	f104 0919 	add.w	r9, r4, #25
 80062ce:	e7f4      	b.n	80062ba <_printf_float+0x43e>

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4698      	mov	r8, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	3b00      	subs	r3, #0
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	4641      	mov	r1, r8
 800632e:	4638      	mov	r0, r7
 8006330:	47c8      	blx	r9
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4641      	mov	r1, r8
 800636c:	4638      	mov	r0, r7
 800636e:	47c8      	blx	r9
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	@ 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b4:	2f78      	cmp	r7, #120	@ 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	@ 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d2 	beq.w	8006572 <_printf_i+0x1c6>
 80063ce:	2f58      	cmp	r7, #88	@ 0x58
 80063d0:	f000 80b9 	beq.w	8006546 <_printf_i+0x19a>
 80063d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	@ (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	08006559 	.word	0x08006559
 800641c:	08006483 	.word	0x08006483
 8006420:	08006513 	.word	0x08006513
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	0800657b 	.word	0x0800657b
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006483 	.word	0x08006483
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	0800651b 	.word	0x0800651b
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6032      	str	r2, [r6, #0]
 800644c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09d      	b.n	8006594 <_printf_i+0x1e8>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	0606      	lsls	r6, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xbc>
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	e003      	b.n	8006470 <_printf_i+0xc4>
 8006468:	0645      	lsls	r5, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xb8>
 800646c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xd0>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647c:	4859      	ldr	r0, [pc, #356]	@ (80065e4 <_printf_i+0x238>)
 800647e:	230a      	movs	r3, #10
 8006480:	e011      	b.n	80064a6 <_printf_i+0xfa>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	0608      	lsls	r0, r1, #24
 8006488:	f853 5b04 	ldr.w	r5, [r3], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0xe8>
 800648e:	0649      	lsls	r1, r1, #25
 8006490:	bf48      	it	mi
 8006492:	b2ad      	uxthmi	r5, r5
 8006494:	2f6f      	cmp	r7, #111	@ 0x6f
 8006496:	4853      	ldr	r0, [pc, #332]	@ (80065e4 <_printf_i+0x238>)
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	bf14      	ite	ne
 800649c:	230a      	movne	r3, #10
 800649e:	2308      	moveq	r3, #8
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a6:	6866      	ldr	r6, [r4, #4]
 80064a8:	60a6      	str	r6, [r4, #8]
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	bfa2      	ittt	ge
 80064ae:	6821      	ldrge	r1, [r4, #0]
 80064b0:	f021 0104 	bicge.w	r1, r1, #4
 80064b4:	6021      	strge	r1, [r4, #0]
 80064b6:	b90d      	cbnz	r5, 80064bc <_printf_i+0x110>
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	d04b      	beq.n	8006554 <_printf_i+0x1a8>
 80064bc:	4616      	mov	r6, r2
 80064be:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c2:	fb03 5711 	mls	r7, r3, r1, r5
 80064c6:	5dc7      	ldrb	r7, [r0, r7]
 80064c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064cc:	462f      	mov	r7, r5
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	460d      	mov	r5, r1
 80064d2:	d9f4      	bls.n	80064be <_printf_i+0x112>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d10b      	bne.n	80064f0 <_printf_i+0x144>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	d508      	bpl.n	80064f0 <_printf_i+0x144>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	bfde      	ittt	le
 80064e6:	2330      	movle	r3, #48	@ 0x30
 80064e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f0:	1b92      	subs	r2, r2, r6
 80064f2:	6122      	str	r2, [r4, #16]
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	464b      	mov	r3, r9
 80064fa:	aa03      	add	r2, sp, #12
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fee6 	bl	80062d0 <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	d14a      	bne.n	800659e <_printf_i+0x1f2>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	b004      	add	sp, #16
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f043 0320 	orr.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	4833      	ldr	r0, [pc, #204]	@ (80065e8 <_printf_i+0x23c>)
 800651c:	2778      	movs	r7, #120	@ 0x78
 800651e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6831      	ldr	r1, [r6, #0]
 8006526:	061f      	lsls	r7, r3, #24
 8006528:	f851 5b04 	ldr.w	r5, [r1], #4
 800652c:	d402      	bmi.n	8006534 <_printf_i+0x188>
 800652e:	065f      	lsls	r7, r3, #25
 8006530:	bf48      	it	mi
 8006532:	b2ad      	uxthmi	r5, r5
 8006534:	6031      	str	r1, [r6, #0]
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b11d      	cbz	r5, 800654a <_printf_i+0x19e>
 8006542:	2310      	movs	r3, #16
 8006544:	e7ac      	b.n	80064a0 <_printf_i+0xf4>
 8006546:	4827      	ldr	r0, [pc, #156]	@ (80065e4 <_printf_i+0x238>)
 8006548:	e7e9      	b.n	800651e <_printf_i+0x172>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	e7f6      	b.n	8006542 <_printf_i+0x196>
 8006554:	4616      	mov	r6, r2
 8006556:	e7bd      	b.n	80064d4 <_printf_i+0x128>
 8006558:	6833      	ldr	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	062e      	lsls	r6, r5, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d501      	bpl.n	800656c <_printf_i+0x1c0>
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0x1c6>
 800656c:	0668      	lsls	r0, r5, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0x1bc>
 8006570:	8019      	strh	r1, [r3, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	4616      	mov	r6, r2
 8006578:	e7bc      	b.n	80064f4 <_printf_i+0x148>
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	681e      	ldr	r6, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	4630      	mov	r0, r6
 8006588:	f7f9 fe42 	bl	8000210 <memchr>
 800658c:	b108      	cbz	r0, 8006592 <_printf_i+0x1e6>
 800658e:	1b80      	subs	r0, r0, r6
 8006590:	6060      	str	r0, [r4, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659c:	e7aa      	b.n	80064f4 <_printf_i+0x148>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	4632      	mov	r2, r6
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0ad      	beq.n	8006508 <_printf_i+0x15c>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d413      	bmi.n	80065da <_printf_i+0x22e>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	4298      	cmp	r0, r3
 80065b8:	bfb8      	it	lt
 80065ba:	4618      	movlt	r0, r3
 80065bc:	e7a6      	b.n	800650c <_printf_i+0x160>
 80065be:	2301      	movs	r3, #1
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d09d      	beq.n	8006508 <_printf_i+0x15c>
 80065cc:	3501      	adds	r5, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dcf2      	bgt.n	80065be <_printf_i+0x212>
 80065d8:	e7eb      	b.n	80065b2 <_printf_i+0x206>
 80065da:	2500      	movs	r5, #0
 80065dc:	f104 0619 	add.w	r6, r4, #25
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0x222>
 80065e2:	bf00      	nop
 80065e4:	08009106 	.word	0x08009106
 80065e8:	08009117 	.word	0x08009117

080065ec <std>:
 80065ec:	2300      	movs	r3, #0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	e9c0 3300 	strd	r3, r3, [r0]
 80065f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fa:	6083      	str	r3, [r0, #8]
 80065fc:	8181      	strh	r1, [r0, #12]
 80065fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006600:	81c2      	strh	r2, [r0, #14]
 8006602:	6183      	str	r3, [r0, #24]
 8006604:	4619      	mov	r1, r3
 8006606:	2208      	movs	r2, #8
 8006608:	305c      	adds	r0, #92	@ 0x5c
 800660a:	f000 f914 	bl	8006836 <memset>
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <std+0x58>)
 8006610:	6263      	str	r3, [r4, #36]	@ 0x24
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x5c>)
 8006614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <std+0x60>)
 8006618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <std+0x64>)
 800661c:	6323      	str	r3, [r4, #48]	@ 0x30
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <std+0x68>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	429c      	cmp	r4, r3
 8006624:	d006      	beq.n	8006634 <std+0x48>
 8006626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662a:	4294      	cmp	r4, r2
 800662c:	d002      	beq.n	8006634 <std+0x48>
 800662e:	33d0      	adds	r3, #208	@ 0xd0
 8006630:	429c      	cmp	r4, r3
 8006632:	d105      	bne.n	8006640 <std+0x54>
 8006634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 b978 	b.w	8006930 <__retarget_lock_init_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	080067b1 	.word	0x080067b1
 8006648:	080067d3 	.word	0x080067d3
 800664c:	0800680b 	.word	0x0800680b
 8006650:	0800682f 	.word	0x0800682f
 8006654:	2000044c 	.word	0x2000044c

08006658 <stdio_exit_handler>:
 8006658:	4a02      	ldr	r2, [pc, #8]	@ (8006664 <stdio_exit_handler+0xc>)
 800665a:	4903      	ldr	r1, [pc, #12]	@ (8006668 <stdio_exit_handler+0x10>)
 800665c:	4803      	ldr	r0, [pc, #12]	@ (800666c <stdio_exit_handler+0x14>)
 800665e:	f000 b869 	b.w	8006734 <_fwalk_sglue>
 8006662:	bf00      	nop
 8006664:	20000034 	.word	0x20000034
 8006668:	0800828d 	.word	0x0800828d
 800666c:	20000044 	.word	0x20000044

08006670 <cleanup_stdio>:
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <cleanup_stdio+0x34>)
 8006674:	4299      	cmp	r1, r3
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	d001      	beq.n	8006680 <cleanup_stdio+0x10>
 800667c:	f001 fe06 	bl	800828c <_fflush_r>
 8006680:	68a1      	ldr	r1, [r4, #8]
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <cleanup_stdio+0x38>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d002      	beq.n	800668e <cleanup_stdio+0x1e>
 8006688:	4620      	mov	r0, r4
 800668a:	f001 fdff 	bl	800828c <_fflush_r>
 800668e:	68e1      	ldr	r1, [r4, #12]
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <cleanup_stdio+0x3c>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d004      	beq.n	80066a0 <cleanup_stdio+0x30>
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f001 bdf6 	b.w	800828c <_fflush_r>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	2000044c 	.word	0x2000044c
 80066a8:	200004b4 	.word	0x200004b4
 80066ac:	2000051c 	.word	0x2000051c

080066b0 <global_stdio_init.part.0>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <global_stdio_init.part.0+0x30>)
 80066b4:	4c0b      	ldr	r4, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x34>)
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <global_stdio_init.part.0+0x38>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	2200      	movs	r2, #0
 80066be:	2104      	movs	r1, #4
 80066c0:	f7ff ff94 	bl	80065ec <std>
 80066c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066c8:	2201      	movs	r2, #1
 80066ca:	2109      	movs	r1, #9
 80066cc:	f7ff ff8e 	bl	80065ec <std>
 80066d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d4:	2202      	movs	r2, #2
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066da:	2112      	movs	r1, #18
 80066dc:	f7ff bf86 	b.w	80065ec <std>
 80066e0:	20000584 	.word	0x20000584
 80066e4:	2000044c 	.word	0x2000044c
 80066e8:	08006659 	.word	0x08006659

080066ec <__sfp_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__sfp_lock_acquire+0x8>)
 80066ee:	f000 b920 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	2000058d 	.word	0x2000058d

080066f8 <__sfp_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__sfp_lock_release+0x8>)
 80066fa:	f000 b91b 	b.w	8006934 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	2000058d 	.word	0x2000058d

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sfp_lock_release>
 8006718:	4b04      	ldr	r3, [pc, #16]	@ (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f5      	bne.n	8006710 <__sinit+0xc>
 8006724:	f7ff ffc4 	bl	80066b0 <global_stdio_init.part.0>
 8006728:	e7f2      	b.n	8006710 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08006671 	.word	0x08006671
 8006730:	20000584 	.word	0x20000584

08006734 <_fwalk_sglue>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4607      	mov	r7, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4614      	mov	r4, r2
 800673e:	2600      	movs	r6, #0
 8006740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006744:	f1b9 0901 	subs.w	r9, r9, #1
 8006748:	d505      	bpl.n	8006756 <_fwalk_sglue+0x22>
 800674a:	6824      	ldr	r4, [r4, #0]
 800674c:	2c00      	cmp	r4, #0
 800674e:	d1f7      	bne.n	8006740 <_fwalk_sglue+0xc>
 8006750:	4630      	mov	r0, r6
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d907      	bls.n	800676c <_fwalk_sglue+0x38>
 800675c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	d003      	beq.n	800676c <_fwalk_sglue+0x38>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	4306      	orrs	r6, r0
 800676c:	3568      	adds	r5, #104	@ 0x68
 800676e:	e7e9      	b.n	8006744 <_fwalk_sglue+0x10>

08006770 <siprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	@ 0x70
 8006776:	ab1d      	add	r3, sp, #116	@ 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006780:	4809      	ldr	r0, [pc, #36]	@ (80067a8 <siprintf+0x38>)
 8006782:	9107      	str	r1, [sp, #28]
 8006784:	9104      	str	r1, [sp, #16]
 8006786:	4909      	ldr	r1, [pc, #36]	@ (80067ac <siprintf+0x3c>)
 8006788:	f853 2b04 	ldr.w	r2, [r3], #4
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	a902      	add	r1, sp, #8
 8006794:	f001 fbfa 	bl	8007f8c <_svfiprintf_r>
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	b01c      	add	sp, #112	@ 0x70
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	20000040 	.word	0x20000040
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <__sread>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	f000 f86c 	bl	8006894 <_read_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	bfab      	itete	ge
 80067c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067c2:	89a3      	ldrhlt	r3, [r4, #12]
 80067c4:	181b      	addge	r3, r3, r0
 80067c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067ca:	bfac      	ite	ge
 80067cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067ce:	81a3      	strhlt	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__swrite>:
 80067d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d6:	461f      	mov	r7, r3
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4616      	mov	r6, r2
 80067e2:	d505      	bpl.n	80067f0 <__swrite+0x1e>
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2302      	movs	r3, #2
 80067ea:	2200      	movs	r2, #0
 80067ec:	f000 f840 	bl	8006870 <_lseek_r>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006806:	f000 b857 	b.w	80068b8 <_write_r>

0800680a <__sseek>:
 800680a:	b510      	push	{r4, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006812:	f000 f82d 	bl	8006870 <_lseek_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	bf15      	itete	ne
 800681c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800681e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006826:	81a3      	strheq	r3, [r4, #12]
 8006828:	bf18      	it	ne
 800682a:	81a3      	strhne	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__sclose>:
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	f000 b80d 	b.w	8006850 <_close_r>

08006836 <memset>:
 8006836:	4402      	add	r2, r0
 8006838:	4603      	mov	r3, r0
 800683a:	4293      	cmp	r3, r2
 800683c:	d100      	bne.n	8006840 <memset+0xa>
 800683e:	4770      	bx	lr
 8006840:	f803 1b01 	strb.w	r1, [r3], #1
 8006844:	e7f9      	b.n	800683a <memset+0x4>
	...

08006848 <_localeconv_r>:
 8006848:	4800      	ldr	r0, [pc, #0]	@ (800684c <_localeconv_r+0x4>)
 800684a:	4770      	bx	lr
 800684c:	20000180 	.word	0x20000180

08006850 <_close_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d06      	ldr	r5, [pc, #24]	@ (800686c <_close_r+0x1c>)
 8006854:	2300      	movs	r3, #0
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fb fcd4 	bl	8002208 <_close>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_close_r+0x1a>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_close_r+0x1a>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000588 	.word	0x20000588

08006870 <_lseek_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	@ (8006890 <_lseek_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fb fce9 	bl	8002256 <_lseek>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_lseek_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_lseek_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	20000588 	.word	0x20000588

08006894 <_read_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	@ (80068b4 <_read_r+0x20>)
 8006898:	4604      	mov	r4, r0
 800689a:	4608      	mov	r0, r1
 800689c:	4611      	mov	r1, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fb fc77 	bl	8002196 <_read>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_read_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_read_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20000588 	.word	0x20000588

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	@ (80068d8 <_write_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fb fc82 	bl	80021d0 <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20000588 	.word	0x20000588

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	@ (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000040 	.word	0x20000040

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006924 <__libc_init_array+0x3c>)
 80068ee:	1b64      	subs	r4, r4, r5
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2600      	movs	r6, #0
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	@ (800692c <__libc_init_array+0x44>)
 80068fc:	f002 fbd4 	bl	80090a8 <_init>
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2600      	movs	r6, #0
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	080094e0 	.word	0x080094e0
 8006924:	080094e0 	.word	0x080094e0
 8006928:	080094e0 	.word	0x080094e0
 800692c:	080094e4 	.word	0x080094e4

08006930 <__retarget_lock_init_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_acquire_recursive>:
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_release_recursive>:
 8006934:	4770      	bx	lr

08006936 <quorem>:
 8006936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6903      	ldr	r3, [r0, #16]
 800693c:	690c      	ldr	r4, [r1, #16]
 800693e:	42a3      	cmp	r3, r4
 8006940:	4607      	mov	r7, r0
 8006942:	db7e      	blt.n	8006a42 <quorem+0x10c>
 8006944:	3c01      	subs	r4, #1
 8006946:	f101 0814 	add.w	r8, r1, #20
 800694a:	00a3      	lsls	r3, r4, #2
 800694c:	f100 0514 	add.w	r5, r0, #20
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800695c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006960:	3301      	adds	r3, #1
 8006962:	429a      	cmp	r2, r3
 8006964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006968:	fbb2 f6f3 	udiv	r6, r2, r3
 800696c:	d32e      	bcc.n	80069cc <quorem+0x96>
 800696e:	f04f 0a00 	mov.w	sl, #0
 8006972:	46c4      	mov	ip, r8
 8006974:	46ae      	mov	lr, r5
 8006976:	46d3      	mov	fp, sl
 8006978:	f85c 3b04 	ldr.w	r3, [ip], #4
 800697c:	b298      	uxth	r0, r3
 800697e:	fb06 a000 	mla	r0, r6, r0, sl
 8006982:	0c02      	lsrs	r2, r0, #16
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	fb06 2303 	mla	r3, r6, r3, r2
 800698a:	f8de 2000 	ldr.w	r2, [lr]
 800698e:	b280      	uxth	r0, r0
 8006990:	b292      	uxth	r2, r2
 8006992:	1a12      	subs	r2, r2, r0
 8006994:	445a      	add	r2, fp
 8006996:	f8de 0000 	ldr.w	r0, [lr]
 800699a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069a8:	b292      	uxth	r2, r2
 80069aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069ae:	45e1      	cmp	r9, ip
 80069b0:	f84e 2b04 	str.w	r2, [lr], #4
 80069b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069b8:	d2de      	bcs.n	8006978 <quorem+0x42>
 80069ba:	9b00      	ldr	r3, [sp, #0]
 80069bc:	58eb      	ldr	r3, [r5, r3]
 80069be:	b92b      	cbnz	r3, 80069cc <quorem+0x96>
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	3b04      	subs	r3, #4
 80069c4:	429d      	cmp	r5, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	d32f      	bcc.n	8006a2a <quorem+0xf4>
 80069ca:	613c      	str	r4, [r7, #16]
 80069cc:	4638      	mov	r0, r7
 80069ce:	f001 f979 	bl	8007cc4 <__mcmp>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	db25      	blt.n	8006a22 <quorem+0xec>
 80069d6:	4629      	mov	r1, r5
 80069d8:	2000      	movs	r0, #0
 80069da:	f858 2b04 	ldr.w	r2, [r8], #4
 80069de:	f8d1 c000 	ldr.w	ip, [r1]
 80069e2:	fa1f fe82 	uxth.w	lr, r2
 80069e6:	fa1f f38c 	uxth.w	r3, ip
 80069ea:	eba3 030e 	sub.w	r3, r3, lr
 80069ee:	4403      	add	r3, r0
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a00:	45c1      	cmp	r9, r8
 8006a02:	f841 3b04 	str.w	r3, [r1], #4
 8006a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a0a:	d2e6      	bcs.n	80069da <quorem+0xa4>
 8006a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a14:	b922      	cbnz	r2, 8006a20 <quorem+0xea>
 8006a16:	3b04      	subs	r3, #4
 8006a18:	429d      	cmp	r5, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	d30b      	bcc.n	8006a36 <quorem+0x100>
 8006a1e:	613c      	str	r4, [r7, #16]
 8006a20:	3601      	adds	r6, #1
 8006a22:	4630      	mov	r0, r6
 8006a24:	b003      	add	sp, #12
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	d1cb      	bne.n	80069ca <quorem+0x94>
 8006a32:	3c01      	subs	r4, #1
 8006a34:	e7c6      	b.n	80069c4 <quorem+0x8e>
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d1ef      	bne.n	8006a1e <quorem+0xe8>
 8006a3e:	3c01      	subs	r4, #1
 8006a40:	e7ea      	b.n	8006a18 <quorem+0xe2>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7ee      	b.n	8006a24 <quorem+0xee>
	...

08006a48 <_dtoa_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	69c7      	ldr	r7, [r0, #28]
 8006a4e:	b099      	sub	sp, #100	@ 0x64
 8006a50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a54:	ec55 4b10 	vmov	r4, r5, d0
 8006a58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a5c:	4683      	mov	fp, r0
 8006a5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a62:	b97f      	cbnz	r7, 8006a84 <_dtoa_r+0x3c>
 8006a64:	2010      	movs	r0, #16
 8006a66:	f000 fdfd 	bl	8007664 <malloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a70:	b920      	cbnz	r0, 8006a7c <_dtoa_r+0x34>
 8006a72:	4ba7      	ldr	r3, [pc, #668]	@ (8006d10 <_dtoa_r+0x2c8>)
 8006a74:	21ef      	movs	r1, #239	@ 0xef
 8006a76:	48a7      	ldr	r0, [pc, #668]	@ (8006d14 <_dtoa_r+0x2cc>)
 8006a78:	f001 fc68 	bl	800834c <__assert_func>
 8006a7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a80:	6007      	str	r7, [r0, #0]
 8006a82:	60c7      	str	r7, [r0, #12]
 8006a84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	b159      	cbz	r1, 8006aa4 <_dtoa_r+0x5c>
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	604a      	str	r2, [r1, #4]
 8006a90:	2301      	movs	r3, #1
 8006a92:	4093      	lsls	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
 8006a96:	4658      	mov	r0, fp
 8006a98:	f000 feda 	bl	8007850 <_Bfree>
 8006a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	1e2b      	subs	r3, r5, #0
 8006aa6:	bfb9      	ittee	lt
 8006aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	9303      	strlt	r3, [sp, #12]
 8006aae:	2300      	movge	r3, #0
 8006ab0:	6033      	strge	r3, [r6, #0]
 8006ab2:	9f03      	ldr	r7, [sp, #12]
 8006ab4:	4b98      	ldr	r3, [pc, #608]	@ (8006d18 <_dtoa_r+0x2d0>)
 8006ab6:	bfbc      	itt	lt
 8006ab8:	2201      	movlt	r2, #1
 8006aba:	6032      	strlt	r2, [r6, #0]
 8006abc:	43bb      	bics	r3, r7
 8006abe:	d112      	bne.n	8006ae6 <_dtoa_r+0x9e>
 8006ac0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ac2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006acc:	4323      	orrs	r3, r4
 8006ace:	f000 854d 	beq.w	800756c <_dtoa_r+0xb24>
 8006ad2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ad4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d2c <_dtoa_r+0x2e4>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 854f 	beq.w	800757c <_dtoa_r+0xb34>
 8006ade:	f10a 0303 	add.w	r3, sl, #3
 8006ae2:	f000 bd49 	b.w	8007578 <_dtoa_r+0xb30>
 8006ae6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	ec51 0b17 	vmov	r0, r1, d7
 8006af0:	2300      	movs	r3, #0
 8006af2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006af6:	f7fa f807 	bl	8000b08 <__aeabi_dcmpeq>
 8006afa:	4680      	mov	r8, r0
 8006afc:	b158      	cbz	r0, 8006b16 <_dtoa_r+0xce>
 8006afe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b00:	2301      	movs	r3, #1
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b06:	b113      	cbz	r3, 8006b0e <_dtoa_r+0xc6>
 8006b08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b0a:	4b84      	ldr	r3, [pc, #528]	@ (8006d1c <_dtoa_r+0x2d4>)
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d30 <_dtoa_r+0x2e8>
 8006b12:	f000 bd33 	b.w	800757c <_dtoa_r+0xb34>
 8006b16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b1a:	aa16      	add	r2, sp, #88	@ 0x58
 8006b1c:	a917      	add	r1, sp, #92	@ 0x5c
 8006b1e:	4658      	mov	r0, fp
 8006b20:	f001 f980 	bl	8007e24 <__d2b>
 8006b24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b28:	4681      	mov	r9, r0
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	d077      	beq.n	8006c1e <_dtoa_r+0x1d6>
 8006b2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	4b74      	ldr	r3, [pc, #464]	@ (8006d20 <_dtoa_r+0x2d8>)
 8006b4e:	f7f9 fbbb 	bl	80002c8 <__aeabi_dsub>
 8006b52:	a369      	add	r3, pc, #420	@ (adr r3, 8006cf8 <_dtoa_r+0x2b0>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fd6e 	bl	8000638 <__aeabi_dmul>
 8006b5c:	a368      	add	r3, pc, #416	@ (adr r3, 8006d00 <_dtoa_r+0x2b8>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fbb3 	bl	80002cc <__adddf3>
 8006b66:	4604      	mov	r4, r0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	f7f9 fcfa 	bl	8000564 <__aeabi_i2d>
 8006b70:	a365      	add	r3, pc, #404	@ (adr r3, 8006d08 <_dtoa_r+0x2c0>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fd5f 	bl	8000638 <__aeabi_dmul>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fba3 	bl	80002cc <__adddf3>
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	f7fa f805 	bl	8000b98 <__aeabi_d2iz>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4607      	mov	r7, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8006b9c:	b140      	cbz	r0, 8006bb0 <_dtoa_r+0x168>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7f9 fce0 	bl	8000564 <__aeabi_i2d>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	f7f9 ffae 	bl	8000b08 <__aeabi_dcmpeq>
 8006bac:	b900      	cbnz	r0, 8006bb0 <_dtoa_r+0x168>
 8006bae:	3f01      	subs	r7, #1
 8006bb0:	2f16      	cmp	r7, #22
 8006bb2:	d851      	bhi.n	8006c58 <_dtoa_r+0x210>
 8006bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8006d24 <_dtoa_r+0x2dc>)
 8006bb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bc2:	f7f9 ffab 	bl	8000b1c <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d048      	beq.n	8006c5c <_dtoa_r+0x214>
 8006bca:	3f01      	subs	r7, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bd2:	1b9b      	subs	r3, r3, r6
 8006bd4:	1e5a      	subs	r2, r3, #1
 8006bd6:	bf44      	itt	mi
 8006bd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006bdc:	2300      	movmi	r3, #0
 8006bde:	9208      	str	r2, [sp, #32]
 8006be0:	bf54      	ite	pl
 8006be2:	f04f 0800 	movpl.w	r8, #0
 8006be6:	9308      	strmi	r3, [sp, #32]
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	db39      	blt.n	8006c60 <_dtoa_r+0x218>
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006bf0:	443b      	add	r3, r7
 8006bf2:	9308      	str	r3, [sp, #32]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d864      	bhi.n	8006cc8 <_dtoa_r+0x280>
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	bfc4      	itt	gt
 8006c02:	3b04      	subgt	r3, #4
 8006c04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c08:	f1a3 0302 	sub.w	r3, r3, #2
 8006c0c:	bfcc      	ite	gt
 8006c0e:	2400      	movgt	r4, #0
 8006c10:	2401      	movle	r4, #1
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d863      	bhi.n	8006cde <_dtoa_r+0x296>
 8006c16:	e8df f003 	tbb	[pc, r3]
 8006c1a:	372a      	.short	0x372a
 8006c1c:	5535      	.short	0x5535
 8006c1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c22:	441e      	add	r6, r3
 8006c24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	bfc1      	itttt	gt
 8006c2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c30:	409f      	lslgt	r7, r3
 8006c32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c3a:	bfd6      	itet	le
 8006c3c:	f1c3 0320 	rsble	r3, r3, #32
 8006c40:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c44:	fa04 f003 	lslle.w	r0, r4, r3
 8006c48:	f7f9 fc7c 	bl	8000544 <__aeabi_ui2d>
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c52:	3e01      	subs	r6, #1
 8006c54:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c56:	e777      	b.n	8006b48 <_dtoa_r+0x100>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7b8      	b.n	8006bce <_dtoa_r+0x186>
 8006c5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c5e:	e7b7      	b.n	8006bd0 <_dtoa_r+0x188>
 8006c60:	427b      	negs	r3, r7
 8006c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c64:	2300      	movs	r3, #0
 8006c66:	eba8 0807 	sub.w	r8, r8, r7
 8006c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c6c:	e7c4      	b.n	8006bf8 <_dtoa_r+0x1b0>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dc35      	bgt.n	8006ce4 <_dtoa_r+0x29c>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	9307      	str	r3, [sp, #28]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c82:	e00b      	b.n	8006c9c <_dtoa_r+0x254>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7f3      	b.n	8006c70 <_dtoa_r+0x228>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	bfb8      	it	lt
 8006c9a:	2301      	movlt	r3, #1
 8006c9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	f102 0514 	add.w	r5, r2, #20
 8006ca8:	429d      	cmp	r5, r3
 8006caa:	d91f      	bls.n	8006cec <_dtoa_r+0x2a4>
 8006cac:	6041      	str	r1, [r0, #4]
 8006cae:	4658      	mov	r0, fp
 8006cb0:	f000 fd8e 	bl	80077d0 <_Balloc>
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d13c      	bne.n	8006d34 <_dtoa_r+0x2ec>
 8006cba:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <_dtoa_r+0x2e0>)
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cc2:	e6d8      	b.n	8006a76 <_dtoa_r+0x2e>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e7e0      	b.n	8006c8a <_dtoa_r+0x242>
 8006cc8:	2401      	movs	r4, #1
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	9307      	str	r3, [sp, #28]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2312      	movs	r3, #18
 8006cdc:	e7d0      	b.n	8006c80 <_dtoa_r+0x238>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ce2:	e7f5      	b.n	8006cd0 <_dtoa_r+0x288>
 8006ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	9307      	str	r3, [sp, #28]
 8006cea:	e7d7      	b.n	8006c9c <_dtoa_r+0x254>
 8006cec:	3101      	adds	r1, #1
 8006cee:	0052      	lsls	r2, r2, #1
 8006cf0:	e7d8      	b.n	8006ca4 <_dtoa_r+0x25c>
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	08009135 	.word	0x08009135
 8006d14:	0800914c 	.word	0x0800914c
 8006d18:	7ff00000 	.word	0x7ff00000
 8006d1c:	08009105 	.word	0x08009105
 8006d20:	3ff80000 	.word	0x3ff80000
 8006d24:	08009248 	.word	0x08009248
 8006d28:	080091a4 	.word	0x080091a4
 8006d2c:	08009131 	.word	0x08009131
 8006d30:	08009104 	.word	0x08009104
 8006d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d38:	6018      	str	r0, [r3, #0]
 8006d3a:	9b07      	ldr	r3, [sp, #28]
 8006d3c:	2b0e      	cmp	r3, #14
 8006d3e:	f200 80a4 	bhi.w	8006e8a <_dtoa_r+0x442>
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	f000 80a1 	beq.w	8006e8a <_dtoa_r+0x442>
 8006d48:	2f00      	cmp	r7, #0
 8006d4a:	dd33      	ble.n	8006db4 <_dtoa_r+0x36c>
 8006d4c:	4bad      	ldr	r3, [pc, #692]	@ (8007004 <_dtoa_r+0x5bc>)
 8006d4e:	f007 020f 	and.w	r2, r7, #15
 8006d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d56:	ed93 7b00 	vldr	d7, [r3]
 8006d5a:	05f8      	lsls	r0, r7, #23
 8006d5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d64:	d516      	bpl.n	8006d94 <_dtoa_r+0x34c>
 8006d66:	4ba8      	ldr	r3, [pc, #672]	@ (8007008 <_dtoa_r+0x5c0>)
 8006d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d70:	f7f9 fd8c 	bl	800088c <__aeabi_ddiv>
 8006d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d78:	f004 040f 	and.w	r4, r4, #15
 8006d7c:	2603      	movs	r6, #3
 8006d7e:	4da2      	ldr	r5, [pc, #648]	@ (8007008 <_dtoa_r+0x5c0>)
 8006d80:	b954      	cbnz	r4, 8006d98 <_dtoa_r+0x350>
 8006d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8a:	f7f9 fd7f 	bl	800088c <__aeabi_ddiv>
 8006d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d92:	e028      	b.n	8006de6 <_dtoa_r+0x39e>
 8006d94:	2602      	movs	r6, #2
 8006d96:	e7f2      	b.n	8006d7e <_dtoa_r+0x336>
 8006d98:	07e1      	lsls	r1, r4, #31
 8006d9a:	d508      	bpl.n	8006dae <_dtoa_r+0x366>
 8006d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006da4:	f7f9 fc48 	bl	8000638 <__aeabi_dmul>
 8006da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dac:	3601      	adds	r6, #1
 8006dae:	1064      	asrs	r4, r4, #1
 8006db0:	3508      	adds	r5, #8
 8006db2:	e7e5      	b.n	8006d80 <_dtoa_r+0x338>
 8006db4:	f000 80d2 	beq.w	8006f5c <_dtoa_r+0x514>
 8006db8:	427c      	negs	r4, r7
 8006dba:	4b92      	ldr	r3, [pc, #584]	@ (8007004 <_dtoa_r+0x5bc>)
 8006dbc:	4d92      	ldr	r5, [pc, #584]	@ (8007008 <_dtoa_r+0x5c0>)
 8006dbe:	f004 020f 	and.w	r2, r4, #15
 8006dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dce:	f7f9 fc33 	bl	8000638 <__aeabi_dmul>
 8006dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd6:	1124      	asrs	r4, r4, #4
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2602      	movs	r6, #2
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	f040 80b2 	bne.w	8006f46 <_dtoa_r+0x4fe>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1d3      	bne.n	8006d8e <_dtoa_r+0x346>
 8006de6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006de8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80b7 	beq.w	8006f60 <_dtoa_r+0x518>
 8006df2:	4b86      	ldr	r3, [pc, #536]	@ (800700c <_dtoa_r+0x5c4>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f000 80ae 	beq.w	8006f60 <_dtoa_r+0x518>
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80aa 	beq.w	8006f60 <_dtoa_r+0x518>
 8006e0c:	9b00      	ldr	r3, [sp, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd37      	ble.n	8006e82 <_dtoa_r+0x43a>
 8006e12:	1e7b      	subs	r3, r7, #1
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	4620      	mov	r0, r4
 8006e18:	4b7d      	ldr	r3, [pc, #500]	@ (8007010 <_dtoa_r+0x5c8>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 fc0b 	bl	8000638 <__aeabi_dmul>
 8006e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e26:	9c00      	ldr	r4, [sp, #0]
 8006e28:	3601      	adds	r6, #1
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7f9 fb9a 	bl	8000564 <__aeabi_i2d>
 8006e30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e34:	f7f9 fc00 	bl	8000638 <__aeabi_dmul>
 8006e38:	4b76      	ldr	r3, [pc, #472]	@ (8007014 <_dtoa_r+0x5cc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f7f9 fa46 	bl	80002cc <__adddf3>
 8006e40:	4605      	mov	r5, r0
 8006e42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	f040 808d 	bne.w	8006f66 <_dtoa_r+0x51e>
 8006e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e50:	4b71      	ldr	r3, [pc, #452]	@ (8007018 <_dtoa_r+0x5d0>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	f7f9 fa38 	bl	80002c8 <__aeabi_dsub>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e60:	462a      	mov	r2, r5
 8006e62:	4633      	mov	r3, r6
 8006e64:	f7f9 fe78 	bl	8000b58 <__aeabi_dcmpgt>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f040 828b 	bne.w	8007384 <_dtoa_r+0x93c>
 8006e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e72:	462a      	mov	r2, r5
 8006e74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e78:	f7f9 fe50 	bl	8000b1c <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 8128 	bne.w	80070d2 <_dtoa_r+0x68a>
 8006e82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f2c0 815a 	blt.w	8007146 <_dtoa_r+0x6fe>
 8006e92:	2f0e      	cmp	r7, #14
 8006e94:	f300 8157 	bgt.w	8007146 <_dtoa_r+0x6fe>
 8006e98:	4b5a      	ldr	r3, [pc, #360]	@ (8007004 <_dtoa_r+0x5bc>)
 8006e9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e9e:	ed93 7b00 	vldr	d7, [r3]
 8006ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	ed8d 7b00 	vstr	d7, [sp]
 8006eaa:	da03      	bge.n	8006eb4 <_dtoa_r+0x46c>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f340 8101 	ble.w	80070b6 <_dtoa_r+0x66e>
 8006eb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006eb8:	4656      	mov	r6, sl
 8006eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fce3 	bl	800088c <__aeabi_ddiv>
 8006ec6:	f7f9 fe67 	bl	8000b98 <__aeabi_d2iz>
 8006eca:	4680      	mov	r8, r0
 8006ecc:	f7f9 fb4a 	bl	8000564 <__aeabi_i2d>
 8006ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed4:	f7f9 fbb0 	bl	8000638 <__aeabi_dmul>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ee4:	f7f9 f9f0 	bl	80002c8 <__aeabi_dsub>
 8006ee8:	f806 4b01 	strb.w	r4, [r6], #1
 8006eec:	9d07      	ldr	r5, [sp, #28]
 8006eee:	eba6 040a 	sub.w	r4, r6, sl
 8006ef2:	42a5      	cmp	r5, r4
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	f040 8117 	bne.w	800712a <_dtoa_r+0x6e2>
 8006efc:	f7f9 f9e6 	bl	80002cc <__adddf3>
 8006f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	f7f9 fe26 	bl	8000b58 <__aeabi_dcmpgt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 80f9 	bne.w	8007104 <_dtoa_r+0x6bc>
 8006f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fdf5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f1e:	b118      	cbz	r0, 8006f28 <_dtoa_r+0x4e0>
 8006f20:	f018 0f01 	tst.w	r8, #1
 8006f24:	f040 80ee 	bne.w	8007104 <_dtoa_r+0x6bc>
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f000 fc90 	bl	8007850 <_Bfree>
 8006f30:	2300      	movs	r3, #0
 8006f32:	7033      	strb	r3, [r6, #0]
 8006f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f36:	3701      	adds	r7, #1
 8006f38:	601f      	str	r7, [r3, #0]
 8006f3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 831d 	beq.w	800757c <_dtoa_r+0xb34>
 8006f42:	601e      	str	r6, [r3, #0]
 8006f44:	e31a      	b.n	800757c <_dtoa_r+0xb34>
 8006f46:	07e2      	lsls	r2, r4, #31
 8006f48:	d505      	bpl.n	8006f56 <_dtoa_r+0x50e>
 8006f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f4e:	f7f9 fb73 	bl	8000638 <__aeabi_dmul>
 8006f52:	3601      	adds	r6, #1
 8006f54:	2301      	movs	r3, #1
 8006f56:	1064      	asrs	r4, r4, #1
 8006f58:	3508      	adds	r5, #8
 8006f5a:	e73f      	b.n	8006ddc <_dtoa_r+0x394>
 8006f5c:	2602      	movs	r6, #2
 8006f5e:	e742      	b.n	8006de6 <_dtoa_r+0x39e>
 8006f60:	9c07      	ldr	r4, [sp, #28]
 8006f62:	9704      	str	r7, [sp, #16]
 8006f64:	e761      	b.n	8006e2a <_dtoa_r+0x3e2>
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <_dtoa_r+0x5bc>)
 8006f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f72:	4454      	add	r4, sl
 8006f74:	2900      	cmp	r1, #0
 8006f76:	d053      	beq.n	8007020 <_dtoa_r+0x5d8>
 8006f78:	4928      	ldr	r1, [pc, #160]	@ (800701c <_dtoa_r+0x5d4>)
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f7f9 fc86 	bl	800088c <__aeabi_ddiv>
 8006f80:	4633      	mov	r3, r6
 8006f82:	462a      	mov	r2, r5
 8006f84:	f7f9 f9a0 	bl	80002c8 <__aeabi_dsub>
 8006f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f8c:	4656      	mov	r6, sl
 8006f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f92:	f7f9 fe01 	bl	8000b98 <__aeabi_d2iz>
 8006f96:	4605      	mov	r5, r0
 8006f98:	f7f9 fae4 	bl	8000564 <__aeabi_i2d>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa4:	f7f9 f990 	bl	80002c8 <__aeabi_dsub>
 8006fa8:	3530      	adds	r5, #48	@ 0x30
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fb2:	f806 5b01 	strb.w	r5, [r6], #1
 8006fb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fba:	f7f9 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d171      	bne.n	80070a6 <_dtoa_r+0x65e>
 8006fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc6:	4911      	ldr	r1, [pc, #68]	@ (800700c <_dtoa_r+0x5c4>)
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f7f9 f97d 	bl	80002c8 <__aeabi_dsub>
 8006fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fd2:	f7f9 fda3 	bl	8000b1c <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f040 8095 	bne.w	8007106 <_dtoa_r+0x6be>
 8006fdc:	42a6      	cmp	r6, r4
 8006fde:	f43f af50 	beq.w	8006e82 <_dtoa_r+0x43a>
 8006fe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <_dtoa_r+0x5c8>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f7f9 fb25 	bl	8000638 <__aeabi_dmul>
 8006fee:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <_dtoa_r+0x5c8>)
 8006ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffa:	f7f9 fb1d 	bl	8000638 <__aeabi_dmul>
 8006ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007002:	e7c4      	b.n	8006f8e <_dtoa_r+0x546>
 8007004:	08009248 	.word	0x08009248
 8007008:	08009220 	.word	0x08009220
 800700c:	3ff00000 	.word	0x3ff00000
 8007010:	40240000 	.word	0x40240000
 8007014:	401c0000 	.word	0x401c0000
 8007018:	40140000 	.word	0x40140000
 800701c:	3fe00000 	.word	0x3fe00000
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	f7f9 fb08 	bl	8000638 <__aeabi_dmul>
 8007028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800702c:	9415      	str	r4, [sp, #84]	@ 0x54
 800702e:	4656      	mov	r6, sl
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 fdb0 	bl	8000b98 <__aeabi_d2iz>
 8007038:	4605      	mov	r5, r0
 800703a:	f7f9 fa93 	bl	8000564 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	f7f9 f93f 	bl	80002c8 <__aeabi_dsub>
 800704a:	3530      	adds	r5, #48	@ 0x30
 800704c:	f806 5b01 	strb.w	r5, [r6], #1
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	42a6      	cmp	r6, r4
 8007056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	d124      	bne.n	80070aa <_dtoa_r+0x662>
 8007060:	4bac      	ldr	r3, [pc, #688]	@ (8007314 <_dtoa_r+0x8cc>)
 8007062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007066:	f7f9 f931 	bl	80002cc <__adddf3>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007072:	f7f9 fd71 	bl	8000b58 <__aeabi_dcmpgt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d145      	bne.n	8007106 <_dtoa_r+0x6be>
 800707a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800707e:	49a5      	ldr	r1, [pc, #660]	@ (8007314 <_dtoa_r+0x8cc>)
 8007080:	2000      	movs	r0, #0
 8007082:	f7f9 f921 	bl	80002c8 <__aeabi_dsub>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800708e:	f7f9 fd45 	bl	8000b1c <__aeabi_dcmplt>
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f aef5 	beq.w	8006e82 <_dtoa_r+0x43a>
 8007098:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800709a:	1e73      	subs	r3, r6, #1
 800709c:	9315      	str	r3, [sp, #84]	@ 0x54
 800709e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070a2:	2b30      	cmp	r3, #48	@ 0x30
 80070a4:	d0f8      	beq.n	8007098 <_dtoa_r+0x650>
 80070a6:	9f04      	ldr	r7, [sp, #16]
 80070a8:	e73e      	b.n	8006f28 <_dtoa_r+0x4e0>
 80070aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007318 <_dtoa_r+0x8d0>)
 80070ac:	f7f9 fac4 	bl	8000638 <__aeabi_dmul>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	e7bc      	b.n	8007030 <_dtoa_r+0x5e8>
 80070b6:	d10c      	bne.n	80070d2 <_dtoa_r+0x68a>
 80070b8:	4b98      	ldr	r3, [pc, #608]	@ (800731c <_dtoa_r+0x8d4>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070c0:	f7f9 faba 	bl	8000638 <__aeabi_dmul>
 80070c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070c8:	f7f9 fd3c 	bl	8000b44 <__aeabi_dcmpge>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f000 8157 	beq.w	8007380 <_dtoa_r+0x938>
 80070d2:	2400      	movs	r4, #0
 80070d4:	4625      	mov	r5, r4
 80070d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070d8:	43db      	mvns	r3, r3
 80070da:	9304      	str	r3, [sp, #16]
 80070dc:	4656      	mov	r6, sl
 80070de:	2700      	movs	r7, #0
 80070e0:	4621      	mov	r1, r4
 80070e2:	4658      	mov	r0, fp
 80070e4:	f000 fbb4 	bl	8007850 <_Bfree>
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	d0dc      	beq.n	80070a6 <_dtoa_r+0x65e>
 80070ec:	b12f      	cbz	r7, 80070fa <_dtoa_r+0x6b2>
 80070ee:	42af      	cmp	r7, r5
 80070f0:	d003      	beq.n	80070fa <_dtoa_r+0x6b2>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4658      	mov	r0, fp
 80070f6:	f000 fbab 	bl	8007850 <_Bfree>
 80070fa:	4629      	mov	r1, r5
 80070fc:	4658      	mov	r0, fp
 80070fe:	f000 fba7 	bl	8007850 <_Bfree>
 8007102:	e7d0      	b.n	80070a6 <_dtoa_r+0x65e>
 8007104:	9704      	str	r7, [sp, #16]
 8007106:	4633      	mov	r3, r6
 8007108:	461e      	mov	r6, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a39      	cmp	r2, #57	@ 0x39
 8007110:	d107      	bne.n	8007122 <_dtoa_r+0x6da>
 8007112:	459a      	cmp	sl, r3
 8007114:	d1f8      	bne.n	8007108 <_dtoa_r+0x6c0>
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	3201      	adds	r2, #1
 800711a:	9204      	str	r2, [sp, #16]
 800711c:	2230      	movs	r2, #48	@ 0x30
 800711e:	f88a 2000 	strb.w	r2, [sl]
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	3201      	adds	r2, #1
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e7bd      	b.n	80070a6 <_dtoa_r+0x65e>
 800712a:	4b7b      	ldr	r3, [pc, #492]	@ (8007318 <_dtoa_r+0x8d0>)
 800712c:	2200      	movs	r2, #0
 800712e:	f7f9 fa83 	bl	8000638 <__aeabi_dmul>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	460d      	mov	r5, r1
 800713a:	f7f9 fce5 	bl	8000b08 <__aeabi_dcmpeq>
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aebb 	beq.w	8006eba <_dtoa_r+0x472>
 8007144:	e6f0      	b.n	8006f28 <_dtoa_r+0x4e0>
 8007146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007148:	2a00      	cmp	r2, #0
 800714a:	f000 80db 	beq.w	8007304 <_dtoa_r+0x8bc>
 800714e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007150:	2a01      	cmp	r2, #1
 8007152:	f300 80bf 	bgt.w	80072d4 <_dtoa_r+0x88c>
 8007156:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007158:	2a00      	cmp	r2, #0
 800715a:	f000 80b7 	beq.w	80072cc <_dtoa_r+0x884>
 800715e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007162:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007164:	4646      	mov	r6, r8
 8007166:	9a08      	ldr	r2, [sp, #32]
 8007168:	2101      	movs	r1, #1
 800716a:	441a      	add	r2, r3
 800716c:	4658      	mov	r0, fp
 800716e:	4498      	add	r8, r3
 8007170:	9208      	str	r2, [sp, #32]
 8007172:	f000 fc21 	bl	80079b8 <__i2b>
 8007176:	4605      	mov	r5, r0
 8007178:	b15e      	cbz	r6, 8007192 <_dtoa_r+0x74a>
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd08      	ble.n	8007192 <_dtoa_r+0x74a>
 8007180:	42b3      	cmp	r3, r6
 8007182:	9a08      	ldr	r2, [sp, #32]
 8007184:	bfa8      	it	ge
 8007186:	4633      	movge	r3, r6
 8007188:	eba8 0803 	sub.w	r8, r8, r3
 800718c:	1af6      	subs	r6, r6, r3
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007194:	b1f3      	cbz	r3, 80071d4 <_dtoa_r+0x78c>
 8007196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80b7 	beq.w	800730c <_dtoa_r+0x8c4>
 800719e:	b18c      	cbz	r4, 80071c4 <_dtoa_r+0x77c>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4622      	mov	r2, r4
 80071a4:	4658      	mov	r0, fp
 80071a6:	f000 fcc7 	bl	8007b38 <__pow5mult>
 80071aa:	464a      	mov	r2, r9
 80071ac:	4601      	mov	r1, r0
 80071ae:	4605      	mov	r5, r0
 80071b0:	4658      	mov	r0, fp
 80071b2:	f000 fc17 	bl	80079e4 <__multiply>
 80071b6:	4649      	mov	r1, r9
 80071b8:	9004      	str	r0, [sp, #16]
 80071ba:	4658      	mov	r0, fp
 80071bc:	f000 fb48 	bl	8007850 <_Bfree>
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	4699      	mov	r9, r3
 80071c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071c6:	1b1a      	subs	r2, r3, r4
 80071c8:	d004      	beq.n	80071d4 <_dtoa_r+0x78c>
 80071ca:	4649      	mov	r1, r9
 80071cc:	4658      	mov	r0, fp
 80071ce:	f000 fcb3 	bl	8007b38 <__pow5mult>
 80071d2:	4681      	mov	r9, r0
 80071d4:	2101      	movs	r1, #1
 80071d6:	4658      	mov	r0, fp
 80071d8:	f000 fbee 	bl	80079b8 <__i2b>
 80071dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071de:	4604      	mov	r4, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 81cf 	beq.w	8007584 <_dtoa_r+0xb3c>
 80071e6:	461a      	mov	r2, r3
 80071e8:	4601      	mov	r1, r0
 80071ea:	4658      	mov	r0, fp
 80071ec:	f000 fca4 	bl	8007b38 <__pow5mult>
 80071f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	4604      	mov	r4, r0
 80071f6:	f300 8095 	bgt.w	8007324 <_dtoa_r+0x8dc>
 80071fa:	9b02      	ldr	r3, [sp, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 8087 	bne.w	8007310 <_dtoa_r+0x8c8>
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 8089 	bne.w	8007320 <_dtoa_r+0x8d8>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007214:	0d1b      	lsrs	r3, r3, #20
 8007216:	051b      	lsls	r3, r3, #20
 8007218:	b12b      	cbz	r3, 8007226 <_dtoa_r+0x7de>
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	3301      	adds	r3, #1
 800721e:	9308      	str	r3, [sp, #32]
 8007220:	f108 0801 	add.w	r8, r8, #1
 8007224:	2301      	movs	r3, #1
 8007226:	930a      	str	r3, [sp, #40]	@ 0x28
 8007228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 81b0 	beq.w	8007590 <_dtoa_r+0xb48>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007236:	6918      	ldr	r0, [r3, #16]
 8007238:	f000 fb72 	bl	8007920 <__hi0bits>
 800723c:	f1c0 0020 	rsb	r0, r0, #32
 8007240:	9b08      	ldr	r3, [sp, #32]
 8007242:	4418      	add	r0, r3
 8007244:	f010 001f 	ands.w	r0, r0, #31
 8007248:	d077      	beq.n	800733a <_dtoa_r+0x8f2>
 800724a:	f1c0 0320 	rsb	r3, r0, #32
 800724e:	2b04      	cmp	r3, #4
 8007250:	dd6b      	ble.n	800732a <_dtoa_r+0x8e2>
 8007252:	9b08      	ldr	r3, [sp, #32]
 8007254:	f1c0 001c 	rsb	r0, r0, #28
 8007258:	4403      	add	r3, r0
 800725a:	4480      	add	r8, r0
 800725c:	4406      	add	r6, r0
 800725e:	9308      	str	r3, [sp, #32]
 8007260:	f1b8 0f00 	cmp.w	r8, #0
 8007264:	dd05      	ble.n	8007272 <_dtoa_r+0x82a>
 8007266:	4649      	mov	r1, r9
 8007268:	4642      	mov	r2, r8
 800726a:	4658      	mov	r0, fp
 800726c:	f000 fcbe 	bl	8007bec <__lshift>
 8007270:	4681      	mov	r9, r0
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd05      	ble.n	8007284 <_dtoa_r+0x83c>
 8007278:	4621      	mov	r1, r4
 800727a:	461a      	mov	r2, r3
 800727c:	4658      	mov	r0, fp
 800727e:	f000 fcb5 	bl	8007bec <__lshift>
 8007282:	4604      	mov	r4, r0
 8007284:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007286:	2b00      	cmp	r3, #0
 8007288:	d059      	beq.n	800733e <_dtoa_r+0x8f6>
 800728a:	4621      	mov	r1, r4
 800728c:	4648      	mov	r0, r9
 800728e:	f000 fd19 	bl	8007cc4 <__mcmp>
 8007292:	2800      	cmp	r0, #0
 8007294:	da53      	bge.n	800733e <_dtoa_r+0x8f6>
 8007296:	1e7b      	subs	r3, r7, #1
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	4649      	mov	r1, r9
 800729c:	2300      	movs	r3, #0
 800729e:	220a      	movs	r2, #10
 80072a0:	4658      	mov	r0, fp
 80072a2:	f000 faf7 	bl	8007894 <__multadd>
 80072a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072a8:	4681      	mov	r9, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8172 	beq.w	8007594 <_dtoa_r+0xb4c>
 80072b0:	2300      	movs	r3, #0
 80072b2:	4629      	mov	r1, r5
 80072b4:	220a      	movs	r2, #10
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 faec 	bl	8007894 <__multadd>
 80072bc:	9b00      	ldr	r3, [sp, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	4605      	mov	r5, r0
 80072c2:	dc67      	bgt.n	8007394 <_dtoa_r+0x94c>
 80072c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dc41      	bgt.n	800734e <_dtoa_r+0x906>
 80072ca:	e063      	b.n	8007394 <_dtoa_r+0x94c>
 80072cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072d2:	e746      	b.n	8007162 <_dtoa_r+0x71a>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	1e5c      	subs	r4, r3, #1
 80072d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072da:	42a3      	cmp	r3, r4
 80072dc:	bfbf      	itttt	lt
 80072de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072e4:	1ae3      	sublt	r3, r4, r3
 80072e6:	bfb4      	ite	lt
 80072e8:	18d2      	addlt	r2, r2, r3
 80072ea:	1b1c      	subge	r4, r3, r4
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	bfbc      	itt	lt
 80072f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072f2:	2400      	movlt	r4, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb5      	itete	lt
 80072f8:	eba8 0603 	sublt.w	r6, r8, r3
 80072fc:	9b07      	ldrge	r3, [sp, #28]
 80072fe:	2300      	movlt	r3, #0
 8007300:	4646      	movge	r6, r8
 8007302:	e730      	b.n	8007166 <_dtoa_r+0x71e>
 8007304:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007306:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007308:	4646      	mov	r6, r8
 800730a:	e735      	b.n	8007178 <_dtoa_r+0x730>
 800730c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800730e:	e75c      	b.n	80071ca <_dtoa_r+0x782>
 8007310:	2300      	movs	r3, #0
 8007312:	e788      	b.n	8007226 <_dtoa_r+0x7de>
 8007314:	3fe00000 	.word	0x3fe00000
 8007318:	40240000 	.word	0x40240000
 800731c:	40140000 	.word	0x40140000
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	e780      	b.n	8007226 <_dtoa_r+0x7de>
 8007324:	2300      	movs	r3, #0
 8007326:	930a      	str	r3, [sp, #40]	@ 0x28
 8007328:	e782      	b.n	8007230 <_dtoa_r+0x7e8>
 800732a:	d099      	beq.n	8007260 <_dtoa_r+0x818>
 800732c:	9a08      	ldr	r2, [sp, #32]
 800732e:	331c      	adds	r3, #28
 8007330:	441a      	add	r2, r3
 8007332:	4498      	add	r8, r3
 8007334:	441e      	add	r6, r3
 8007336:	9208      	str	r2, [sp, #32]
 8007338:	e792      	b.n	8007260 <_dtoa_r+0x818>
 800733a:	4603      	mov	r3, r0
 800733c:	e7f6      	b.n	800732c <_dtoa_r+0x8e4>
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	9704      	str	r7, [sp, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dc20      	bgt.n	8007388 <_dtoa_r+0x940>
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	2b02      	cmp	r3, #2
 800734c:	dd1e      	ble.n	800738c <_dtoa_r+0x944>
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f47f aec0 	bne.w	80070d6 <_dtoa_r+0x68e>
 8007356:	4621      	mov	r1, r4
 8007358:	2205      	movs	r2, #5
 800735a:	4658      	mov	r0, fp
 800735c:	f000 fa9a 	bl	8007894 <__multadd>
 8007360:	4601      	mov	r1, r0
 8007362:	4604      	mov	r4, r0
 8007364:	4648      	mov	r0, r9
 8007366:	f000 fcad 	bl	8007cc4 <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	f77f aeb3 	ble.w	80070d6 <_dtoa_r+0x68e>
 8007370:	4656      	mov	r6, sl
 8007372:	2331      	movs	r3, #49	@ 0x31
 8007374:	f806 3b01 	strb.w	r3, [r6], #1
 8007378:	9b04      	ldr	r3, [sp, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	e6ae      	b.n	80070de <_dtoa_r+0x696>
 8007380:	9c07      	ldr	r4, [sp, #28]
 8007382:	9704      	str	r7, [sp, #16]
 8007384:	4625      	mov	r5, r4
 8007386:	e7f3      	b.n	8007370 <_dtoa_r+0x928>
 8007388:	9b07      	ldr	r3, [sp, #28]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8104 	beq.w	800759c <_dtoa_r+0xb54>
 8007394:	2e00      	cmp	r6, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x95c>
 8007398:	4629      	mov	r1, r5
 800739a:	4632      	mov	r2, r6
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fc25 	bl	8007bec <__lshift>
 80073a2:	4605      	mov	r5, r0
 80073a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05a      	beq.n	8007460 <_dtoa_r+0xa18>
 80073aa:	6869      	ldr	r1, [r5, #4]
 80073ac:	4658      	mov	r0, fp
 80073ae:	f000 fa0f 	bl	80077d0 <_Balloc>
 80073b2:	4606      	mov	r6, r0
 80073b4:	b928      	cbnz	r0, 80073c2 <_dtoa_r+0x97a>
 80073b6:	4b84      	ldr	r3, [pc, #528]	@ (80075c8 <_dtoa_r+0xb80>)
 80073b8:	4602      	mov	r2, r0
 80073ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073be:	f7ff bb5a 	b.w	8006a76 <_dtoa_r+0x2e>
 80073c2:	692a      	ldr	r2, [r5, #16]
 80073c4:	3202      	adds	r2, #2
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	f105 010c 	add.w	r1, r5, #12
 80073cc:	300c      	adds	r0, #12
 80073ce:	f000 ffaf 	bl	8008330 <memcpy>
 80073d2:	2201      	movs	r2, #1
 80073d4:	4631      	mov	r1, r6
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 fc08 	bl	8007bec <__lshift>
 80073dc:	f10a 0301 	add.w	r3, sl, #1
 80073e0:	9307      	str	r3, [sp, #28]
 80073e2:	9b00      	ldr	r3, [sp, #0]
 80073e4:	4453      	add	r3, sl
 80073e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	462f      	mov	r7, r5
 80073f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f2:	4605      	mov	r5, r0
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	4621      	mov	r1, r4
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4648      	mov	r0, r9
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f7ff fa9a 	bl	8006936 <quorem>
 8007402:	4639      	mov	r1, r7
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800740a:	4648      	mov	r0, r9
 800740c:	f000 fc5a 	bl	8007cc4 <__mcmp>
 8007410:	462a      	mov	r2, r5
 8007412:	9008      	str	r0, [sp, #32]
 8007414:	4621      	mov	r1, r4
 8007416:	4658      	mov	r0, fp
 8007418:	f000 fc70 	bl	8007cfc <__mdiff>
 800741c:	68c2      	ldr	r2, [r0, #12]
 800741e:	4606      	mov	r6, r0
 8007420:	bb02      	cbnz	r2, 8007464 <_dtoa_r+0xa1c>
 8007422:	4601      	mov	r1, r0
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fc4d 	bl	8007cc4 <__mcmp>
 800742a:	4602      	mov	r2, r0
 800742c:	4631      	mov	r1, r6
 800742e:	4658      	mov	r0, fp
 8007430:	920e      	str	r2, [sp, #56]	@ 0x38
 8007432:	f000 fa0d 	bl	8007850 <_Bfree>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743a:	9e07      	ldr	r6, [sp, #28]
 800743c:	ea43 0102 	orr.w	r1, r3, r2
 8007440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007442:	4319      	orrs	r1, r3
 8007444:	d110      	bne.n	8007468 <_dtoa_r+0xa20>
 8007446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800744a:	d029      	beq.n	80074a0 <_dtoa_r+0xa58>
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd02      	ble.n	8007458 <_dtoa_r+0xa10>
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	f883 8000 	strb.w	r8, [r3]
 800745e:	e63f      	b.n	80070e0 <_dtoa_r+0x698>
 8007460:	4628      	mov	r0, r5
 8007462:	e7bb      	b.n	80073dc <_dtoa_r+0x994>
 8007464:	2201      	movs	r2, #1
 8007466:	e7e1      	b.n	800742c <_dtoa_r+0x9e4>
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	2b00      	cmp	r3, #0
 800746c:	db04      	blt.n	8007478 <_dtoa_r+0xa30>
 800746e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007470:	430b      	orrs	r3, r1
 8007472:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007474:	430b      	orrs	r3, r1
 8007476:	d120      	bne.n	80074ba <_dtoa_r+0xa72>
 8007478:	2a00      	cmp	r2, #0
 800747a:	dded      	ble.n	8007458 <_dtoa_r+0xa10>
 800747c:	4649      	mov	r1, r9
 800747e:	2201      	movs	r2, #1
 8007480:	4658      	mov	r0, fp
 8007482:	f000 fbb3 	bl	8007bec <__lshift>
 8007486:	4621      	mov	r1, r4
 8007488:	4681      	mov	r9, r0
 800748a:	f000 fc1b 	bl	8007cc4 <__mcmp>
 800748e:	2800      	cmp	r0, #0
 8007490:	dc03      	bgt.n	800749a <_dtoa_r+0xa52>
 8007492:	d1e1      	bne.n	8007458 <_dtoa_r+0xa10>
 8007494:	f018 0f01 	tst.w	r8, #1
 8007498:	d0de      	beq.n	8007458 <_dtoa_r+0xa10>
 800749a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800749e:	d1d8      	bne.n	8007452 <_dtoa_r+0xa0a>
 80074a0:	9a00      	ldr	r2, [sp, #0]
 80074a2:	2339      	movs	r3, #57	@ 0x39
 80074a4:	7013      	strb	r3, [r2, #0]
 80074a6:	4633      	mov	r3, r6
 80074a8:	461e      	mov	r6, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074b0:	2a39      	cmp	r2, #57	@ 0x39
 80074b2:	d052      	beq.n	800755a <_dtoa_r+0xb12>
 80074b4:	3201      	adds	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e612      	b.n	80070e0 <_dtoa_r+0x698>
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	dd07      	ble.n	80074ce <_dtoa_r+0xa86>
 80074be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074c2:	d0ed      	beq.n	80074a0 <_dtoa_r+0xa58>
 80074c4:	9a00      	ldr	r2, [sp, #0]
 80074c6:	f108 0301 	add.w	r3, r8, #1
 80074ca:	7013      	strb	r3, [r2, #0]
 80074cc:	e608      	b.n	80070e0 <_dtoa_r+0x698>
 80074ce:	9b07      	ldr	r3, [sp, #28]
 80074d0:	9a07      	ldr	r2, [sp, #28]
 80074d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074d8:	4293      	cmp	r3, r2
 80074da:	d028      	beq.n	800752e <_dtoa_r+0xae6>
 80074dc:	4649      	mov	r1, r9
 80074de:	2300      	movs	r3, #0
 80074e0:	220a      	movs	r2, #10
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 f9d6 	bl	8007894 <__multadd>
 80074e8:	42af      	cmp	r7, r5
 80074ea:	4681      	mov	r9, r0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	f04f 020a 	mov.w	r2, #10
 80074f4:	4639      	mov	r1, r7
 80074f6:	4658      	mov	r0, fp
 80074f8:	d107      	bne.n	800750a <_dtoa_r+0xac2>
 80074fa:	f000 f9cb 	bl	8007894 <__multadd>
 80074fe:	4607      	mov	r7, r0
 8007500:	4605      	mov	r5, r0
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	9307      	str	r3, [sp, #28]
 8007508:	e774      	b.n	80073f4 <_dtoa_r+0x9ac>
 800750a:	f000 f9c3 	bl	8007894 <__multadd>
 800750e:	4629      	mov	r1, r5
 8007510:	4607      	mov	r7, r0
 8007512:	2300      	movs	r3, #0
 8007514:	220a      	movs	r2, #10
 8007516:	4658      	mov	r0, fp
 8007518:	f000 f9bc 	bl	8007894 <__multadd>
 800751c:	4605      	mov	r5, r0
 800751e:	e7f0      	b.n	8007502 <_dtoa_r+0xaba>
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfcc      	ite	gt
 8007526:	461e      	movgt	r6, r3
 8007528:	2601      	movle	r6, #1
 800752a:	4456      	add	r6, sl
 800752c:	2700      	movs	r7, #0
 800752e:	4649      	mov	r1, r9
 8007530:	2201      	movs	r2, #1
 8007532:	4658      	mov	r0, fp
 8007534:	f000 fb5a 	bl	8007bec <__lshift>
 8007538:	4621      	mov	r1, r4
 800753a:	4681      	mov	r9, r0
 800753c:	f000 fbc2 	bl	8007cc4 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	dcb0      	bgt.n	80074a6 <_dtoa_r+0xa5e>
 8007544:	d102      	bne.n	800754c <_dtoa_r+0xb04>
 8007546:	f018 0f01 	tst.w	r8, #1
 800754a:	d1ac      	bne.n	80074a6 <_dtoa_r+0xa5e>
 800754c:	4633      	mov	r3, r6
 800754e:	461e      	mov	r6, r3
 8007550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007554:	2a30      	cmp	r2, #48	@ 0x30
 8007556:	d0fa      	beq.n	800754e <_dtoa_r+0xb06>
 8007558:	e5c2      	b.n	80070e0 <_dtoa_r+0x698>
 800755a:	459a      	cmp	sl, r3
 800755c:	d1a4      	bne.n	80074a8 <_dtoa_r+0xa60>
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	3301      	adds	r3, #1
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	2331      	movs	r3, #49	@ 0x31
 8007566:	f88a 3000 	strb.w	r3, [sl]
 800756a:	e5b9      	b.n	80070e0 <_dtoa_r+0x698>
 800756c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800756e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075cc <_dtoa_r+0xb84>
 8007572:	b11b      	cbz	r3, 800757c <_dtoa_r+0xb34>
 8007574:	f10a 0308 	add.w	r3, sl, #8
 8007578:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4650      	mov	r0, sl
 800757e:	b019      	add	sp, #100	@ 0x64
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007586:	2b01      	cmp	r3, #1
 8007588:	f77f ae37 	ble.w	80071fa <_dtoa_r+0x7b2>
 800758c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007590:	2001      	movs	r0, #1
 8007592:	e655      	b.n	8007240 <_dtoa_r+0x7f8>
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f77f aed6 	ble.w	8007348 <_dtoa_r+0x900>
 800759c:	4656      	mov	r6, sl
 800759e:	4621      	mov	r1, r4
 80075a0:	4648      	mov	r0, r9
 80075a2:	f7ff f9c8 	bl	8006936 <quorem>
 80075a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075aa:	f806 8b01 	strb.w	r8, [r6], #1
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	eba6 020a 	sub.w	r2, r6, sl
 80075b4:	4293      	cmp	r3, r2
 80075b6:	ddb3      	ble.n	8007520 <_dtoa_r+0xad8>
 80075b8:	4649      	mov	r1, r9
 80075ba:	2300      	movs	r3, #0
 80075bc:	220a      	movs	r2, #10
 80075be:	4658      	mov	r0, fp
 80075c0:	f000 f968 	bl	8007894 <__multadd>
 80075c4:	4681      	mov	r9, r0
 80075c6:	e7ea      	b.n	800759e <_dtoa_r+0xb56>
 80075c8:	080091a4 	.word	0x080091a4
 80075cc:	08009128 	.word	0x08009128

080075d0 <_free_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d041      	beq.n	800765c <_free_r+0x8c>
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f0c      	subs	r4, r1, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	18e4      	addlt	r4, r4, r3
 80075e4:	f000 f8e8 	bl	80077b8 <__malloc_lock>
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <_free_r+0x90>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	b933      	cbnz	r3, 80075fc <_free_r+0x2c>
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	4628      	mov	r0, r5
 80075f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f8:	f000 b8e4 	b.w	80077c4 <__malloc_unlock>
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x42>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	bf01      	itttt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	e7ed      	b.n	80075ee <_free_r+0x1e>
 8007612:	461a      	mov	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b10b      	cbz	r3, 800761c <_free_r+0x4c>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d9fa      	bls.n	8007612 <_free_r+0x42>
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	1850      	adds	r0, r2, r1
 8007620:	42a0      	cmp	r0, r4
 8007622:	d10b      	bne.n	800763c <_free_r+0x6c>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	4401      	add	r1, r0
 8007628:	1850      	adds	r0, r2, r1
 800762a:	4283      	cmp	r3, r0
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	d1e0      	bne.n	80075f2 <_free_r+0x22>
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	6053      	str	r3, [r2, #4]
 8007636:	4408      	add	r0, r1
 8007638:	6010      	str	r0, [r2, #0]
 800763a:	e7da      	b.n	80075f2 <_free_r+0x22>
 800763c:	d902      	bls.n	8007644 <_free_r+0x74>
 800763e:	230c      	movs	r3, #12
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	e7d6      	b.n	80075f2 <_free_r+0x22>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf04      	itt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	bf04      	itt	eq
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	6054      	str	r4, [r2, #4]
 800765a:	e7ca      	b.n	80075f2 <_free_r+0x22>
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	bf00      	nop
 8007660:	20000594 	.word	0x20000594

08007664 <malloc>:
 8007664:	4b02      	ldr	r3, [pc, #8]	@ (8007670 <malloc+0xc>)
 8007666:	4601      	mov	r1, r0
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	f000 b825 	b.w	80076b8 <_malloc_r>
 800766e:	bf00      	nop
 8007670:	20000040 	.word	0x20000040

08007674 <sbrk_aligned>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	4e0f      	ldr	r6, [pc, #60]	@ (80076b4 <sbrk_aligned+0x40>)
 8007678:	460c      	mov	r4, r1
 800767a:	6831      	ldr	r1, [r6, #0]
 800767c:	4605      	mov	r5, r0
 800767e:	b911      	cbnz	r1, 8007686 <sbrk_aligned+0x12>
 8007680:	f000 fe46 	bl	8008310 <_sbrk_r>
 8007684:	6030      	str	r0, [r6, #0]
 8007686:	4621      	mov	r1, r4
 8007688:	4628      	mov	r0, r5
 800768a:	f000 fe41 	bl	8008310 <_sbrk_r>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d103      	bne.n	800769a <sbrk_aligned+0x26>
 8007692:	f04f 34ff 	mov.w	r4, #4294967295
 8007696:	4620      	mov	r0, r4
 8007698:	bd70      	pop	{r4, r5, r6, pc}
 800769a:	1cc4      	adds	r4, r0, #3
 800769c:	f024 0403 	bic.w	r4, r4, #3
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d0f8      	beq.n	8007696 <sbrk_aligned+0x22>
 80076a4:	1a21      	subs	r1, r4, r0
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fe32 	bl	8008310 <_sbrk_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d1f2      	bne.n	8007696 <sbrk_aligned+0x22>
 80076b0:	e7ef      	b.n	8007692 <sbrk_aligned+0x1e>
 80076b2:	bf00      	nop
 80076b4:	20000590 	.word	0x20000590

080076b8 <_malloc_r>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	1ccd      	adds	r5, r1, #3
 80076be:	f025 0503 	bic.w	r5, r5, #3
 80076c2:	3508      	adds	r5, #8
 80076c4:	2d0c      	cmp	r5, #12
 80076c6:	bf38      	it	cc
 80076c8:	250c      	movcc	r5, #12
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	4606      	mov	r6, r0
 80076ce:	db01      	blt.n	80076d4 <_malloc_r+0x1c>
 80076d0:	42a9      	cmp	r1, r5
 80076d2:	d904      	bls.n	80076de <_malloc_r+0x26>
 80076d4:	230c      	movs	r3, #12
 80076d6:	6033      	str	r3, [r6, #0]
 80076d8:	2000      	movs	r0, #0
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077b4 <_malloc_r+0xfc>
 80076e2:	f000 f869 	bl	80077b8 <__malloc_lock>
 80076e6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ea:	461c      	mov	r4, r3
 80076ec:	bb44      	cbnz	r4, 8007740 <_malloc_r+0x88>
 80076ee:	4629      	mov	r1, r5
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7ff ffbf 	bl	8007674 <sbrk_aligned>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	4604      	mov	r4, r0
 80076fa:	d158      	bne.n	80077ae <_malloc_r+0xf6>
 80076fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007700:	4627      	mov	r7, r4
 8007702:	2f00      	cmp	r7, #0
 8007704:	d143      	bne.n	800778e <_malloc_r+0xd6>
 8007706:	2c00      	cmp	r4, #0
 8007708:	d04b      	beq.n	80077a2 <_malloc_r+0xea>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	4639      	mov	r1, r7
 800770e:	4630      	mov	r0, r6
 8007710:	eb04 0903 	add.w	r9, r4, r3
 8007714:	f000 fdfc 	bl	8008310 <_sbrk_r>
 8007718:	4581      	cmp	r9, r0
 800771a:	d142      	bne.n	80077a2 <_malloc_r+0xea>
 800771c:	6821      	ldr	r1, [r4, #0]
 800771e:	1a6d      	subs	r5, r5, r1
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f7ff ffa6 	bl	8007674 <sbrk_aligned>
 8007728:	3001      	adds	r0, #1
 800772a:	d03a      	beq.n	80077a2 <_malloc_r+0xea>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	442b      	add	r3, r5
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	f8d8 3000 	ldr.w	r3, [r8]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	bb62      	cbnz	r2, 8007794 <_malloc_r+0xdc>
 800773a:	f8c8 7000 	str.w	r7, [r8]
 800773e:	e00f      	b.n	8007760 <_malloc_r+0xa8>
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	1b52      	subs	r2, r2, r5
 8007744:	d420      	bmi.n	8007788 <_malloc_r+0xd0>
 8007746:	2a0b      	cmp	r2, #11
 8007748:	d917      	bls.n	800777a <_malloc_r+0xc2>
 800774a:	1961      	adds	r1, r4, r5
 800774c:	42a3      	cmp	r3, r4
 800774e:	6025      	str	r5, [r4, #0]
 8007750:	bf18      	it	ne
 8007752:	6059      	strne	r1, [r3, #4]
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	bf08      	it	eq
 8007758:	f8c8 1000 	streq.w	r1, [r8]
 800775c:	5162      	str	r2, [r4, r5]
 800775e:	604b      	str	r3, [r1, #4]
 8007760:	4630      	mov	r0, r6
 8007762:	f000 f82f 	bl	80077c4 <__malloc_unlock>
 8007766:	f104 000b 	add.w	r0, r4, #11
 800776a:	1d23      	adds	r3, r4, #4
 800776c:	f020 0007 	bic.w	r0, r0, #7
 8007770:	1ac2      	subs	r2, r0, r3
 8007772:	bf1c      	itt	ne
 8007774:	1a1b      	subne	r3, r3, r0
 8007776:	50a3      	strne	r3, [r4, r2]
 8007778:	e7af      	b.n	80076da <_malloc_r+0x22>
 800777a:	6862      	ldr	r2, [r4, #4]
 800777c:	42a3      	cmp	r3, r4
 800777e:	bf0c      	ite	eq
 8007780:	f8c8 2000 	streq.w	r2, [r8]
 8007784:	605a      	strne	r2, [r3, #4]
 8007786:	e7eb      	b.n	8007760 <_malloc_r+0xa8>
 8007788:	4623      	mov	r3, r4
 800778a:	6864      	ldr	r4, [r4, #4]
 800778c:	e7ae      	b.n	80076ec <_malloc_r+0x34>
 800778e:	463c      	mov	r4, r7
 8007790:	687f      	ldr	r7, [r7, #4]
 8007792:	e7b6      	b.n	8007702 <_malloc_r+0x4a>
 8007794:	461a      	mov	r2, r3
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	42a3      	cmp	r3, r4
 800779a:	d1fb      	bne.n	8007794 <_malloc_r+0xdc>
 800779c:	2300      	movs	r3, #0
 800779e:	6053      	str	r3, [r2, #4]
 80077a0:	e7de      	b.n	8007760 <_malloc_r+0xa8>
 80077a2:	230c      	movs	r3, #12
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 f80c 	bl	80077c4 <__malloc_unlock>
 80077ac:	e794      	b.n	80076d8 <_malloc_r+0x20>
 80077ae:	6005      	str	r5, [r0, #0]
 80077b0:	e7d6      	b.n	8007760 <_malloc_r+0xa8>
 80077b2:	bf00      	nop
 80077b4:	20000594 	.word	0x20000594

080077b8 <__malloc_lock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	@ (80077c0 <__malloc_lock+0x8>)
 80077ba:	f7ff b8ba 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	2000058c 	.word	0x2000058c

080077c4 <__malloc_unlock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__malloc_unlock+0x8>)
 80077c6:	f7ff b8b5 	b.w	8006934 <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	2000058c 	.word	0x2000058c

080077d0 <_Balloc>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	69c6      	ldr	r6, [r0, #28]
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	b976      	cbnz	r6, 80077f8 <_Balloc+0x28>
 80077da:	2010      	movs	r0, #16
 80077dc:	f7ff ff42 	bl	8007664 <malloc>
 80077e0:	4602      	mov	r2, r0
 80077e2:	61e0      	str	r0, [r4, #28]
 80077e4:	b920      	cbnz	r0, 80077f0 <_Balloc+0x20>
 80077e6:	4b18      	ldr	r3, [pc, #96]	@ (8007848 <_Balloc+0x78>)
 80077e8:	4818      	ldr	r0, [pc, #96]	@ (800784c <_Balloc+0x7c>)
 80077ea:	216b      	movs	r1, #107	@ 0x6b
 80077ec:	f000 fdae 	bl	800834c <__assert_func>
 80077f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f4:	6006      	str	r6, [r0, #0]
 80077f6:	60c6      	str	r6, [r0, #12]
 80077f8:	69e6      	ldr	r6, [r4, #28]
 80077fa:	68f3      	ldr	r3, [r6, #12]
 80077fc:	b183      	cbz	r3, 8007820 <_Balloc+0x50>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007806:	b9b8      	cbnz	r0, 8007838 <_Balloc+0x68>
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f605 	lsl.w	r6, r1, r5
 800780e:	1d72      	adds	r2, r6, #5
 8007810:	0092      	lsls	r2, r2, #2
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fdb8 	bl	8008388 <_calloc_r>
 8007818:	b160      	cbz	r0, 8007834 <_Balloc+0x64>
 800781a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800781e:	e00e      	b.n	800783e <_Balloc+0x6e>
 8007820:	2221      	movs	r2, #33	@ 0x21
 8007822:	2104      	movs	r1, #4
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fdaf 	bl	8008388 <_calloc_r>
 800782a:	69e3      	ldr	r3, [r4, #28]
 800782c:	60f0      	str	r0, [r6, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e4      	bne.n	80077fe <_Balloc+0x2e>
 8007834:	2000      	movs	r0, #0
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	6802      	ldr	r2, [r0, #0]
 800783a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800783e:	2300      	movs	r3, #0
 8007840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007844:	e7f7      	b.n	8007836 <_Balloc+0x66>
 8007846:	bf00      	nop
 8007848:	08009135 	.word	0x08009135
 800784c:	080091b5 	.word	0x080091b5

08007850 <_Bfree>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	69c6      	ldr	r6, [r0, #28]
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	b976      	cbnz	r6, 8007878 <_Bfree+0x28>
 800785a:	2010      	movs	r0, #16
 800785c:	f7ff ff02 	bl	8007664 <malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	61e8      	str	r0, [r5, #28]
 8007864:	b920      	cbnz	r0, 8007870 <_Bfree+0x20>
 8007866:	4b09      	ldr	r3, [pc, #36]	@ (800788c <_Bfree+0x3c>)
 8007868:	4809      	ldr	r0, [pc, #36]	@ (8007890 <_Bfree+0x40>)
 800786a:	218f      	movs	r1, #143	@ 0x8f
 800786c:	f000 fd6e 	bl	800834c <__assert_func>
 8007870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007874:	6006      	str	r6, [r0, #0]
 8007876:	60c6      	str	r6, [r0, #12]
 8007878:	b13c      	cbz	r4, 800788a <_Bfree+0x3a>
 800787a:	69eb      	ldr	r3, [r5, #28]
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007884:	6021      	str	r1, [r4, #0]
 8007886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	08009135 	.word	0x08009135
 8007890:	080091b5 	.word	0x080091b5

08007894 <__multadd>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	690d      	ldr	r5, [r1, #16]
 800789a:	4607      	mov	r7, r0
 800789c:	460c      	mov	r4, r1
 800789e:	461e      	mov	r6, r3
 80078a0:	f101 0c14 	add.w	ip, r1, #20
 80078a4:	2000      	movs	r0, #0
 80078a6:	f8dc 3000 	ldr.w	r3, [ip]
 80078aa:	b299      	uxth	r1, r3
 80078ac:	fb02 6101 	mla	r1, r2, r1, r6
 80078b0:	0c1e      	lsrs	r6, r3, #16
 80078b2:	0c0b      	lsrs	r3, r1, #16
 80078b4:	fb02 3306 	mla	r3, r2, r6, r3
 80078b8:	b289      	uxth	r1, r1
 80078ba:	3001      	adds	r0, #1
 80078bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c0:	4285      	cmp	r5, r0
 80078c2:	f84c 1b04 	str.w	r1, [ip], #4
 80078c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ca:	dcec      	bgt.n	80078a6 <__multadd+0x12>
 80078cc:	b30e      	cbz	r6, 8007912 <__multadd+0x7e>
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dc19      	bgt.n	8007908 <__multadd+0x74>
 80078d4:	6861      	ldr	r1, [r4, #4]
 80078d6:	4638      	mov	r0, r7
 80078d8:	3101      	adds	r1, #1
 80078da:	f7ff ff79 	bl	80077d0 <_Balloc>
 80078de:	4680      	mov	r8, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__multadd+0x5a>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <__multadd+0x84>)
 80078e6:	480d      	ldr	r0, [pc, #52]	@ (800791c <__multadd+0x88>)
 80078e8:	21ba      	movs	r1, #186	@ 0xba
 80078ea:	f000 fd2f 	bl	800834c <__assert_func>
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	3202      	adds	r2, #2
 80078f2:	f104 010c 	add.w	r1, r4, #12
 80078f6:	0092      	lsls	r2, r2, #2
 80078f8:	300c      	adds	r0, #12
 80078fa:	f000 fd19 	bl	8008330 <memcpy>
 80078fe:	4621      	mov	r1, r4
 8007900:	4638      	mov	r0, r7
 8007902:	f7ff ffa5 	bl	8007850 <_Bfree>
 8007906:	4644      	mov	r4, r8
 8007908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800790c:	3501      	adds	r5, #1
 800790e:	615e      	str	r6, [r3, #20]
 8007910:	6125      	str	r5, [r4, #16]
 8007912:	4620      	mov	r0, r4
 8007914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007918:	080091a4 	.word	0x080091a4
 800791c:	080091b5 	.word	0x080091b5

08007920 <__hi0bits>:
 8007920:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007924:	4603      	mov	r3, r0
 8007926:	bf36      	itet	cc
 8007928:	0403      	lslcc	r3, r0, #16
 800792a:	2000      	movcs	r0, #0
 800792c:	2010      	movcc	r0, #16
 800792e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007932:	bf3c      	itt	cc
 8007934:	021b      	lslcc	r3, r3, #8
 8007936:	3008      	addcc	r0, #8
 8007938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800793c:	bf3c      	itt	cc
 800793e:	011b      	lslcc	r3, r3, #4
 8007940:	3004      	addcc	r0, #4
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007946:	bf3c      	itt	cc
 8007948:	009b      	lslcc	r3, r3, #2
 800794a:	3002      	addcc	r0, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	db05      	blt.n	800795c <__hi0bits+0x3c>
 8007950:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007954:	f100 0001 	add.w	r0, r0, #1
 8007958:	bf08      	it	eq
 800795a:	2020      	moveq	r0, #32
 800795c:	4770      	bx	lr

0800795e <__lo0bits>:
 800795e:	6803      	ldr	r3, [r0, #0]
 8007960:	4602      	mov	r2, r0
 8007962:	f013 0007 	ands.w	r0, r3, #7
 8007966:	d00b      	beq.n	8007980 <__lo0bits+0x22>
 8007968:	07d9      	lsls	r1, r3, #31
 800796a:	d421      	bmi.n	80079b0 <__lo0bits+0x52>
 800796c:	0798      	lsls	r0, r3, #30
 800796e:	bf49      	itett	mi
 8007970:	085b      	lsrmi	r3, r3, #1
 8007972:	089b      	lsrpl	r3, r3, #2
 8007974:	2001      	movmi	r0, #1
 8007976:	6013      	strmi	r3, [r2, #0]
 8007978:	bf5c      	itt	pl
 800797a:	6013      	strpl	r3, [r2, #0]
 800797c:	2002      	movpl	r0, #2
 800797e:	4770      	bx	lr
 8007980:	b299      	uxth	r1, r3
 8007982:	b909      	cbnz	r1, 8007988 <__lo0bits+0x2a>
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	2010      	movs	r0, #16
 8007988:	b2d9      	uxtb	r1, r3
 800798a:	b909      	cbnz	r1, 8007990 <__lo0bits+0x32>
 800798c:	3008      	adds	r0, #8
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	0719      	lsls	r1, r3, #28
 8007992:	bf04      	itt	eq
 8007994:	091b      	lsreq	r3, r3, #4
 8007996:	3004      	addeq	r0, #4
 8007998:	0799      	lsls	r1, r3, #30
 800799a:	bf04      	itt	eq
 800799c:	089b      	lsreq	r3, r3, #2
 800799e:	3002      	addeq	r0, #2
 80079a0:	07d9      	lsls	r1, r3, #31
 80079a2:	d403      	bmi.n	80079ac <__lo0bits+0x4e>
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	f100 0001 	add.w	r0, r0, #1
 80079aa:	d003      	beq.n	80079b4 <__lo0bits+0x56>
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4770      	bx	lr
 80079b0:	2000      	movs	r0, #0
 80079b2:	4770      	bx	lr
 80079b4:	2020      	movs	r0, #32
 80079b6:	4770      	bx	lr

080079b8 <__i2b>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	460c      	mov	r4, r1
 80079bc:	2101      	movs	r1, #1
 80079be:	f7ff ff07 	bl	80077d0 <_Balloc>
 80079c2:	4602      	mov	r2, r0
 80079c4:	b928      	cbnz	r0, 80079d2 <__i2b+0x1a>
 80079c6:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <__i2b+0x24>)
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <__i2b+0x28>)
 80079ca:	f240 1145 	movw	r1, #325	@ 0x145
 80079ce:	f000 fcbd 	bl	800834c <__assert_func>
 80079d2:	2301      	movs	r3, #1
 80079d4:	6144      	str	r4, [r0, #20]
 80079d6:	6103      	str	r3, [r0, #16]
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	080091a4 	.word	0x080091a4
 80079e0:	080091b5 	.word	0x080091b5

080079e4 <__multiply>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4614      	mov	r4, r2
 80079ea:	690a      	ldr	r2, [r1, #16]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	bfa8      	it	ge
 80079f2:	4623      	movge	r3, r4
 80079f4:	460f      	mov	r7, r1
 80079f6:	bfa4      	itt	ge
 80079f8:	460c      	movge	r4, r1
 80079fa:	461f      	movge	r7, r3
 80079fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a04:	68a3      	ldr	r3, [r4, #8]
 8007a06:	6861      	ldr	r1, [r4, #4]
 8007a08:	eb0a 0609 	add.w	r6, sl, r9
 8007a0c:	42b3      	cmp	r3, r6
 8007a0e:	b085      	sub	sp, #20
 8007a10:	bfb8      	it	lt
 8007a12:	3101      	addlt	r1, #1
 8007a14:	f7ff fedc 	bl	80077d0 <_Balloc>
 8007a18:	b930      	cbnz	r0, 8007a28 <__multiply+0x44>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	4b44      	ldr	r3, [pc, #272]	@ (8007b30 <__multiply+0x14c>)
 8007a1e:	4845      	ldr	r0, [pc, #276]	@ (8007b34 <__multiply+0x150>)
 8007a20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a24:	f000 fc92 	bl	800834c <__assert_func>
 8007a28:	f100 0514 	add.w	r5, r0, #20
 8007a2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a30:	462b      	mov	r3, r5
 8007a32:	2200      	movs	r2, #0
 8007a34:	4543      	cmp	r3, r8
 8007a36:	d321      	bcc.n	8007a7c <__multiply+0x98>
 8007a38:	f107 0114 	add.w	r1, r7, #20
 8007a3c:	f104 0214 	add.w	r2, r4, #20
 8007a40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	1b13      	subs	r3, r2, r4
 8007a4c:	3b15      	subs	r3, #21
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	3304      	adds	r3, #4
 8007a54:	f104 0715 	add.w	r7, r4, #21
 8007a58:	42ba      	cmp	r2, r7
 8007a5a:	bf38      	it	cc
 8007a5c:	2304      	movcc	r3, #4
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	9103      	str	r1, [sp, #12]
 8007a64:	428b      	cmp	r3, r1
 8007a66:	d80c      	bhi.n	8007a82 <__multiply+0x9e>
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	dd03      	ble.n	8007a74 <__multiply+0x90>
 8007a6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d05b      	beq.n	8007b2c <__multiply+0x148>
 8007a74:	6106      	str	r6, [r0, #16]
 8007a76:	b005      	add	sp, #20
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	f843 2b04 	str.w	r2, [r3], #4
 8007a80:	e7d8      	b.n	8007a34 <__multiply+0x50>
 8007a82:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a86:	f1ba 0f00 	cmp.w	sl, #0
 8007a8a:	d024      	beq.n	8007ad6 <__multiply+0xf2>
 8007a8c:	f104 0e14 	add.w	lr, r4, #20
 8007a90:	46a9      	mov	r9, r5
 8007a92:	f04f 0c00 	mov.w	ip, #0
 8007a96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007a9e:	fa1f fb87 	uxth.w	fp, r7
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aa8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007aac:	f8d9 7000 	ldr.w	r7, [r9]
 8007ab0:	4463      	add	r3, ip
 8007ab2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ab6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007aba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ac4:	4572      	cmp	r2, lr
 8007ac6:	f849 3b04 	str.w	r3, [r9], #4
 8007aca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ace:	d8e2      	bhi.n	8007a96 <__multiply+0xb2>
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	f845 c003 	str.w	ip, [r5, r3]
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007adc:	3104      	adds	r1, #4
 8007ade:	f1b9 0f00 	cmp.w	r9, #0
 8007ae2:	d021      	beq.n	8007b28 <__multiply+0x144>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	f104 0c14 	add.w	ip, r4, #20
 8007aea:	46ae      	mov	lr, r5
 8007aec:	f04f 0a00 	mov.w	sl, #0
 8007af0:	f8bc b000 	ldrh.w	fp, [ip]
 8007af4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007af8:	fb09 770b 	mla	r7, r9, fp, r7
 8007afc:	4457      	add	r7, sl
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b04:	f84e 3b04 	str.w	r3, [lr], #4
 8007b08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b10:	f8be 3000 	ldrh.w	r3, [lr]
 8007b14:	fb09 330a 	mla	r3, r9, sl, r3
 8007b18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b1c:	4562      	cmp	r2, ip
 8007b1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b22:	d8e5      	bhi.n	8007af0 <__multiply+0x10c>
 8007b24:	9f01      	ldr	r7, [sp, #4]
 8007b26:	51eb      	str	r3, [r5, r7]
 8007b28:	3504      	adds	r5, #4
 8007b2a:	e799      	b.n	8007a60 <__multiply+0x7c>
 8007b2c:	3e01      	subs	r6, #1
 8007b2e:	e79b      	b.n	8007a68 <__multiply+0x84>
 8007b30:	080091a4 	.word	0x080091a4
 8007b34:	080091b5 	.word	0x080091b5

08007b38 <__pow5mult>:
 8007b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	4615      	mov	r5, r2
 8007b3e:	f012 0203 	ands.w	r2, r2, #3
 8007b42:	4607      	mov	r7, r0
 8007b44:	460e      	mov	r6, r1
 8007b46:	d007      	beq.n	8007b58 <__pow5mult+0x20>
 8007b48:	4c25      	ldr	r4, [pc, #148]	@ (8007be0 <__pow5mult+0xa8>)
 8007b4a:	3a01      	subs	r2, #1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b52:	f7ff fe9f 	bl	8007894 <__multadd>
 8007b56:	4606      	mov	r6, r0
 8007b58:	10ad      	asrs	r5, r5, #2
 8007b5a:	d03d      	beq.n	8007bd8 <__pow5mult+0xa0>
 8007b5c:	69fc      	ldr	r4, [r7, #28]
 8007b5e:	b97c      	cbnz	r4, 8007b80 <__pow5mult+0x48>
 8007b60:	2010      	movs	r0, #16
 8007b62:	f7ff fd7f 	bl	8007664 <malloc>
 8007b66:	4602      	mov	r2, r0
 8007b68:	61f8      	str	r0, [r7, #28]
 8007b6a:	b928      	cbnz	r0, 8007b78 <__pow5mult+0x40>
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007be4 <__pow5mult+0xac>)
 8007b6e:	481e      	ldr	r0, [pc, #120]	@ (8007be8 <__pow5mult+0xb0>)
 8007b70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b74:	f000 fbea 	bl	800834c <__assert_func>
 8007b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	60c4      	str	r4, [r0, #12]
 8007b80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b88:	b94c      	cbnz	r4, 8007b9e <__pow5mult+0x66>
 8007b8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f7ff ff12 	bl	80079b8 <__i2b>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	07eb      	lsls	r3, r5, #31
 8007ba4:	d50a      	bpl.n	8007bbc <__pow5mult+0x84>
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4638      	mov	r0, r7
 8007bac:	f7ff ff1a 	bl	80079e4 <__multiply>
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff fe4b 	bl	8007850 <_Bfree>
 8007bba:	4646      	mov	r6, r8
 8007bbc:	106d      	asrs	r5, r5, #1
 8007bbe:	d00b      	beq.n	8007bd8 <__pow5mult+0xa0>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	b938      	cbnz	r0, 8007bd4 <__pow5mult+0x9c>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ff0b 	bl	80079e4 <__multiply>
 8007bce:	6020      	str	r0, [r4, #0]
 8007bd0:	f8c0 9000 	str.w	r9, [r0]
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	e7e4      	b.n	8007ba2 <__pow5mult+0x6a>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bde:	bf00      	nop
 8007be0:	08009210 	.word	0x08009210
 8007be4:	08009135 	.word	0x08009135
 8007be8:	080091b5 	.word	0x080091b5

08007bec <__lshift>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	6849      	ldr	r1, [r1, #4]
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	4691      	mov	r9, r2
 8007c00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c04:	f108 0601 	add.w	r6, r8, #1
 8007c08:	42b3      	cmp	r3, r6
 8007c0a:	db0b      	blt.n	8007c24 <__lshift+0x38>
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff fddf 	bl	80077d0 <_Balloc>
 8007c12:	4605      	mov	r5, r0
 8007c14:	b948      	cbnz	r0, 8007c2a <__lshift+0x3e>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4b28      	ldr	r3, [pc, #160]	@ (8007cbc <__lshift+0xd0>)
 8007c1a:	4829      	ldr	r0, [pc, #164]	@ (8007cc0 <__lshift+0xd4>)
 8007c1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c20:	f000 fb94 	bl	800834c <__assert_func>
 8007c24:	3101      	adds	r1, #1
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	e7ee      	b.n	8007c08 <__lshift+0x1c>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f100 0114 	add.w	r1, r0, #20
 8007c30:	f100 0210 	add.w	r2, r0, #16
 8007c34:	4618      	mov	r0, r3
 8007c36:	4553      	cmp	r3, sl
 8007c38:	db33      	blt.n	8007ca2 <__lshift+0xb6>
 8007c3a:	6920      	ldr	r0, [r4, #16]
 8007c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	f019 091f 	ands.w	r9, r9, #31
 8007c48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c50:	d02b      	beq.n	8007caa <__lshift+0xbe>
 8007c52:	f1c9 0e20 	rsb	lr, r9, #32
 8007c56:	468a      	mov	sl, r1
 8007c58:	2200      	movs	r2, #0
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c60:	4310      	orrs	r0, r2
 8007c62:	f84a 0b04 	str.w	r0, [sl], #4
 8007c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6a:	459c      	cmp	ip, r3
 8007c6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c70:	d8f3      	bhi.n	8007c5a <__lshift+0x6e>
 8007c72:	ebac 0304 	sub.w	r3, ip, r4
 8007c76:	3b15      	subs	r3, #21
 8007c78:	f023 0303 	bic.w	r3, r3, #3
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	f104 0015 	add.w	r0, r4, #21
 8007c82:	4584      	cmp	ip, r0
 8007c84:	bf38      	it	cc
 8007c86:	2304      	movcc	r3, #4
 8007c88:	50ca      	str	r2, [r1, r3]
 8007c8a:	b10a      	cbz	r2, 8007c90 <__lshift+0xa4>
 8007c8c:	f108 0602 	add.w	r6, r8, #2
 8007c90:	3e01      	subs	r6, #1
 8007c92:	4638      	mov	r0, r7
 8007c94:	612e      	str	r6, [r5, #16]
 8007c96:	4621      	mov	r1, r4
 8007c98:	f7ff fdda 	bl	8007850 <_Bfree>
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	e7c5      	b.n	8007c36 <__lshift+0x4a>
 8007caa:	3904      	subs	r1, #4
 8007cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cb4:	459c      	cmp	ip, r3
 8007cb6:	d8f9      	bhi.n	8007cac <__lshift+0xc0>
 8007cb8:	e7ea      	b.n	8007c90 <__lshift+0xa4>
 8007cba:	bf00      	nop
 8007cbc:	080091a4 	.word	0x080091a4
 8007cc0:	080091b5 	.word	0x080091b5

08007cc4 <__mcmp>:
 8007cc4:	690a      	ldr	r2, [r1, #16]
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6900      	ldr	r0, [r0, #16]
 8007cca:	1a80      	subs	r0, r0, r2
 8007ccc:	b530      	push	{r4, r5, lr}
 8007cce:	d10e      	bne.n	8007cee <__mcmp+0x2a>
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	3114      	adds	r1, #20
 8007cd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce4:	4295      	cmp	r5, r2
 8007ce6:	d003      	beq.n	8007cf0 <__mcmp+0x2c>
 8007ce8:	d205      	bcs.n	8007cf6 <__mcmp+0x32>
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d3f3      	bcc.n	8007cdc <__mcmp+0x18>
 8007cf4:	e7fb      	b.n	8007cee <__mcmp+0x2a>
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e7f9      	b.n	8007cee <__mcmp+0x2a>
	...

08007cfc <__mdiff>:
 8007cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	4689      	mov	r9, r1
 8007d02:	4606      	mov	r6, r0
 8007d04:	4611      	mov	r1, r2
 8007d06:	4648      	mov	r0, r9
 8007d08:	4614      	mov	r4, r2
 8007d0a:	f7ff ffdb 	bl	8007cc4 <__mcmp>
 8007d0e:	1e05      	subs	r5, r0, #0
 8007d10:	d112      	bne.n	8007d38 <__mdiff+0x3c>
 8007d12:	4629      	mov	r1, r5
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff fd5b 	bl	80077d0 <_Balloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	b928      	cbnz	r0, 8007d2a <__mdiff+0x2e>
 8007d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e1c <__mdiff+0x120>)
 8007d20:	f240 2137 	movw	r1, #567	@ 0x237
 8007d24:	483e      	ldr	r0, [pc, #248]	@ (8007e20 <__mdiff+0x124>)
 8007d26:	f000 fb11 	bl	800834c <__assert_func>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d30:	4610      	mov	r0, r2
 8007d32:	b003      	add	sp, #12
 8007d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d38:	bfbc      	itt	lt
 8007d3a:	464b      	movlt	r3, r9
 8007d3c:	46a1      	movlt	r9, r4
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d44:	bfba      	itte	lt
 8007d46:	461c      	movlt	r4, r3
 8007d48:	2501      	movlt	r5, #1
 8007d4a:	2500      	movge	r5, #0
 8007d4c:	f7ff fd40 	bl	80077d0 <_Balloc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	b918      	cbnz	r0, 8007d5c <__mdiff+0x60>
 8007d54:	4b31      	ldr	r3, [pc, #196]	@ (8007e1c <__mdiff+0x120>)
 8007d56:	f240 2145 	movw	r1, #581	@ 0x245
 8007d5a:	e7e3      	b.n	8007d24 <__mdiff+0x28>
 8007d5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d60:	6926      	ldr	r6, [r4, #16]
 8007d62:	60c5      	str	r5, [r0, #12]
 8007d64:	f109 0310 	add.w	r3, r9, #16
 8007d68:	f109 0514 	add.w	r5, r9, #20
 8007d6c:	f104 0e14 	add.w	lr, r4, #20
 8007d70:	f100 0b14 	add.w	fp, r0, #20
 8007d74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	46d9      	mov	r9, fp
 8007d80:	f04f 0c00 	mov.w	ip, #0
 8007d84:	9b01      	ldr	r3, [sp, #4]
 8007d86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	fa1f f38a 	uxth.w	r3, sl
 8007d94:	4619      	mov	r1, r3
 8007d96:	b283      	uxth	r3, r0
 8007d98:	1acb      	subs	r3, r1, r3
 8007d9a:	0c00      	lsrs	r0, r0, #16
 8007d9c:	4463      	add	r3, ip
 8007d9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007da2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dac:	4576      	cmp	r6, lr
 8007dae:	f849 3b04 	str.w	r3, [r9], #4
 8007db2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007db6:	d8e5      	bhi.n	8007d84 <__mdiff+0x88>
 8007db8:	1b33      	subs	r3, r6, r4
 8007dba:	3b15      	subs	r3, #21
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	3415      	adds	r4, #21
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	42a6      	cmp	r6, r4
 8007dc6:	bf38      	it	cc
 8007dc8:	2304      	movcc	r3, #4
 8007dca:	441d      	add	r5, r3
 8007dcc:	445b      	add	r3, fp
 8007dce:	461e      	mov	r6, r3
 8007dd0:	462c      	mov	r4, r5
 8007dd2:	4544      	cmp	r4, r8
 8007dd4:	d30e      	bcc.n	8007df4 <__mdiff+0xf8>
 8007dd6:	f108 0103 	add.w	r1, r8, #3
 8007dda:	1b49      	subs	r1, r1, r5
 8007ddc:	f021 0103 	bic.w	r1, r1, #3
 8007de0:	3d03      	subs	r5, #3
 8007de2:	45a8      	cmp	r8, r5
 8007de4:	bf38      	it	cc
 8007de6:	2100      	movcc	r1, #0
 8007de8:	440b      	add	r3, r1
 8007dea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dee:	b191      	cbz	r1, 8007e16 <__mdiff+0x11a>
 8007df0:	6117      	str	r7, [r2, #16]
 8007df2:	e79d      	b.n	8007d30 <__mdiff+0x34>
 8007df4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007df8:	46e6      	mov	lr, ip
 8007dfa:	0c08      	lsrs	r0, r1, #16
 8007dfc:	fa1c fc81 	uxtah	ip, ip, r1
 8007e00:	4471      	add	r1, lr
 8007e02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e06:	b289      	uxth	r1, r1
 8007e08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e0c:	f846 1b04 	str.w	r1, [r6], #4
 8007e10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e14:	e7dd      	b.n	8007dd2 <__mdiff+0xd6>
 8007e16:	3f01      	subs	r7, #1
 8007e18:	e7e7      	b.n	8007dea <__mdiff+0xee>
 8007e1a:	bf00      	nop
 8007e1c:	080091a4 	.word	0x080091a4
 8007e20:	080091b5 	.word	0x080091b5

08007e24 <__d2b>:
 8007e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	460f      	mov	r7, r1
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	ec59 8b10 	vmov	r8, r9, d0
 8007e30:	4616      	mov	r6, r2
 8007e32:	f7ff fccd 	bl	80077d0 <_Balloc>
 8007e36:	4604      	mov	r4, r0
 8007e38:	b930      	cbnz	r0, 8007e48 <__d2b+0x24>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b23      	ldr	r3, [pc, #140]	@ (8007ecc <__d2b+0xa8>)
 8007e3e:	4824      	ldr	r0, [pc, #144]	@ (8007ed0 <__d2b+0xac>)
 8007e40:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e44:	f000 fa82 	bl	800834c <__assert_func>
 8007e48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e50:	b10d      	cbz	r5, 8007e56 <__d2b+0x32>
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	f1b8 0300 	subs.w	r3, r8, #0
 8007e5c:	d023      	beq.n	8007ea6 <__d2b+0x82>
 8007e5e:	4668      	mov	r0, sp
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	f7ff fd7c 	bl	800795e <__lo0bits>
 8007e66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e6a:	b1d0      	cbz	r0, 8007ea2 <__d2b+0x7e>
 8007e6c:	f1c0 0320 	rsb	r3, r0, #32
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	430b      	orrs	r3, r1
 8007e76:	40c2      	lsrs	r2, r0
 8007e78:	6163      	str	r3, [r4, #20]
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	61a3      	str	r3, [r4, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2201      	moveq	r2, #1
 8007e86:	2202      	movne	r2, #2
 8007e88:	6122      	str	r2, [r4, #16]
 8007e8a:	b1a5      	cbz	r5, 8007eb6 <__d2b+0x92>
 8007e8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e90:	4405      	add	r5, r0
 8007e92:	603d      	str	r5, [r7, #0]
 8007e94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e98:	6030      	str	r0, [r6, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	b003      	add	sp, #12
 8007e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea2:	6161      	str	r1, [r4, #20]
 8007ea4:	e7ea      	b.n	8007e7c <__d2b+0x58>
 8007ea6:	a801      	add	r0, sp, #4
 8007ea8:	f7ff fd59 	bl	800795e <__lo0bits>
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	6163      	str	r3, [r4, #20]
 8007eb0:	3020      	adds	r0, #32
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	e7e8      	b.n	8007e88 <__d2b+0x64>
 8007eb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ebe:	6038      	str	r0, [r7, #0]
 8007ec0:	6918      	ldr	r0, [r3, #16]
 8007ec2:	f7ff fd2d 	bl	8007920 <__hi0bits>
 8007ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eca:	e7e5      	b.n	8007e98 <__d2b+0x74>
 8007ecc:	080091a4 	.word	0x080091a4
 8007ed0:	080091b5 	.word	0x080091b5

08007ed4 <__ssputs_r>:
 8007ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	688e      	ldr	r6, [r1, #8]
 8007eda:	461f      	mov	r7, r3
 8007edc:	42be      	cmp	r6, r7
 8007ede:	680b      	ldr	r3, [r1, #0]
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4690      	mov	r8, r2
 8007ee6:	d82d      	bhi.n	8007f44 <__ssputs_r+0x70>
 8007ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ef0:	d026      	beq.n	8007f40 <__ssputs_r+0x6c>
 8007ef2:	6965      	ldr	r5, [r4, #20]
 8007ef4:	6909      	ldr	r1, [r1, #16]
 8007ef6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007efa:	eba3 0901 	sub.w	r9, r3, r1
 8007efe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f02:	1c7b      	adds	r3, r7, #1
 8007f04:	444b      	add	r3, r9
 8007f06:	106d      	asrs	r5, r5, #1
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	bf38      	it	cc
 8007f0c:	461d      	movcc	r5, r3
 8007f0e:	0553      	lsls	r3, r2, #21
 8007f10:	d527      	bpl.n	8007f62 <__ssputs_r+0x8e>
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7ff fbd0 	bl	80076b8 <_malloc_r>
 8007f18:	4606      	mov	r6, r0
 8007f1a:	b360      	cbz	r0, 8007f76 <__ssputs_r+0xa2>
 8007f1c:	6921      	ldr	r1, [r4, #16]
 8007f1e:	464a      	mov	r2, r9
 8007f20:	f000 fa06 	bl	8008330 <memcpy>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	6126      	str	r6, [r4, #16]
 8007f32:	6165      	str	r5, [r4, #20]
 8007f34:	444e      	add	r6, r9
 8007f36:	eba5 0509 	sub.w	r5, r5, r9
 8007f3a:	6026      	str	r6, [r4, #0]
 8007f3c:	60a5      	str	r5, [r4, #8]
 8007f3e:	463e      	mov	r6, r7
 8007f40:	42be      	cmp	r6, r7
 8007f42:	d900      	bls.n	8007f46 <__ssputs_r+0x72>
 8007f44:	463e      	mov	r6, r7
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	f000 f9c6 	bl	80082dc <memmove>
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	1b9b      	subs	r3, r3, r6
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	4433      	add	r3, r6
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	462a      	mov	r2, r5
 8007f64:	f000 fa36 	bl	80083d4 <_realloc_r>
 8007f68:	4606      	mov	r6, r0
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d1e0      	bne.n	8007f30 <__ssputs_r+0x5c>
 8007f6e:	6921      	ldr	r1, [r4, #16]
 8007f70:	4650      	mov	r0, sl
 8007f72:	f7ff fb2d 	bl	80075d0 <_free_r>
 8007f76:	230c      	movs	r3, #12
 8007f78:	f8ca 3000 	str.w	r3, [sl]
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	e7e9      	b.n	8007f5e <__ssputs_r+0x8a>
	...

08007f8c <_svfiprintf_r>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	4698      	mov	r8, r3
 8007f92:	898b      	ldrh	r3, [r1, #12]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	b09d      	sub	sp, #116	@ 0x74
 8007f98:	4607      	mov	r7, r0
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	d510      	bpl.n	8007fc2 <_svfiprintf_r+0x36>
 8007fa0:	690b      	ldr	r3, [r1, #16]
 8007fa2:	b973      	cbnz	r3, 8007fc2 <_svfiprintf_r+0x36>
 8007fa4:	2140      	movs	r1, #64	@ 0x40
 8007fa6:	f7ff fb87 	bl	80076b8 <_malloc_r>
 8007faa:	6028      	str	r0, [r5, #0]
 8007fac:	6128      	str	r0, [r5, #16]
 8007fae:	b930      	cbnz	r0, 8007fbe <_svfiprintf_r+0x32>
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	b01d      	add	sp, #116	@ 0x74
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	2340      	movs	r3, #64	@ 0x40
 8007fc0:	616b      	str	r3, [r5, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc6:	2320      	movs	r3, #32
 8007fc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd0:	2330      	movs	r3, #48	@ 0x30
 8007fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008170 <_svfiprintf_r+0x1e4>
 8007fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fda:	f04f 0901 	mov.w	r9, #1
 8007fde:	4623      	mov	r3, r4
 8007fe0:	469a      	mov	sl, r3
 8007fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe6:	b10a      	cbz	r2, 8007fec <_svfiprintf_r+0x60>
 8007fe8:	2a25      	cmp	r2, #37	@ 0x25
 8007fea:	d1f9      	bne.n	8007fe0 <_svfiprintf_r+0x54>
 8007fec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff0:	d00b      	beq.n	800800a <_svfiprintf_r+0x7e>
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ff6b 	bl	8007ed4 <__ssputs_r>
 8007ffe:	3001      	adds	r0, #1
 8008000:	f000 80a7 	beq.w	8008152 <_svfiprintf_r+0x1c6>
 8008004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008006:	445a      	add	r2, fp
 8008008:	9209      	str	r2, [sp, #36]	@ 0x24
 800800a:	f89a 3000 	ldrb.w	r3, [sl]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 809f 	beq.w	8008152 <_svfiprintf_r+0x1c6>
 8008014:	2300      	movs	r3, #0
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801e:	f10a 0a01 	add.w	sl, sl, #1
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800802a:	931a      	str	r3, [sp, #104]	@ 0x68
 800802c:	4654      	mov	r4, sl
 800802e:	2205      	movs	r2, #5
 8008030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008034:	484e      	ldr	r0, [pc, #312]	@ (8008170 <_svfiprintf_r+0x1e4>)
 8008036:	f7f8 f8eb 	bl	8000210 <memchr>
 800803a:	9a04      	ldr	r2, [sp, #16]
 800803c:	b9d8      	cbnz	r0, 8008076 <_svfiprintf_r+0xea>
 800803e:	06d0      	lsls	r0, r2, #27
 8008040:	bf44      	itt	mi
 8008042:	2320      	movmi	r3, #32
 8008044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008048:	0711      	lsls	r1, r2, #28
 800804a:	bf44      	itt	mi
 800804c:	232b      	movmi	r3, #43	@ 0x2b
 800804e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b2a      	cmp	r3, #42	@ 0x2a
 8008058:	d015      	beq.n	8008086 <_svfiprintf_r+0xfa>
 800805a:	9a07      	ldr	r2, [sp, #28]
 800805c:	4654      	mov	r4, sl
 800805e:	2000      	movs	r0, #0
 8008060:	f04f 0c0a 	mov.w	ip, #10
 8008064:	4621      	mov	r1, r4
 8008066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806a:	3b30      	subs	r3, #48	@ 0x30
 800806c:	2b09      	cmp	r3, #9
 800806e:	d94b      	bls.n	8008108 <_svfiprintf_r+0x17c>
 8008070:	b1b0      	cbz	r0, 80080a0 <_svfiprintf_r+0x114>
 8008072:	9207      	str	r2, [sp, #28]
 8008074:	e014      	b.n	80080a0 <_svfiprintf_r+0x114>
 8008076:	eba0 0308 	sub.w	r3, r0, r8
 800807a:	fa09 f303 	lsl.w	r3, r9, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	46a2      	mov	sl, r4
 8008084:	e7d2      	b.n	800802c <_svfiprintf_r+0xa0>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9103      	str	r1, [sp, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfbb      	ittet	lt
 8008092:	425b      	neglt	r3, r3
 8008094:	f042 0202 	orrlt.w	r2, r2, #2
 8008098:	9307      	strge	r3, [sp, #28]
 800809a:	9307      	strlt	r3, [sp, #28]
 800809c:	bfb8      	it	lt
 800809e:	9204      	strlt	r2, [sp, #16]
 80080a0:	7823      	ldrb	r3, [r4, #0]
 80080a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a4:	d10a      	bne.n	80080bc <_svfiprintf_r+0x130>
 80080a6:	7863      	ldrb	r3, [r4, #1]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d132      	bne.n	8008112 <_svfiprintf_r+0x186>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	1d1a      	adds	r2, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	9203      	str	r2, [sp, #12]
 80080b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080b8:	3402      	adds	r4, #2
 80080ba:	9305      	str	r3, [sp, #20]
 80080bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008180 <_svfiprintf_r+0x1f4>
 80080c0:	7821      	ldrb	r1, [r4, #0]
 80080c2:	2203      	movs	r2, #3
 80080c4:	4650      	mov	r0, sl
 80080c6:	f7f8 f8a3 	bl	8000210 <memchr>
 80080ca:	b138      	cbz	r0, 80080dc <_svfiprintf_r+0x150>
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	eba0 000a 	sub.w	r0, r0, sl
 80080d2:	2240      	movs	r2, #64	@ 0x40
 80080d4:	4082      	lsls	r2, r0
 80080d6:	4313      	orrs	r3, r2
 80080d8:	3401      	adds	r4, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	4824      	ldr	r0, [pc, #144]	@ (8008174 <_svfiprintf_r+0x1e8>)
 80080e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080e6:	2206      	movs	r2, #6
 80080e8:	f7f8 f892 	bl	8000210 <memchr>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d036      	beq.n	800815e <_svfiprintf_r+0x1d2>
 80080f0:	4b21      	ldr	r3, [pc, #132]	@ (8008178 <_svfiprintf_r+0x1ec>)
 80080f2:	bb1b      	cbnz	r3, 800813c <_svfiprintf_r+0x1b0>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	3307      	adds	r3, #7
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	3308      	adds	r3, #8
 80080fe:	9303      	str	r3, [sp, #12]
 8008100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008102:	4433      	add	r3, r6
 8008104:	9309      	str	r3, [sp, #36]	@ 0x24
 8008106:	e76a      	b.n	8007fde <_svfiprintf_r+0x52>
 8008108:	fb0c 3202 	mla	r2, ip, r2, r3
 800810c:	460c      	mov	r4, r1
 800810e:	2001      	movs	r0, #1
 8008110:	e7a8      	b.n	8008064 <_svfiprintf_r+0xd8>
 8008112:	2300      	movs	r3, #0
 8008114:	3401      	adds	r4, #1
 8008116:	9305      	str	r3, [sp, #20]
 8008118:	4619      	mov	r1, r3
 800811a:	f04f 0c0a 	mov.w	ip, #10
 800811e:	4620      	mov	r0, r4
 8008120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008124:	3a30      	subs	r2, #48	@ 0x30
 8008126:	2a09      	cmp	r2, #9
 8008128:	d903      	bls.n	8008132 <_svfiprintf_r+0x1a6>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0c6      	beq.n	80080bc <_svfiprintf_r+0x130>
 800812e:	9105      	str	r1, [sp, #20]
 8008130:	e7c4      	b.n	80080bc <_svfiprintf_r+0x130>
 8008132:	fb0c 2101 	mla	r1, ip, r1, r2
 8008136:	4604      	mov	r4, r0
 8008138:	2301      	movs	r3, #1
 800813a:	e7f0      	b.n	800811e <_svfiprintf_r+0x192>
 800813c:	ab03      	add	r3, sp, #12
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	462a      	mov	r2, r5
 8008142:	4b0e      	ldr	r3, [pc, #56]	@ (800817c <_svfiprintf_r+0x1f0>)
 8008144:	a904      	add	r1, sp, #16
 8008146:	4638      	mov	r0, r7
 8008148:	f7fd fe98 	bl	8005e7c <_printf_float>
 800814c:	1c42      	adds	r2, r0, #1
 800814e:	4606      	mov	r6, r0
 8008150:	d1d6      	bne.n	8008100 <_svfiprintf_r+0x174>
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	065b      	lsls	r3, r3, #25
 8008156:	f53f af2d 	bmi.w	8007fb4 <_svfiprintf_r+0x28>
 800815a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800815c:	e72c      	b.n	8007fb8 <_svfiprintf_r+0x2c>
 800815e:	ab03      	add	r3, sp, #12
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	462a      	mov	r2, r5
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <_svfiprintf_r+0x1f0>)
 8008166:	a904      	add	r1, sp, #16
 8008168:	4638      	mov	r0, r7
 800816a:	f7fe f91f 	bl	80063ac <_printf_i>
 800816e:	e7ed      	b.n	800814c <_svfiprintf_r+0x1c0>
 8008170:	08009310 	.word	0x08009310
 8008174:	0800931a 	.word	0x0800931a
 8008178:	08005e7d 	.word	0x08005e7d
 800817c:	08007ed5 	.word	0x08007ed5
 8008180:	08009316 	.word	0x08009316

08008184 <__sflush_r>:
 8008184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	0716      	lsls	r6, r2, #28
 800818e:	4605      	mov	r5, r0
 8008190:	460c      	mov	r4, r1
 8008192:	d454      	bmi.n	800823e <__sflush_r+0xba>
 8008194:	684b      	ldr	r3, [r1, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dc02      	bgt.n	80081a0 <__sflush_r+0x1c>
 800819a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd48      	ble.n	8008232 <__sflush_r+0xae>
 80081a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	d045      	beq.n	8008232 <__sflush_r+0xae>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081ac:	682f      	ldr	r7, [r5, #0]
 80081ae:	6a21      	ldr	r1, [r4, #32]
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	d030      	beq.n	8008216 <__sflush_r+0x92>
 80081b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	0759      	lsls	r1, r3, #29
 80081ba:	d505      	bpl.n	80081c8 <__sflush_r+0x44>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081c2:	b10b      	cbz	r3, 80081c8 <__sflush_r+0x44>
 80081c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	2300      	movs	r3, #0
 80081ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081cc:	6a21      	ldr	r1, [r4, #32]
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b0      	blx	r6
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	d106      	bne.n	80081e6 <__sflush_r+0x62>
 80081d8:	6829      	ldr	r1, [r5, #0]
 80081da:	291d      	cmp	r1, #29
 80081dc:	d82b      	bhi.n	8008236 <__sflush_r+0xb2>
 80081de:	4a2a      	ldr	r2, [pc, #168]	@ (8008288 <__sflush_r+0x104>)
 80081e0:	410a      	asrs	r2, r1
 80081e2:	07d6      	lsls	r6, r2, #31
 80081e4:	d427      	bmi.n	8008236 <__sflush_r+0xb2>
 80081e6:	2200      	movs	r2, #0
 80081e8:	6062      	str	r2, [r4, #4]
 80081ea:	04d9      	lsls	r1, r3, #19
 80081ec:	6922      	ldr	r2, [r4, #16]
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	d504      	bpl.n	80081fc <__sflush_r+0x78>
 80081f2:	1c42      	adds	r2, r0, #1
 80081f4:	d101      	bne.n	80081fa <__sflush_r+0x76>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	b903      	cbnz	r3, 80081fc <__sflush_r+0x78>
 80081fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80081fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081fe:	602f      	str	r7, [r5, #0]
 8008200:	b1b9      	cbz	r1, 8008232 <__sflush_r+0xae>
 8008202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008206:	4299      	cmp	r1, r3
 8008208:	d002      	beq.n	8008210 <__sflush_r+0x8c>
 800820a:	4628      	mov	r0, r5
 800820c:	f7ff f9e0 	bl	80075d0 <_free_r>
 8008210:	2300      	movs	r3, #0
 8008212:	6363      	str	r3, [r4, #52]	@ 0x34
 8008214:	e00d      	b.n	8008232 <__sflush_r+0xae>
 8008216:	2301      	movs	r3, #1
 8008218:	4628      	mov	r0, r5
 800821a:	47b0      	blx	r6
 800821c:	4602      	mov	r2, r0
 800821e:	1c50      	adds	r0, r2, #1
 8008220:	d1c9      	bne.n	80081b6 <__sflush_r+0x32>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0c6      	beq.n	80081b6 <__sflush_r+0x32>
 8008228:	2b1d      	cmp	r3, #29
 800822a:	d001      	beq.n	8008230 <__sflush_r+0xac>
 800822c:	2b16      	cmp	r3, #22
 800822e:	d11e      	bne.n	800826e <__sflush_r+0xea>
 8008230:	602f      	str	r7, [r5, #0]
 8008232:	2000      	movs	r0, #0
 8008234:	e022      	b.n	800827c <__sflush_r+0xf8>
 8008236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800823a:	b21b      	sxth	r3, r3
 800823c:	e01b      	b.n	8008276 <__sflush_r+0xf2>
 800823e:	690f      	ldr	r7, [r1, #16]
 8008240:	2f00      	cmp	r7, #0
 8008242:	d0f6      	beq.n	8008232 <__sflush_r+0xae>
 8008244:	0793      	lsls	r3, r2, #30
 8008246:	680e      	ldr	r6, [r1, #0]
 8008248:	bf08      	it	eq
 800824a:	694b      	ldreq	r3, [r1, #20]
 800824c:	600f      	str	r7, [r1, #0]
 800824e:	bf18      	it	ne
 8008250:	2300      	movne	r3, #0
 8008252:	eba6 0807 	sub.w	r8, r6, r7
 8008256:	608b      	str	r3, [r1, #8]
 8008258:	f1b8 0f00 	cmp.w	r8, #0
 800825c:	dde9      	ble.n	8008232 <__sflush_r+0xae>
 800825e:	6a21      	ldr	r1, [r4, #32]
 8008260:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008262:	4643      	mov	r3, r8
 8008264:	463a      	mov	r2, r7
 8008266:	4628      	mov	r0, r5
 8008268:	47b0      	blx	r6
 800826a:	2800      	cmp	r0, #0
 800826c:	dc08      	bgt.n	8008280 <__sflush_r+0xfc>
 800826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	4407      	add	r7, r0
 8008282:	eba8 0800 	sub.w	r8, r8, r0
 8008286:	e7e7      	b.n	8008258 <__sflush_r+0xd4>
 8008288:	dfbffffe 	.word	0xdfbffffe

0800828c <_fflush_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b913      	cbnz	r3, 800829c <_fflush_r+0x10>
 8008296:	2500      	movs	r5, #0
 8008298:	4628      	mov	r0, r5
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	b118      	cbz	r0, 80082a6 <_fflush_r+0x1a>
 800829e:	6a03      	ldr	r3, [r0, #32]
 80082a0:	b90b      	cbnz	r3, 80082a6 <_fflush_r+0x1a>
 80082a2:	f7fe fa2f 	bl	8006704 <__sinit>
 80082a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f3      	beq.n	8008296 <_fflush_r+0xa>
 80082ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082b0:	07d0      	lsls	r0, r2, #31
 80082b2:	d404      	bmi.n	80082be <_fflush_r+0x32>
 80082b4:	0599      	lsls	r1, r3, #22
 80082b6:	d402      	bmi.n	80082be <_fflush_r+0x32>
 80082b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ba:	f7fe fb3a 	bl	8006932 <__retarget_lock_acquire_recursive>
 80082be:	4628      	mov	r0, r5
 80082c0:	4621      	mov	r1, r4
 80082c2:	f7ff ff5f 	bl	8008184 <__sflush_r>
 80082c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c8:	07da      	lsls	r2, r3, #31
 80082ca:	4605      	mov	r5, r0
 80082cc:	d4e4      	bmi.n	8008298 <_fflush_r+0xc>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d4e1      	bmi.n	8008298 <_fflush_r+0xc>
 80082d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082d6:	f7fe fb2d 	bl	8006934 <__retarget_lock_release_recursive>
 80082da:	e7dd      	b.n	8008298 <_fflush_r+0xc>

080082dc <memmove>:
 80082dc:	4288      	cmp	r0, r1
 80082de:	b510      	push	{r4, lr}
 80082e0:	eb01 0402 	add.w	r4, r1, r2
 80082e4:	d902      	bls.n	80082ec <memmove+0x10>
 80082e6:	4284      	cmp	r4, r0
 80082e8:	4623      	mov	r3, r4
 80082ea:	d807      	bhi.n	80082fc <memmove+0x20>
 80082ec:	1e43      	subs	r3, r0, #1
 80082ee:	42a1      	cmp	r1, r4
 80082f0:	d008      	beq.n	8008304 <memmove+0x28>
 80082f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082fa:	e7f8      	b.n	80082ee <memmove+0x12>
 80082fc:	4402      	add	r2, r0
 80082fe:	4601      	mov	r1, r0
 8008300:	428a      	cmp	r2, r1
 8008302:	d100      	bne.n	8008306 <memmove+0x2a>
 8008304:	bd10      	pop	{r4, pc}
 8008306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800830a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800830e:	e7f7      	b.n	8008300 <memmove+0x24>

08008310 <_sbrk_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	@ (800832c <_sbrk_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f9 ffa8 	bl	8002270 <_sbrk>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_sbrk_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_sbrk_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000588 	.word	0x20000588

08008330 <memcpy>:
 8008330:	440a      	add	r2, r1
 8008332:	4291      	cmp	r1, r2
 8008334:	f100 33ff 	add.w	r3, r0, #4294967295
 8008338:	d100      	bne.n	800833c <memcpy+0xc>
 800833a:	4770      	bx	lr
 800833c:	b510      	push	{r4, lr}
 800833e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008346:	4291      	cmp	r1, r2
 8008348:	d1f9      	bne.n	800833e <memcpy+0xe>
 800834a:	bd10      	pop	{r4, pc}

0800834c <__assert_func>:
 800834c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800834e:	4614      	mov	r4, r2
 8008350:	461a      	mov	r2, r3
 8008352:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <__assert_func+0x2c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4605      	mov	r5, r0
 8008358:	68d8      	ldr	r0, [r3, #12]
 800835a:	b954      	cbnz	r4, 8008372 <__assert_func+0x26>
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <__assert_func+0x30>)
 800835e:	461c      	mov	r4, r3
 8008360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008364:	9100      	str	r1, [sp, #0]
 8008366:	462b      	mov	r3, r5
 8008368:	4905      	ldr	r1, [pc, #20]	@ (8008380 <__assert_func+0x34>)
 800836a:	f000 f86f 	bl	800844c <fiprintf>
 800836e:	f000 f87f 	bl	8008470 <abort>
 8008372:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <__assert_func+0x38>)
 8008374:	e7f4      	b.n	8008360 <__assert_func+0x14>
 8008376:	bf00      	nop
 8008378:	20000040 	.word	0x20000040
 800837c:	08009366 	.word	0x08009366
 8008380:	08009338 	.word	0x08009338
 8008384:	0800932b 	.word	0x0800932b

08008388 <_calloc_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	fba1 5402 	umull	r5, r4, r1, r2
 800838e:	b93c      	cbnz	r4, 80083a0 <_calloc_r+0x18>
 8008390:	4629      	mov	r1, r5
 8008392:	f7ff f991 	bl	80076b8 <_malloc_r>
 8008396:	4606      	mov	r6, r0
 8008398:	b928      	cbnz	r0, 80083a6 <_calloc_r+0x1e>
 800839a:	2600      	movs	r6, #0
 800839c:	4630      	mov	r0, r6
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	220c      	movs	r2, #12
 80083a2:	6002      	str	r2, [r0, #0]
 80083a4:	e7f9      	b.n	800839a <_calloc_r+0x12>
 80083a6:	462a      	mov	r2, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7fe fa44 	bl	8006836 <memset>
 80083ae:	e7f5      	b.n	800839c <_calloc_r+0x14>

080083b0 <__ascii_mbtowc>:
 80083b0:	b082      	sub	sp, #8
 80083b2:	b901      	cbnz	r1, 80083b6 <__ascii_mbtowc+0x6>
 80083b4:	a901      	add	r1, sp, #4
 80083b6:	b142      	cbz	r2, 80083ca <__ascii_mbtowc+0x1a>
 80083b8:	b14b      	cbz	r3, 80083ce <__ascii_mbtowc+0x1e>
 80083ba:	7813      	ldrb	r3, [r2, #0]
 80083bc:	600b      	str	r3, [r1, #0]
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	1e10      	subs	r0, r2, #0
 80083c2:	bf18      	it	ne
 80083c4:	2001      	movne	r0, #1
 80083c6:	b002      	add	sp, #8
 80083c8:	4770      	bx	lr
 80083ca:	4610      	mov	r0, r2
 80083cc:	e7fb      	b.n	80083c6 <__ascii_mbtowc+0x16>
 80083ce:	f06f 0001 	mvn.w	r0, #1
 80083d2:	e7f8      	b.n	80083c6 <__ascii_mbtowc+0x16>

080083d4 <_realloc_r>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	4680      	mov	r8, r0
 80083da:	4615      	mov	r5, r2
 80083dc:	460c      	mov	r4, r1
 80083de:	b921      	cbnz	r1, 80083ea <_realloc_r+0x16>
 80083e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	4611      	mov	r1, r2
 80083e6:	f7ff b967 	b.w	80076b8 <_malloc_r>
 80083ea:	b92a      	cbnz	r2, 80083f8 <_realloc_r+0x24>
 80083ec:	f7ff f8f0 	bl	80075d0 <_free_r>
 80083f0:	2400      	movs	r4, #0
 80083f2:	4620      	mov	r0, r4
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	f000 f841 	bl	800847e <_malloc_usable_size_r>
 80083fc:	4285      	cmp	r5, r0
 80083fe:	4606      	mov	r6, r0
 8008400:	d802      	bhi.n	8008408 <_realloc_r+0x34>
 8008402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008406:	d8f4      	bhi.n	80083f2 <_realloc_r+0x1e>
 8008408:	4629      	mov	r1, r5
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff f954 	bl	80076b8 <_malloc_r>
 8008410:	4607      	mov	r7, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d0ec      	beq.n	80083f0 <_realloc_r+0x1c>
 8008416:	42b5      	cmp	r5, r6
 8008418:	462a      	mov	r2, r5
 800841a:	4621      	mov	r1, r4
 800841c:	bf28      	it	cs
 800841e:	4632      	movcs	r2, r6
 8008420:	f7ff ff86 	bl	8008330 <memcpy>
 8008424:	4621      	mov	r1, r4
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff f8d2 	bl	80075d0 <_free_r>
 800842c:	463c      	mov	r4, r7
 800842e:	e7e0      	b.n	80083f2 <_realloc_r+0x1e>

08008430 <__ascii_wctomb>:
 8008430:	4603      	mov	r3, r0
 8008432:	4608      	mov	r0, r1
 8008434:	b141      	cbz	r1, 8008448 <__ascii_wctomb+0x18>
 8008436:	2aff      	cmp	r2, #255	@ 0xff
 8008438:	d904      	bls.n	8008444 <__ascii_wctomb+0x14>
 800843a:	228a      	movs	r2, #138	@ 0x8a
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	4770      	bx	lr
 8008444:	700a      	strb	r2, [r1, #0]
 8008446:	2001      	movs	r0, #1
 8008448:	4770      	bx	lr
	...

0800844c <fiprintf>:
 800844c:	b40e      	push	{r1, r2, r3}
 800844e:	b503      	push	{r0, r1, lr}
 8008450:	4601      	mov	r1, r0
 8008452:	ab03      	add	r3, sp, #12
 8008454:	4805      	ldr	r0, [pc, #20]	@ (800846c <fiprintf+0x20>)
 8008456:	f853 2b04 	ldr.w	r2, [r3], #4
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f000 f83f 	bl	80084e0 <_vfiprintf_r>
 8008462:	b002      	add	sp, #8
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000040 	.word	0x20000040

08008470 <abort>:
 8008470:	b508      	push	{r3, lr}
 8008472:	2006      	movs	r0, #6
 8008474:	f000 fa08 	bl	8008888 <raise>
 8008478:	2001      	movs	r0, #1
 800847a:	f7f9 fe81 	bl	8002180 <_exit>

0800847e <_malloc_usable_size_r>:
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	1f18      	subs	r0, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfbc      	itt	lt
 8008488:	580b      	ldrlt	r3, [r1, r0]
 800848a:	18c0      	addlt	r0, r0, r3
 800848c:	4770      	bx	lr

0800848e <__sfputc_r>:
 800848e:	6893      	ldr	r3, [r2, #8]
 8008490:	3b01      	subs	r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	b410      	push	{r4}
 8008496:	6093      	str	r3, [r2, #8]
 8008498:	da08      	bge.n	80084ac <__sfputc_r+0x1e>
 800849a:	6994      	ldr	r4, [r2, #24]
 800849c:	42a3      	cmp	r3, r4
 800849e:	db01      	blt.n	80084a4 <__sfputc_r+0x16>
 80084a0:	290a      	cmp	r1, #10
 80084a2:	d103      	bne.n	80084ac <__sfputc_r+0x1e>
 80084a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a8:	f000 b932 	b.w	8008710 <__swbuf_r>
 80084ac:	6813      	ldr	r3, [r2, #0]
 80084ae:	1c58      	adds	r0, r3, #1
 80084b0:	6010      	str	r0, [r2, #0]
 80084b2:	7019      	strb	r1, [r3, #0]
 80084b4:	4608      	mov	r0, r1
 80084b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <__sfputs_r>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	4614      	mov	r4, r2
 80084c4:	18d5      	adds	r5, r2, r3
 80084c6:	42ac      	cmp	r4, r5
 80084c8:	d101      	bne.n	80084ce <__sfputs_r+0x12>
 80084ca:	2000      	movs	r0, #0
 80084cc:	e007      	b.n	80084de <__sfputs_r+0x22>
 80084ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d2:	463a      	mov	r2, r7
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff ffda 	bl	800848e <__sfputc_r>
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	d1f3      	bne.n	80084c6 <__sfputs_r+0xa>
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084e0 <_vfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460d      	mov	r5, r1
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	4614      	mov	r4, r2
 80084ea:	4698      	mov	r8, r3
 80084ec:	4606      	mov	r6, r0
 80084ee:	b118      	cbz	r0, 80084f8 <_vfiprintf_r+0x18>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <_vfiprintf_r+0x18>
 80084f4:	f7fe f906 	bl	8006704 <__sinit>
 80084f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d405      	bmi.n	800850a <_vfiprintf_r+0x2a>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	059a      	lsls	r2, r3, #22
 8008502:	d402      	bmi.n	800850a <_vfiprintf_r+0x2a>
 8008504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008506:	f7fe fa14 	bl	8006932 <__retarget_lock_acquire_recursive>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	071b      	lsls	r3, r3, #28
 800850e:	d501      	bpl.n	8008514 <_vfiprintf_r+0x34>
 8008510:	692b      	ldr	r3, [r5, #16]
 8008512:	b99b      	cbnz	r3, 800853c <_vfiprintf_r+0x5c>
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f000 f938 	bl	800878c <__swsetup_r>
 800851c:	b170      	cbz	r0, 800853c <_vfiprintf_r+0x5c>
 800851e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008520:	07dc      	lsls	r4, r3, #31
 8008522:	d504      	bpl.n	800852e <_vfiprintf_r+0x4e>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	@ 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4f7      	bmi.n	8008524 <_vfiprintf_r+0x44>
 8008534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008536:	f7fe f9fd 	bl	8006934 <__retarget_lock_release_recursive>
 800853a:	e7f3      	b.n	8008524 <_vfiprintf_r+0x44>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	@ 0x30
 800854c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086fc <_vfiprintf_r+0x21c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0x86>
 8008562:	2a25      	cmp	r2, #37	@ 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x7a>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xa4>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ffa2 	bl	80084bc <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80a7 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800857e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	@ 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 809f 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4853      	ldr	r0, [pc, #332]	@ (80086fc <_vfiprintf_r+0x21c>)
 80085b0:	f7f7 fe2e 	bl	8000210 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x110>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	@ 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x120>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	@ 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94b      	bls.n	8008682 <_vfiprintf_r+0x1a2>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x13a>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x13a>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xc6>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	@ 0x2e
 800861e:	d10a      	bne.n	8008636 <_vfiprintf_r+0x156>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	@ 0x2a
 8008624:	d132      	bne.n	800868c <_vfiprintf_r+0x1ac>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008632:	3402      	adds	r4, #2
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800870c <_vfiprintf_r+0x22c>
 800863a:	7821      	ldrb	r1, [r4, #0]
 800863c:	2203      	movs	r2, #3
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fde6 	bl	8000210 <memchr>
 8008644:	b138      	cbz	r0, 8008656 <_vfiprintf_r+0x176>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	2240      	movs	r2, #64	@ 0x40
 800864e:	4082      	lsls	r2, r0
 8008650:	4313      	orrs	r3, r2
 8008652:	3401      	adds	r4, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	4829      	ldr	r0, [pc, #164]	@ (8008700 <_vfiprintf_r+0x220>)
 800865c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008660:	2206      	movs	r2, #6
 8008662:	f7f7 fdd5 	bl	8000210 <memchr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d03f      	beq.n	80086ea <_vfiprintf_r+0x20a>
 800866a:	4b26      	ldr	r3, [pc, #152]	@ (8008704 <_vfiprintf_r+0x224>)
 800866c:	bb1b      	cbnz	r3, 80086b6 <_vfiprintf_r+0x1d6>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	3308      	adds	r3, #8
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867c:	443b      	add	r3, r7
 800867e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008680:	e76a      	b.n	8008558 <_vfiprintf_r+0x78>
 8008682:	fb0c 3202 	mla	r2, ip, r2, r3
 8008686:	460c      	mov	r4, r1
 8008688:	2001      	movs	r0, #1
 800868a:	e7a8      	b.n	80085de <_vfiprintf_r+0xfe>
 800868c:	2300      	movs	r3, #0
 800868e:	3401      	adds	r4, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	4619      	mov	r1, r3
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4620      	mov	r0, r4
 800869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869e:	3a30      	subs	r2, #48	@ 0x30
 80086a0:	2a09      	cmp	r2, #9
 80086a2:	d903      	bls.n	80086ac <_vfiprintf_r+0x1cc>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c6      	beq.n	8008636 <_vfiprintf_r+0x156>
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	e7c4      	b.n	8008636 <_vfiprintf_r+0x156>
 80086ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b0:	4604      	mov	r4, r0
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7f0      	b.n	8008698 <_vfiprintf_r+0x1b8>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <_vfiprintf_r+0x228>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7fd fbdb 	bl	8005e7c <_printf_float>
 80086c6:	4607      	mov	r7, r0
 80086c8:	1c78      	adds	r0, r7, #1
 80086ca:	d1d6      	bne.n	800867a <_vfiprintf_r+0x19a>
 80086cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ce:	07d9      	lsls	r1, r3, #31
 80086d0:	d405      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	059a      	lsls	r2, r3, #22
 80086d6:	d402      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086da:	f7fe f92b 	bl	8006934 <__retarget_lock_release_recursive>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	065b      	lsls	r3, r3, #25
 80086e2:	f53f af1f 	bmi.w	8008524 <_vfiprintf_r+0x44>
 80086e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e8:	e71e      	b.n	8008528 <_vfiprintf_r+0x48>
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	462a      	mov	r2, r5
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <_vfiprintf_r+0x228>)
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7fd fe59 	bl	80063ac <_printf_i>
 80086fa:	e7e4      	b.n	80086c6 <_vfiprintf_r+0x1e6>
 80086fc:	08009310 	.word	0x08009310
 8008700:	0800931a 	.word	0x0800931a
 8008704:	08005e7d 	.word	0x08005e7d
 8008708:	080084bd 	.word	0x080084bd
 800870c:	08009316 	.word	0x08009316

08008710 <__swbuf_r>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	460e      	mov	r6, r1
 8008714:	4614      	mov	r4, r2
 8008716:	4605      	mov	r5, r0
 8008718:	b118      	cbz	r0, 8008722 <__swbuf_r+0x12>
 800871a:	6a03      	ldr	r3, [r0, #32]
 800871c:	b90b      	cbnz	r3, 8008722 <__swbuf_r+0x12>
 800871e:	f7fd fff1 	bl	8006704 <__sinit>
 8008722:	69a3      	ldr	r3, [r4, #24]
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	071a      	lsls	r2, r3, #28
 800872a:	d501      	bpl.n	8008730 <__swbuf_r+0x20>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	b943      	cbnz	r3, 8008742 <__swbuf_r+0x32>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f82a 	bl	800878c <__swsetup_r>
 8008738:	b118      	cbz	r0, 8008742 <__swbuf_r+0x32>
 800873a:	f04f 37ff 	mov.w	r7, #4294967295
 800873e:	4638      	mov	r0, r7
 8008740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	1a98      	subs	r0, r3, r2
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	b2f6      	uxtb	r6, r6
 800874c:	4283      	cmp	r3, r0
 800874e:	4637      	mov	r7, r6
 8008750:	dc05      	bgt.n	800875e <__swbuf_r+0x4e>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f7ff fd99 	bl	800828c <_fflush_r>
 800875a:	2800      	cmp	r0, #0
 800875c:	d1ed      	bne.n	800873a <__swbuf_r+0x2a>
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	3b01      	subs	r3, #1
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	701e      	strb	r6, [r3, #0]
 800876c:	6962      	ldr	r2, [r4, #20]
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	429a      	cmp	r2, r3
 8008772:	d004      	beq.n	800877e <__swbuf_r+0x6e>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	07db      	lsls	r3, r3, #31
 8008778:	d5e1      	bpl.n	800873e <__swbuf_r+0x2e>
 800877a:	2e0a      	cmp	r6, #10
 800877c:	d1df      	bne.n	800873e <__swbuf_r+0x2e>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fd83 	bl	800828c <_fflush_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d0d9      	beq.n	800873e <__swbuf_r+0x2e>
 800878a:	e7d6      	b.n	800873a <__swbuf_r+0x2a>

0800878c <__swsetup_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4b29      	ldr	r3, [pc, #164]	@ (8008834 <__swsetup_r+0xa8>)
 8008790:	4605      	mov	r5, r0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	460c      	mov	r4, r1
 8008796:	b118      	cbz	r0, 80087a0 <__swsetup_r+0x14>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <__swsetup_r+0x14>
 800879c:	f7fd ffb2 	bl	8006704 <__sinit>
 80087a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a4:	0719      	lsls	r1, r3, #28
 80087a6:	d422      	bmi.n	80087ee <__swsetup_r+0x62>
 80087a8:	06da      	lsls	r2, r3, #27
 80087aa:	d407      	bmi.n	80087bc <__swsetup_r+0x30>
 80087ac:	2209      	movs	r2, #9
 80087ae:	602a      	str	r2, [r5, #0]
 80087b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	e033      	b.n	8008824 <__swsetup_r+0x98>
 80087bc:	0758      	lsls	r0, r3, #29
 80087be:	d512      	bpl.n	80087e6 <__swsetup_r+0x5a>
 80087c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087c2:	b141      	cbz	r1, 80087d6 <__swsetup_r+0x4a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__swsetup_r+0x46>
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7fe feff 	bl	80075d0 <_free_r>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	6063      	str	r3, [r4, #4]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b94b      	cbnz	r3, 8008806 <__swsetup_r+0x7a>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087fc:	d003      	beq.n	8008806 <__swsetup_r+0x7a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f883 	bl	800890c <__smakebuf_r>
 8008806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880a:	f013 0201 	ands.w	r2, r3, #1
 800880e:	d00a      	beq.n	8008826 <__swsetup_r+0x9a>
 8008810:	2200      	movs	r2, #0
 8008812:	60a2      	str	r2, [r4, #8]
 8008814:	6962      	ldr	r2, [r4, #20]
 8008816:	4252      	negs	r2, r2
 8008818:	61a2      	str	r2, [r4, #24]
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	b942      	cbnz	r2, 8008830 <__swsetup_r+0xa4>
 800881e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008822:	d1c5      	bne.n	80087b0 <__swsetup_r+0x24>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	0799      	lsls	r1, r3, #30
 8008828:	bf58      	it	pl
 800882a:	6962      	ldrpl	r2, [r4, #20]
 800882c:	60a2      	str	r2, [r4, #8]
 800882e:	e7f4      	b.n	800881a <__swsetup_r+0x8e>
 8008830:	2000      	movs	r0, #0
 8008832:	e7f7      	b.n	8008824 <__swsetup_r+0x98>
 8008834:	20000040 	.word	0x20000040

08008838 <_raise_r>:
 8008838:	291f      	cmp	r1, #31
 800883a:	b538      	push	{r3, r4, r5, lr}
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	d904      	bls.n	800884c <_raise_r+0x14>
 8008842:	2316      	movs	r3, #22
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800884e:	b112      	cbz	r2, 8008856 <_raise_r+0x1e>
 8008850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008854:	b94b      	cbnz	r3, 800886a <_raise_r+0x32>
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f830 	bl	80088bc <_getpid_r>
 800885c:	4622      	mov	r2, r4
 800885e:	4601      	mov	r1, r0
 8008860:	4628      	mov	r0, r5
 8008862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008866:	f000 b817 	b.w	8008898 <_kill_r>
 800886a:	2b01      	cmp	r3, #1
 800886c:	d00a      	beq.n	8008884 <_raise_r+0x4c>
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	d103      	bne.n	800887a <_raise_r+0x42>
 8008872:	2316      	movs	r3, #22
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	2001      	movs	r0, #1
 8008878:	e7e7      	b.n	800884a <_raise_r+0x12>
 800887a:	2100      	movs	r1, #0
 800887c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008880:	4620      	mov	r0, r4
 8008882:	4798      	blx	r3
 8008884:	2000      	movs	r0, #0
 8008886:	e7e0      	b.n	800884a <_raise_r+0x12>

08008888 <raise>:
 8008888:	4b02      	ldr	r3, [pc, #8]	@ (8008894 <raise+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfd3 	b.w	8008838 <_raise_r>
 8008892:	bf00      	nop
 8008894:	20000040 	.word	0x20000040

08008898 <_kill_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	@ (80088b8 <_kill_r+0x20>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f7f9 fc5b 	bl	8002160 <_kill>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d102      	bne.n	80088b4 <_kill_r+0x1c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b103      	cbz	r3, 80088b4 <_kill_r+0x1c>
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop
 80088b8:	20000588 	.word	0x20000588

080088bc <_getpid_r>:
 80088bc:	f7f9 bc48 	b.w	8002150 <_getpid>

080088c0 <__swhatbuf_r>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	2900      	cmp	r1, #0
 80088ca:	b096      	sub	sp, #88	@ 0x58
 80088cc:	4615      	mov	r5, r2
 80088ce:	461e      	mov	r6, r3
 80088d0:	da0d      	bge.n	80088ee <__swhatbuf_r+0x2e>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088d8:	f04f 0100 	mov.w	r1, #0
 80088dc:	bf14      	ite	ne
 80088de:	2340      	movne	r3, #64	@ 0x40
 80088e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088e4:	2000      	movs	r0, #0
 80088e6:	6031      	str	r1, [r6, #0]
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	b016      	add	sp, #88	@ 0x58
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	466a      	mov	r2, sp
 80088f0:	f000 f848 	bl	8008984 <_fstat_r>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dbec      	blt.n	80088d2 <__swhatbuf_r+0x12>
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008902:	4259      	negs	r1, r3
 8008904:	4159      	adcs	r1, r3
 8008906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800890a:	e7eb      	b.n	80088e4 <__swhatbuf_r+0x24>

0800890c <__smakebuf_r>:
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008910:	079d      	lsls	r5, r3, #30
 8008912:	4606      	mov	r6, r0
 8008914:	460c      	mov	r4, r1
 8008916:	d507      	bpl.n	8008928 <__smakebuf_r+0x1c>
 8008918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	2301      	movs	r3, #1
 8008922:	6163      	str	r3, [r4, #20]
 8008924:	b003      	add	sp, #12
 8008926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008928:	ab01      	add	r3, sp, #4
 800892a:	466a      	mov	r2, sp
 800892c:	f7ff ffc8 	bl	80088c0 <__swhatbuf_r>
 8008930:	9f00      	ldr	r7, [sp, #0]
 8008932:	4605      	mov	r5, r0
 8008934:	4639      	mov	r1, r7
 8008936:	4630      	mov	r0, r6
 8008938:	f7fe febe 	bl	80076b8 <_malloc_r>
 800893c:	b948      	cbnz	r0, 8008952 <__smakebuf_r+0x46>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	059a      	lsls	r2, r3, #22
 8008944:	d4ee      	bmi.n	8008924 <__smakebuf_r+0x18>
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	f043 0302 	orr.w	r3, r3, #2
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	e7e2      	b.n	8008918 <__smakebuf_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	6020      	str	r0, [r4, #0]
 8008956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008962:	b15b      	cbz	r3, 800897c <__smakebuf_r+0x70>
 8008964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f81d 	bl	80089a8 <_isatty_r>
 800896e:	b128      	cbz	r0, 800897c <__smakebuf_r+0x70>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	431d      	orrs	r5, r3
 8008980:	81a5      	strh	r5, [r4, #12]
 8008982:	e7cf      	b.n	8008924 <__smakebuf_r+0x18>

08008984 <_fstat_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d07      	ldr	r5, [pc, #28]	@ (80089a4 <_fstat_r+0x20>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	4611      	mov	r1, r2
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	f7f9 fc45 	bl	8002220 <_fstat>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d102      	bne.n	80089a0 <_fstat_r+0x1c>
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	b103      	cbz	r3, 80089a0 <_fstat_r+0x1c>
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	bf00      	nop
 80089a4:	20000588 	.word	0x20000588

080089a8 <_isatty_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_isatty_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 fc44 	bl	8002240 <_isatty>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_isatty_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_isatty_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20000588 	.word	0x20000588

080089c8 <atan2>:
 80089c8:	f000 b906 	b.w	8008bd8 <__ieee754_atan2>

080089cc <sqrt>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	ed2d 8b02 	vpush	{d8}
 80089d2:	ec55 4b10 	vmov	r4, r5, d0
 80089d6:	f000 f825 	bl	8008a24 <__ieee754_sqrt>
 80089da:	4622      	mov	r2, r4
 80089dc:	462b      	mov	r3, r5
 80089de:	4620      	mov	r0, r4
 80089e0:	4629      	mov	r1, r5
 80089e2:	eeb0 8a40 	vmov.f32	s16, s0
 80089e6:	eef0 8a60 	vmov.f32	s17, s1
 80089ea:	f7f8 f8bf 	bl	8000b6c <__aeabi_dcmpun>
 80089ee:	b990      	cbnz	r0, 8008a16 <sqrt+0x4a>
 80089f0:	2200      	movs	r2, #0
 80089f2:	2300      	movs	r3, #0
 80089f4:	4620      	mov	r0, r4
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7f8 f890 	bl	8000b1c <__aeabi_dcmplt>
 80089fc:	b158      	cbz	r0, 8008a16 <sqrt+0x4a>
 80089fe:	f7fd ff6d 	bl	80068dc <__errno>
 8008a02:	2321      	movs	r3, #33	@ 0x21
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f7f7 ff3d 	bl	800088c <__aeabi_ddiv>
 8008a12:	ec41 0b18 	vmov	d8, r0, r1
 8008a16:	eeb0 0a48 	vmov.f32	s0, s16
 8008a1a:	eef0 0a68 	vmov.f32	s1, s17
 8008a1e:	ecbd 8b02 	vpop	{d8}
 8008a22:	bd38      	pop	{r3, r4, r5, pc}

08008a24 <__ieee754_sqrt>:
 8008a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	4a68      	ldr	r2, [pc, #416]	@ (8008bcc <__ieee754_sqrt+0x1a8>)
 8008a2a:	ec55 4b10 	vmov	r4, r5, d0
 8008a2e:	43aa      	bics	r2, r5
 8008a30:	462b      	mov	r3, r5
 8008a32:	4621      	mov	r1, r4
 8008a34:	d110      	bne.n	8008a58 <__ieee754_sqrt+0x34>
 8008a36:	4622      	mov	r2, r4
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fdfc 	bl	8000638 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fc40 	bl	80002cc <__adddf3>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	ec45 4b10 	vmov	d0, r4, r5
 8008a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	dc0e      	bgt.n	8008a7a <__ieee754_sqrt+0x56>
 8008a5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008a60:	4322      	orrs	r2, r4
 8008a62:	d0f5      	beq.n	8008a50 <__ieee754_sqrt+0x2c>
 8008a64:	b19d      	cbz	r5, 8008a8e <__ieee754_sqrt+0x6a>
 8008a66:	4622      	mov	r2, r4
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f7 fc2c 	bl	80002c8 <__aeabi_dsub>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	f7f7 ff0a 	bl	800088c <__aeabi_ddiv>
 8008a78:	e7e8      	b.n	8008a4c <__ieee754_sqrt+0x28>
 8008a7a:	152a      	asrs	r2, r5, #20
 8008a7c:	d115      	bne.n	8008aaa <__ieee754_sqrt+0x86>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e009      	b.n	8008a96 <__ieee754_sqrt+0x72>
 8008a82:	0acb      	lsrs	r3, r1, #11
 8008a84:	3a15      	subs	r2, #21
 8008a86:	0549      	lsls	r1, r1, #21
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0fa      	beq.n	8008a82 <__ieee754_sqrt+0x5e>
 8008a8c:	e7f7      	b.n	8008a7e <__ieee754_sqrt+0x5a>
 8008a8e:	462a      	mov	r2, r5
 8008a90:	e7fa      	b.n	8008a88 <__ieee754_sqrt+0x64>
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	3001      	adds	r0, #1
 8008a96:	02dc      	lsls	r4, r3, #11
 8008a98:	d5fb      	bpl.n	8008a92 <__ieee754_sqrt+0x6e>
 8008a9a:	1e44      	subs	r4, r0, #1
 8008a9c:	1b12      	subs	r2, r2, r4
 8008a9e:	f1c0 0420 	rsb	r4, r0, #32
 8008aa2:	fa21 f404 	lsr.w	r4, r1, r4
 8008aa6:	4323      	orrs	r3, r4
 8008aa8:	4081      	lsls	r1, r0
 8008aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	07d2      	lsls	r2, r2, #31
 8008ab8:	bf5c      	itt	pl
 8008aba:	005b      	lslpl	r3, r3, #1
 8008abc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ac4:	bf58      	it	pl
 8008ac6:	0049      	lslpl	r1, r1, #1
 8008ac8:	2600      	movs	r6, #0
 8008aca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008ace:	106d      	asrs	r5, r5, #1
 8008ad0:	0049      	lsls	r1, r1, #1
 8008ad2:	2016      	movs	r0, #22
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008ada:	1917      	adds	r7, r2, r4
 8008adc:	429f      	cmp	r7, r3
 8008ade:	bfde      	ittt	le
 8008ae0:	193a      	addle	r2, r7, r4
 8008ae2:	1bdb      	suble	r3, r3, r7
 8008ae4:	1936      	addle	r6, r6, r4
 8008ae6:	0fcf      	lsrs	r7, r1, #31
 8008ae8:	3801      	subs	r0, #1
 8008aea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008aee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008af2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008af6:	d1f0      	bne.n	8008ada <__ieee754_sqrt+0xb6>
 8008af8:	4604      	mov	r4, r0
 8008afa:	2720      	movs	r7, #32
 8008afc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008b00:	429a      	cmp	r2, r3
 8008b02:	eb00 0e0c 	add.w	lr, r0, ip
 8008b06:	db02      	blt.n	8008b0e <__ieee754_sqrt+0xea>
 8008b08:	d113      	bne.n	8008b32 <__ieee754_sqrt+0x10e>
 8008b0a:	458e      	cmp	lr, r1
 8008b0c:	d811      	bhi.n	8008b32 <__ieee754_sqrt+0x10e>
 8008b0e:	f1be 0f00 	cmp.w	lr, #0
 8008b12:	eb0e 000c 	add.w	r0, lr, ip
 8008b16:	da42      	bge.n	8008b9e <__ieee754_sqrt+0x17a>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	db40      	blt.n	8008b9e <__ieee754_sqrt+0x17a>
 8008b1c:	f102 0801 	add.w	r8, r2, #1
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	458e      	cmp	lr, r1
 8008b24:	bf88      	it	hi
 8008b26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008b2a:	eba1 010e 	sub.w	r1, r1, lr
 8008b2e:	4464      	add	r4, ip
 8008b30:	4642      	mov	r2, r8
 8008b32:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008b36:	3f01      	subs	r7, #1
 8008b38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008b3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008b44:	d1dc      	bne.n	8008b00 <__ieee754_sqrt+0xdc>
 8008b46:	4319      	orrs	r1, r3
 8008b48:	d01b      	beq.n	8008b82 <__ieee754_sqrt+0x15e>
 8008b4a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008bd0 <__ieee754_sqrt+0x1ac>
 8008b4e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008bd4 <__ieee754_sqrt+0x1b0>
 8008b52:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b56:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b5a:	f7f7 fbb5 	bl	80002c8 <__aeabi_dsub>
 8008b5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4640      	mov	r0, r8
 8008b68:	4649      	mov	r1, r9
 8008b6a:	f7f7 ffe1 	bl	8000b30 <__aeabi_dcmple>
 8008b6e:	b140      	cbz	r0, 8008b82 <__ieee754_sqrt+0x15e>
 8008b70:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008b74:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b78:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b7c:	d111      	bne.n	8008ba2 <__ieee754_sqrt+0x17e>
 8008b7e:	3601      	adds	r6, #1
 8008b80:	463c      	mov	r4, r7
 8008b82:	1072      	asrs	r2, r6, #1
 8008b84:	0863      	lsrs	r3, r4, #1
 8008b86:	07f1      	lsls	r1, r6, #31
 8008b88:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008b8c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008b90:	bf48      	it	mi
 8008b92:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008b96:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	e756      	b.n	8008a4c <__ieee754_sqrt+0x28>
 8008b9e:	4690      	mov	r8, r2
 8008ba0:	e7be      	b.n	8008b20 <__ieee754_sqrt+0xfc>
 8008ba2:	f7f7 fb93 	bl	80002cc <__adddf3>
 8008ba6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	f7f7 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8008bb6:	b120      	cbz	r0, 8008bc2 <__ieee754_sqrt+0x19e>
 8008bb8:	1ca0      	adds	r0, r4, #2
 8008bba:	bf08      	it	eq
 8008bbc:	3601      	addeq	r6, #1
 8008bbe:	3402      	adds	r4, #2
 8008bc0:	e7df      	b.n	8008b82 <__ieee754_sqrt+0x15e>
 8008bc2:	1c63      	adds	r3, r4, #1
 8008bc4:	f023 0401 	bic.w	r4, r3, #1
 8008bc8:	e7db      	b.n	8008b82 <__ieee754_sqrt+0x15e>
 8008bca:	bf00      	nop
 8008bcc:	7ff00000 	.word	0x7ff00000
 8008bd0:	20000208 	.word	0x20000208
 8008bd4:	20000200 	.word	0x20000200

08008bd8 <__ieee754_atan2>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	ec57 6b11 	vmov	r6, r7, d1
 8008be0:	4273      	negs	r3, r6
 8008be2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008d60 <__ieee754_atan2+0x188>
 8008be6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008bea:	4333      	orrs	r3, r6
 8008bec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008bf0:	4543      	cmp	r3, r8
 8008bf2:	ec51 0b10 	vmov	r0, r1, d0
 8008bf6:	4635      	mov	r5, r6
 8008bf8:	d809      	bhi.n	8008c0e <__ieee754_atan2+0x36>
 8008bfa:	4244      	negs	r4, r0
 8008bfc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c00:	4304      	orrs	r4, r0
 8008c02:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008c06:	4544      	cmp	r4, r8
 8008c08:	468e      	mov	lr, r1
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	d907      	bls.n	8008c1e <__ieee754_atan2+0x46>
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463b      	mov	r3, r7
 8008c12:	f7f7 fb5b 	bl	80002cc <__adddf3>
 8008c16:	ec41 0b10 	vmov	d0, r0, r1
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008c22:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008c26:	4334      	orrs	r4, r6
 8008c28:	d103      	bne.n	8008c32 <__ieee754_atan2+0x5a>
 8008c2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c2e:	f000 b89b 	b.w	8008d68 <atan>
 8008c32:	17bc      	asrs	r4, r7, #30
 8008c34:	f004 0402 	and.w	r4, r4, #2
 8008c38:	ea53 0909 	orrs.w	r9, r3, r9
 8008c3c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008c40:	d107      	bne.n	8008c52 <__ieee754_atan2+0x7a>
 8008c42:	2c02      	cmp	r4, #2
 8008c44:	d05f      	beq.n	8008d06 <__ieee754_atan2+0x12e>
 8008c46:	2c03      	cmp	r4, #3
 8008c48:	d1e5      	bne.n	8008c16 <__ieee754_atan2+0x3e>
 8008c4a:	a141      	add	r1, pc, #260	@ (adr r1, 8008d50 <__ieee754_atan2+0x178>)
 8008c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c50:	e7e1      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008c52:	4315      	orrs	r5, r2
 8008c54:	d106      	bne.n	8008c64 <__ieee754_atan2+0x8c>
 8008c56:	f1be 0f00 	cmp.w	lr, #0
 8008c5a:	da5f      	bge.n	8008d1c <__ieee754_atan2+0x144>
 8008c5c:	a13e      	add	r1, pc, #248	@ (adr r1, 8008d58 <__ieee754_atan2+0x180>)
 8008c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c62:	e7d8      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008c64:	4542      	cmp	r2, r8
 8008c66:	d10f      	bne.n	8008c88 <__ieee754_atan2+0xb0>
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c6e:	d107      	bne.n	8008c80 <__ieee754_atan2+0xa8>
 8008c70:	2c02      	cmp	r4, #2
 8008c72:	d84c      	bhi.n	8008d0e <__ieee754_atan2+0x136>
 8008c74:	4b34      	ldr	r3, [pc, #208]	@ (8008d48 <__ieee754_atan2+0x170>)
 8008c76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c7e:	e7ca      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008c80:	2c02      	cmp	r4, #2
 8008c82:	d848      	bhi.n	8008d16 <__ieee754_atan2+0x13e>
 8008c84:	4b31      	ldr	r3, [pc, #196]	@ (8008d4c <__ieee754_atan2+0x174>)
 8008c86:	e7f6      	b.n	8008c76 <__ieee754_atan2+0x9e>
 8008c88:	4543      	cmp	r3, r8
 8008c8a:	d0e4      	beq.n	8008c56 <__ieee754_atan2+0x7e>
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008c92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c96:	da1e      	bge.n	8008cd6 <__ieee754_atan2+0xfe>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	da01      	bge.n	8008ca0 <__ieee754_atan2+0xc8>
 8008c9c:	323c      	adds	r2, #60	@ 0x3c
 8008c9e:	db1e      	blt.n	8008cde <__ieee754_atan2+0x106>
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	f7f7 fdf2 	bl	800088c <__aeabi_ddiv>
 8008ca8:	ec41 0b10 	vmov	d0, r0, r1
 8008cac:	f000 f9f4 	bl	8009098 <fabs>
 8008cb0:	f000 f85a 	bl	8008d68 <atan>
 8008cb4:	ec51 0b10 	vmov	r0, r1, d0
 8008cb8:	2c01      	cmp	r4, #1
 8008cba:	d013      	beq.n	8008ce4 <__ieee754_atan2+0x10c>
 8008cbc:	2c02      	cmp	r4, #2
 8008cbe:	d015      	beq.n	8008cec <__ieee754_atan2+0x114>
 8008cc0:	2c00      	cmp	r4, #0
 8008cc2:	d0a8      	beq.n	8008c16 <__ieee754_atan2+0x3e>
 8008cc4:	a318      	add	r3, pc, #96	@ (adr r3, 8008d28 <__ieee754_atan2+0x150>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fafd 	bl	80002c8 <__aeabi_dsub>
 8008cce:	a318      	add	r3, pc, #96	@ (adr r3, 8008d30 <__ieee754_atan2+0x158>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	e014      	b.n	8008d00 <__ieee754_atan2+0x128>
 8008cd6:	a118      	add	r1, pc, #96	@ (adr r1, 8008d38 <__ieee754_atan2+0x160>)
 8008cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cdc:	e7ec      	b.n	8008cb8 <__ieee754_atan2+0xe0>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	e7e9      	b.n	8008cb8 <__ieee754_atan2+0xe0>
 8008ce4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ce8:	4619      	mov	r1, r3
 8008cea:	e794      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008cec:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d28 <__ieee754_atan2+0x150>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fae9 	bl	80002c8 <__aeabi_dsub>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	a10d      	add	r1, pc, #52	@ (adr r1, 8008d30 <__ieee754_atan2+0x158>)
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	f7f7 fae2 	bl	80002c8 <__aeabi_dsub>
 8008d04:	e787      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008d06:	a10a      	add	r1, pc, #40	@ (adr r1, 8008d30 <__ieee754_atan2+0x158>)
 8008d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0c:	e783      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008d0e:	a10c      	add	r1, pc, #48	@ (adr r1, 8008d40 <__ieee754_atan2+0x168>)
 8008d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d14:	e77f      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008d16:	2000      	movs	r0, #0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	e77c      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008d1c:	a106      	add	r1, pc, #24	@ (adr r1, 8008d38 <__ieee754_atan2+0x160>)
 8008d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d22:	e778      	b.n	8008c16 <__ieee754_atan2+0x3e>
 8008d24:	f3af 8000 	nop.w
 8008d28:	33145c07 	.word	0x33145c07
 8008d2c:	3ca1a626 	.word	0x3ca1a626
 8008d30:	54442d18 	.word	0x54442d18
 8008d34:	400921fb 	.word	0x400921fb
 8008d38:	54442d18 	.word	0x54442d18
 8008d3c:	3ff921fb 	.word	0x3ff921fb
 8008d40:	54442d18 	.word	0x54442d18
 8008d44:	3fe921fb 	.word	0x3fe921fb
 8008d48:	08009480 	.word	0x08009480
 8008d4c:	08009468 	.word	0x08009468
 8008d50:	54442d18 	.word	0x54442d18
 8008d54:	c00921fb 	.word	0xc00921fb
 8008d58:	54442d18 	.word	0x54442d18
 8008d5c:	bff921fb 	.word	0xbff921fb
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	00000000 	.word	0x00000000

08008d68 <atan>:
 8008d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	ec55 4b10 	vmov	r4, r5, d0
 8008d70:	4bbf      	ldr	r3, [pc, #764]	@ (8009070 <atan+0x308>)
 8008d72:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008d76:	429e      	cmp	r6, r3
 8008d78:	46ab      	mov	fp, r5
 8008d7a:	d918      	bls.n	8008dae <atan+0x46>
 8008d7c:	4bbd      	ldr	r3, [pc, #756]	@ (8009074 <atan+0x30c>)
 8008d7e:	429e      	cmp	r6, r3
 8008d80:	d801      	bhi.n	8008d86 <atan+0x1e>
 8008d82:	d109      	bne.n	8008d98 <atan+0x30>
 8008d84:	b144      	cbz	r4, 8008d98 <atan+0x30>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fa9d 	bl	80002cc <__adddf3>
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	e006      	b.n	8008da6 <atan+0x3e>
 8008d98:	f1bb 0f00 	cmp.w	fp, #0
 8008d9c:	f340 812b 	ble.w	8008ff6 <atan+0x28e>
 8008da0:	a597      	add	r5, pc, #604	@ (adr r5, 8009000 <atan+0x298>)
 8008da2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008da6:	ec45 4b10 	vmov	d0, r4, r5
 8008daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	4bb2      	ldr	r3, [pc, #712]	@ (8009078 <atan+0x310>)
 8008db0:	429e      	cmp	r6, r3
 8008db2:	d813      	bhi.n	8008ddc <atan+0x74>
 8008db4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008db8:	429e      	cmp	r6, r3
 8008dba:	d80c      	bhi.n	8008dd6 <atan+0x6e>
 8008dbc:	a392      	add	r3, pc, #584	@ (adr r3, 8009008 <atan+0x2a0>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fa81 	bl	80002cc <__adddf3>
 8008dca:	4bac      	ldr	r3, [pc, #688]	@ (800907c <atan+0x314>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f7f7 fec3 	bl	8000b58 <__aeabi_dcmpgt>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1e7      	bne.n	8008da6 <atan+0x3e>
 8008dd6:	f04f 3aff 	mov.w	sl, #4294967295
 8008dda:	e029      	b.n	8008e30 <atan+0xc8>
 8008ddc:	f000 f95c 	bl	8009098 <fabs>
 8008de0:	4ba7      	ldr	r3, [pc, #668]	@ (8009080 <atan+0x318>)
 8008de2:	429e      	cmp	r6, r3
 8008de4:	ec55 4b10 	vmov	r4, r5, d0
 8008de8:	f200 80bc 	bhi.w	8008f64 <atan+0x1fc>
 8008dec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008df0:	429e      	cmp	r6, r3
 8008df2:	f200 809e 	bhi.w	8008f32 <atan+0x1ca>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7f7 fa65 	bl	80002cc <__adddf3>
 8008e02:	4b9e      	ldr	r3, [pc, #632]	@ (800907c <atan+0x314>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	f7f7 fa5f 	bl	80002c8 <__aeabi_dsub>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	460f      	mov	r7, r1
 8008e10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 fa58 	bl	80002cc <__adddf3>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fd32 	bl	800088c <__aeabi_ddiv>
 8008e28:	f04f 0a00 	mov.w	sl, #0
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	460d      	mov	r5, r1
 8008e30:	4622      	mov	r2, r4
 8008e32:	462b      	mov	r3, r5
 8008e34:	4620      	mov	r0, r4
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7f7 fbfe 	bl	8000638 <__aeabi_dmul>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4680      	mov	r8, r0
 8008e42:	4689      	mov	r9, r1
 8008e44:	f7f7 fbf8 	bl	8000638 <__aeabi_dmul>
 8008e48:	a371      	add	r3, pc, #452	@ (adr r3, 8009010 <atan+0x2a8>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	f7f7 fbf1 	bl	8000638 <__aeabi_dmul>
 8008e56:	a370      	add	r3, pc, #448	@ (adr r3, 8009018 <atan+0x2b0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fa36 	bl	80002cc <__adddf3>
 8008e60:	4632      	mov	r2, r6
 8008e62:	463b      	mov	r3, r7
 8008e64:	f7f7 fbe8 	bl	8000638 <__aeabi_dmul>
 8008e68:	a36d      	add	r3, pc, #436	@ (adr r3, 8009020 <atan+0x2b8>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 fa2d 	bl	80002cc <__adddf3>
 8008e72:	4632      	mov	r2, r6
 8008e74:	463b      	mov	r3, r7
 8008e76:	f7f7 fbdf 	bl	8000638 <__aeabi_dmul>
 8008e7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009028 <atan+0x2c0>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fa24 	bl	80002cc <__adddf3>
 8008e84:	4632      	mov	r2, r6
 8008e86:	463b      	mov	r3, r7
 8008e88:	f7f7 fbd6 	bl	8000638 <__aeabi_dmul>
 8008e8c:	a368      	add	r3, pc, #416	@ (adr r3, 8009030 <atan+0x2c8>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f7f7 fa1b 	bl	80002cc <__adddf3>
 8008e96:	4632      	mov	r2, r6
 8008e98:	463b      	mov	r3, r7
 8008e9a:	f7f7 fbcd 	bl	8000638 <__aeabi_dmul>
 8008e9e:	a366      	add	r3, pc, #408	@ (adr r3, 8009038 <atan+0x2d0>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fa12 	bl	80002cc <__adddf3>
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	f7f7 fbc4 	bl	8000638 <__aeabi_dmul>
 8008eb0:	a363      	add	r3, pc, #396	@ (adr r3, 8009040 <atan+0x2d8>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	4689      	mov	r9, r1
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 fbbb 	bl	8000638 <__aeabi_dmul>
 8008ec2:	a361      	add	r3, pc, #388	@ (adr r3, 8009048 <atan+0x2e0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f9fe 	bl	80002c8 <__aeabi_dsub>
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	f7f7 fbb2 	bl	8000638 <__aeabi_dmul>
 8008ed4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009050 <atan+0x2e8>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9f5 	bl	80002c8 <__aeabi_dsub>
 8008ede:	4632      	mov	r2, r6
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	f7f7 fba9 	bl	8000638 <__aeabi_dmul>
 8008ee6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009058 <atan+0x2f0>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 f9ec 	bl	80002c8 <__aeabi_dsub>
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	f7f7 fba0 	bl	8000638 <__aeabi_dmul>
 8008ef8:	a359      	add	r3, pc, #356	@ (adr r3, 8009060 <atan+0x2f8>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f9e3 	bl	80002c8 <__aeabi_dsub>
 8008f02:	4632      	mov	r2, r6
 8008f04:	463b      	mov	r3, r7
 8008f06:	f7f7 fb97 	bl	8000638 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 f9db 	bl	80002cc <__adddf3>
 8008f16:	4622      	mov	r2, r4
 8008f18:	462b      	mov	r3, r5
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	d148      	bne.n	8008fba <atan+0x252>
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 f9cc 	bl	80002c8 <__aeabi_dsub>
 8008f30:	e72f      	b.n	8008d92 <atan+0x2a>
 8008f32:	4b52      	ldr	r3, [pc, #328]	@ (800907c <atan+0x314>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f9c5 	bl	80002c8 <__aeabi_dsub>
 8008f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800907c <atan+0x314>)
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	2200      	movs	r2, #0
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 f9bf 	bl	80002cc <__adddf3>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4630      	mov	r0, r6
 8008f54:	4639      	mov	r1, r7
 8008f56:	f7f7 fc99 	bl	800088c <__aeabi_ddiv>
 8008f5a:	f04f 0a01 	mov.w	sl, #1
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	e765      	b.n	8008e30 <atan+0xc8>
 8008f64:	4b47      	ldr	r3, [pc, #284]	@ (8009084 <atan+0x31c>)
 8008f66:	429e      	cmp	r6, r3
 8008f68:	d21c      	bcs.n	8008fa4 <atan+0x23c>
 8008f6a:	4b47      	ldr	r3, [pc, #284]	@ (8009088 <atan+0x320>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 f9a9 	bl	80002c8 <__aeabi_dsub>
 8008f76:	4b44      	ldr	r3, [pc, #272]	@ (8009088 <atan+0x320>)
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7f7 fb59 	bl	8000638 <__aeabi_dmul>
 8008f86:	4b3d      	ldr	r3, [pc, #244]	@ (800907c <atan+0x314>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f7f7 f99f 	bl	80002cc <__adddf3>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 fc79 	bl	800088c <__aeabi_ddiv>
 8008f9a:	f04f 0a02 	mov.w	sl, #2
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	e745      	b.n	8008e30 <atan+0xc8>
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	4938      	ldr	r1, [pc, #224]	@ (800908c <atan+0x324>)
 8008faa:	2000      	movs	r0, #0
 8008fac:	f7f7 fc6e 	bl	800088c <__aeabi_ddiv>
 8008fb0:	f04f 0a03 	mov.w	sl, #3
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	e73a      	b.n	8008e30 <atan+0xc8>
 8008fba:	4b35      	ldr	r3, [pc, #212]	@ (8009090 <atan+0x328>)
 8008fbc:	4e35      	ldr	r6, [pc, #212]	@ (8009094 <atan+0x32c>)
 8008fbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 f97f 	bl	80002c8 <__aeabi_dsub>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	462b      	mov	r3, r5
 8008fce:	f7f7 f97b 	bl	80002c8 <__aeabi_dsub>
 8008fd2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008fde:	f7f7 f973 	bl	80002c8 <__aeabi_dsub>
 8008fe2:	f1bb 0f00 	cmp.w	fp, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	f6bf aedc 	bge.w	8008da6 <atan+0x3e>
 8008fee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	e6d7      	b.n	8008da6 <atan+0x3e>
 8008ff6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009068 <atan+0x300>)
 8008ff8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ffc:	e6d3      	b.n	8008da6 <atan+0x3e>
 8008ffe:	bf00      	nop
 8009000:	54442d18 	.word	0x54442d18
 8009004:	3ff921fb 	.word	0x3ff921fb
 8009008:	8800759c 	.word	0x8800759c
 800900c:	7e37e43c 	.word	0x7e37e43c
 8009010:	e322da11 	.word	0xe322da11
 8009014:	3f90ad3a 	.word	0x3f90ad3a
 8009018:	24760deb 	.word	0x24760deb
 800901c:	3fa97b4b 	.word	0x3fa97b4b
 8009020:	a0d03d51 	.word	0xa0d03d51
 8009024:	3fb10d66 	.word	0x3fb10d66
 8009028:	c54c206e 	.word	0xc54c206e
 800902c:	3fb745cd 	.word	0x3fb745cd
 8009030:	920083ff 	.word	0x920083ff
 8009034:	3fc24924 	.word	0x3fc24924
 8009038:	5555550d 	.word	0x5555550d
 800903c:	3fd55555 	.word	0x3fd55555
 8009040:	2c6a6c2f 	.word	0x2c6a6c2f
 8009044:	bfa2b444 	.word	0xbfa2b444
 8009048:	52defd9a 	.word	0x52defd9a
 800904c:	3fadde2d 	.word	0x3fadde2d
 8009050:	af749a6d 	.word	0xaf749a6d
 8009054:	3fb3b0f2 	.word	0x3fb3b0f2
 8009058:	fe231671 	.word	0xfe231671
 800905c:	3fbc71c6 	.word	0x3fbc71c6
 8009060:	9998ebc4 	.word	0x9998ebc4
 8009064:	3fc99999 	.word	0x3fc99999
 8009068:	54442d18 	.word	0x54442d18
 800906c:	bff921fb 	.word	0xbff921fb
 8009070:	440fffff 	.word	0x440fffff
 8009074:	7ff00000 	.word	0x7ff00000
 8009078:	3fdbffff 	.word	0x3fdbffff
 800907c:	3ff00000 	.word	0x3ff00000
 8009080:	3ff2ffff 	.word	0x3ff2ffff
 8009084:	40038000 	.word	0x40038000
 8009088:	3ff80000 	.word	0x3ff80000
 800908c:	bff00000 	.word	0xbff00000
 8009090:	08009498 	.word	0x08009498
 8009094:	080094b8 	.word	0x080094b8

08009098 <fabs>:
 8009098:	ec51 0b10 	vmov	r0, r1, d0
 800909c:	4602      	mov	r2, r0
 800909e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090a2:	ec43 2b10 	vmov	d0, r2, r3
 80090a6:	4770      	bx	lr

080090a8 <_init>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr

080090b4 <_fini>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr
